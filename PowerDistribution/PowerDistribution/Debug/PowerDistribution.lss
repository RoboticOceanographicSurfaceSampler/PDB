
PowerDistribution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f6  00802000  000023d2  00002466  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000037  008020f6  008020f6  0000255c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000255c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000025f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004c80  00000000  00000000  00002760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000974  00000000  00000000  000073e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010b7  00000000  00000000  00007d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  00008e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000024b3  00000000  00000000  00009358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011a7  00000000  00000000  0000b80b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  0000c9b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
       8:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
       c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      10:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      14:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      18:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      1c:	0c 94 86 02 	jmp	0x50c	; 0x50c <__vector_7>
      20:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_8>
      24:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      28:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      2c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      30:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_12>
      34:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      38:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      3c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      40:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      44:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      48:	0c 94 ca 01 	jmp	0x394	; 0x394 <__vector_18>
      4c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      50:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      54:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      58:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      5c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      60:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      64:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      68:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      6c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      70:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      74:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      78:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_30>
      7c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      80:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      84:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      88:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      8c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__vector_35>
      90:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__vector_36>
      94:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      98:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_38>
      9c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      a0:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      a4:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      a8:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      ac:	07 63       	ori	r16, 0x37	; 55
      ae:	42 36       	cpi	r20, 0x62	; 98
      b0:	b7 9b       	sbis	0x16, 7	; 22
      b2:	d8 a7       	std	Y+40, r29	; 0x28
      b4:	1a 39       	cpi	r17, 0x9A	; 154
      b6:	68 56       	subi	r22, 0x68	; 104
      b8:	18 ae       	std	Y+56, r1	; 0x38
      ba:	ba ab       	std	Y+50, r27	; 0x32
      bc:	55 8c       	ldd	r5, Z+29	; 0x1d
      be:	1d 3c       	cpi	r17, 0xCD	; 205
      c0:	b7 cc       	rjmp	.-1682   	; 0xfffffa30 <__eeprom_end+0xff7efa30>
      c2:	57 63       	ori	r21, 0x37	; 55
      c4:	bd 6d       	ori	r27, 0xDD	; 221
      c6:	ed fd       	.word	0xfded	; ????
      c8:	75 3e       	cpi	r23, 0xE5	; 229
      ca:	f6 17       	cp	r31, r22
      cc:	72 31       	cpi	r23, 0x12	; 18
      ce:	bf 00       	.word	0x00bf	; ????
      d0:	00 00       	nop
      d2:	80 3f       	cpi	r24, 0xF0	; 240
      d4:	08 00       	.word	0x0008	; ????
      d6:	00 00       	nop
      d8:	be 92       	st	-X, r11
      da:	24 49       	sbci	r18, 0x94	; 148
      dc:	12 3e       	cpi	r17, 0xE2	; 226
      de:	ab aa       	std	Y+51, r10	; 0x33
      e0:	aa 2a       	or	r10, r26
      e2:	be cd       	rjmp	.-1156   	; 0xfffffc60 <__eeprom_end+0xff7efc60>
      e4:	cc cc       	rjmp	.-1640   	; 0xfffffa7e <__eeprom_end+0xff7efa7e>
      e6:	4c 3e       	cpi	r20, 0xEC	; 236
      e8:	00 00       	nop
      ea:	00 80       	ld	r0, Z
      ec:	be ab       	std	Y+54, r27	; 0x36
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	aa 3e       	cpi	r26, 0xEA	; 234
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	bf 00       	.word	0x00bf	; ????
      f8:	00 00       	nop
      fa:	80 3f       	cpi	r24, 0xF0	; 240
      fc:	00 00       	nop
      fe:	00 00       	nop
     100:	00 08       	sbc	r0, r0
     102:	41 78       	andi	r20, 0x81	; 129
     104:	d3 bb       	out	0x13, r29	; 19
     106:	43 87       	std	Z+11, r20	; 0x0b
     108:	d1 13       	cpse	r29, r17
     10a:	3d 19       	sub	r19, r13
     10c:	0e 3c       	cpi	r16, 0xCE	; 206
     10e:	c3 bd       	out	0x23, r28	; 35
     110:	42 82       	std	Z+2, r4	; 0x02
     112:	ad 2b       	or	r26, r29
     114:	3e 68       	ori	r19, 0x8E	; 142
     116:	ec 82       	std	Y+4, r14	; 0x04
     118:	76 be       	out	0x36, r7	; 54
     11a:	d9 8f       	std	Y+25, r29	; 0x19
     11c:	e1 a9       	ldd	r30, Z+49	; 0x31
     11e:	3e 4c       	sbci	r19, 0xCE	; 206
     120:	80 ef       	ldi	r24, 0xF0	; 240
     122:	ff be       	out	0x3f, r15	; 63
     124:	01 c4       	rjmp	.+2050   	; 0x928 <_Z21configureSerialNumberv+0x36a>
     126:	ff 7f       	andi	r31, 0xFF	; 255
     128:	3f 00       	.word	0x003f	; ????
     12a:	00 00       	nop
	...

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	cd bf       	out	0x3d, r28	; 61
     136:	df e2       	ldi	r29, 0x2F	; 47
     138:	de bf       	out	0x3e, r29	; 62

0000013a <__do_copy_data>:
     13a:	10 e2       	ldi	r17, 0x20	; 32
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b0 e2       	ldi	r27, 0x20	; 32
     140:	e2 ed       	ldi	r30, 0xD2	; 210
     142:	f3 e2       	ldi	r31, 0x23	; 35
     144:	02 c0       	rjmp	.+4      	; 0x14a <__do_copy_data+0x10>
     146:	05 90       	lpm	r0, Z+
     148:	0d 92       	st	X+, r0
     14a:	a6 3f       	cpi	r26, 0xF6	; 246
     14c:	b1 07       	cpc	r27, r17
     14e:	d9 f7       	brne	.-10     	; 0x146 <__do_copy_data+0xc>

00000150 <__do_clear_bss>:
     150:	21 e2       	ldi	r18, 0x21	; 33
     152:	a6 ef       	ldi	r26, 0xF6	; 246
     154:	b0 e2       	ldi	r27, 0x20	; 32
     156:	01 c0       	rjmp	.+2      	; 0x15a <.do_clear_bss_start>

00000158 <.do_clear_bss_loop>:
     158:	1d 92       	st	X+, r1

0000015a <.do_clear_bss_start>:
     15a:	ad 32       	cpi	r26, 0x2D	; 45
     15c:	b2 07       	cpc	r27, r18
     15e:	e1 f7       	brne	.-8      	; 0x158 <.do_clear_bss_loop>
     160:	0e 94 1c 07 	call	0xe38	; 0xe38 <main>
     164:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <_exit>

00000168 <__bad_interrupt>:
     168:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016c <_Z27configureExternalOscillatorv>:
	OSC_CTRL |= OSC_RC32MEN_bm; //Setup 32Mhz crystal
	
	while(!(OSC_STATUS & OSC_RC32MRDY_bm));
	
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal
     16c:	e0 e5       	ldi	r30, 0x50	; 80
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	8b e4       	ldi	r24, 0x4B	; 75
     172:	82 83       	std	Z+2, r24	; 0x02
     174:	80 81       	ld	r24, Z
     176:	88 60       	ori	r24, 0x08	; 8
     178:	80 83       	st	Z, r24
     17a:	81 81       	ldd	r24, Z+1	; 0x01
     17c:	83 fd       	sbrc	r24, 3
     17e:	09 c0       	rjmp	.+18     	; 0x192 <_Z27configureExternalOscillatorv+0x26>
     180:	a0 e4       	ldi	r26, 0x40	; 64
     182:	b6 e0       	ldi	r27, 0x06	; 6
     184:	92 e0       	ldi	r25, 0x02	; 2
     186:	15 96       	adiw	r26, 0x05	; 5
     188:	9c 93       	st	X, r25
     18a:	15 97       	sbiw	r26, 0x05	; 5
     18c:	81 81       	ldd	r24, Z+1	; 0x01
     18e:	83 ff       	sbrs	r24, 3
     190:	fa cf       	rjmp	.-12     	; 0x186 <_Z27configureExternalOscillatorv+0x1a>
     192:	82 e0       	ldi	r24, 0x02	; 2
     194:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     198:	88 ed       	ldi	r24, 0xD8	; 216
     19a:	84 bf       	out	0x34, r24	; 52
     19c:	e0 e5       	ldi	r30, 0x50	; 80
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	88 ec       	ldi	r24, 0xC8	; 200
     1a2:	85 83       	std	Z+5, r24	; 0x05
     1a4:	80 81       	ld	r24, Z
     1a6:	80 61       	ori	r24, 0x10	; 16
     1a8:	80 83       	st	Z, r24
     1aa:	81 81       	ldd	r24, Z+1	; 0x01
     1ac:	84 fd       	sbrc	r24, 4
     1ae:	09 c0       	rjmp	.+18     	; 0x1c2 <_Z27configureExternalOscillatorv+0x56>
     1b0:	a0 e4       	ldi	r26, 0x40	; 64
     1b2:	b6 e0       	ldi	r27, 0x06	; 6
     1b4:	92 e0       	ldi	r25, 0x02	; 2
     1b6:	15 96       	adiw	r26, 0x05	; 5
     1b8:	9c 93       	st	X, r25
     1ba:	15 97       	sbiw	r26, 0x05	; 5
     1bc:	81 81       	ldd	r24, Z+1	; 0x01
     1be:	84 ff       	sbrs	r24, 4
     1c0:	fa cf       	rjmp	.-12     	; 0x1b6 <_Z27configureExternalOscillatorv+0x4a>
     1c2:	82 e0       	ldi	r24, 0x02	; 2
     1c4:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     1c8:	88 ed       	ldi	r24, 0xD8	; 216
     1ca:	84 bf       	out	0x34, r24	; 52
     1cc:	e0 e4       	ldi	r30, 0x40	; 64
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	10 82       	st	Z, r1
     1d2:	84 bf       	out	0x34, r24	; 52
     1d4:	84 e0       	ldi	r24, 0x04	; 4
     1d6:	80 83       	st	Z, r24
     1d8:	08 95       	ret

000001da <_Z11configureIOv>:
     1da:	cf 93       	push	r28
     1dc:	df 93       	push	r29
     1de:	e0 e4       	ldi	r30, 0x40	; 64
     1e0:	f6 e0       	ldi	r31, 0x06	; 6
     1e2:	92 e0       	ldi	r25, 0x02	; 2
     1e4:	91 83       	std	Z+1, r25	; 0x01
     1e6:	21 e0       	ldi	r18, 0x01	; 1
     1e8:	21 83       	std	Z+1, r18	; 0x01
     1ea:	80 e2       	ldi	r24, 0x20	; 32
     1ec:	81 83       	std	Z+1, r24	; 0x01
     1ee:	44 e0       	ldi	r20, 0x04	; 4
     1f0:	42 83       	std	Z+2, r20	; 0x02
     1f2:	38 e0       	ldi	r19, 0x08	; 8
     1f4:	32 83       	std	Z+2, r19	; 0x02
     1f6:	58 e1       	ldi	r21, 0x18	; 24
     1f8:	52 8b       	std	Z+18, r21	; 0x12
     1fa:	53 8b       	std	Z+19, r21	; 0x13
     1fc:	c0 e0       	ldi	r28, 0x00	; 0
     1fe:	d6 e0       	ldi	r29, 0x06	; 6
     200:	2a 83       	std	Y+2, r18	; 0x02
     202:	9a 83       	std	Y+2, r25	; 0x02
     204:	a0 e6       	ldi	r26, 0x60	; 96
     206:	b6 e0       	ldi	r27, 0x06	; 6
     208:	12 96       	adiw	r26, 0x02	; 2
     20a:	2c 93       	st	X, r18
     20c:	12 97       	sbiw	r26, 0x02	; 2
     20e:	12 96       	adiw	r26, 0x02	; 2
     210:	9c 93       	st	X, r25
     212:	12 97       	sbiw	r26, 0x02	; 2
     214:	12 96       	adiw	r26, 0x02	; 2
     216:	4c 93       	st	X, r20
     218:	12 97       	sbiw	r26, 0x02	; 2
     21a:	3a 83       	std	Y+2, r19	; 0x02
     21c:	30 e1       	ldi	r19, 0x10	; 16
     21e:	3a 83       	std	Y+2, r19	; 0x02
     220:	8a 83       	std	Y+2, r24	; 0x02
     222:	50 e4       	ldi	r21, 0x40	; 64
     224:	5a 83       	std	Y+2, r21	; 0x02
     226:	50 e8       	ldi	r21, 0x80	; 128
     228:	5a 83       	std	Y+2, r21	; 0x02
     22a:	32 83       	std	Z+2, r19	; 0x02
     22c:	4a 83       	std	Y+2, r20	; 0x02
     22e:	12 96       	adiw	r26, 0x02	; 2
     230:	3c 93       	st	X, r19
     232:	12 97       	sbiw	r26, 0x02	; 2
     234:	11 96       	adiw	r26, 0x01	; 1
     236:	8c 93       	st	X, r24
     238:	11 97       	sbiw	r26, 0x01	; 1
     23a:	19 96       	adiw	r26, 0x09	; 9
     23c:	9c 93       	st	X, r25
     23e:	19 97       	sbiw	r26, 0x09	; 9
     240:	1a 96       	adiw	r26, 0x0a	; 10
     242:	3c 93       	st	X, r19
     244:	1a 97       	sbiw	r26, 0x0a	; 10
     246:	54 96       	adiw	r26, 0x14	; 20
     248:	2c 93       	st	X, r18
     24a:	54 97       	sbiw	r26, 0x14	; 20
     24c:	26 83       	std	Z+6, r18	; 0x06
     24e:	96 83       	std	Z+6, r25	; 0x06
     250:	85 83       	std	Z+5, r24	; 0x05
     252:	16 96       	adiw	r26, 0x06	; 6
     254:	8c 93       	st	X, r24
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <__vector_35>:
     25c:	1f 92       	push	r1
     25e:	0f 92       	push	r0
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	0f 92       	push	r0
     264:	11 24       	eor	r1, r1
     266:	8f 93       	push	r24
     268:	9f 93       	push	r25
     26a:	80 e1       	ldi	r24, 0x10	; 16
     26c:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <__TEXT_REGION_LENGTH__+0x70066c>
     270:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <PWMMeasuringStatus>
     274:	81 30       	cpi	r24, 0x01	; 1
     276:	81 f4       	brne	.+32     	; 0x298 <__vector_35+0x3c>
     278:	10 92 60 08 	sts	0x0860, r1	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
     27c:	10 92 61 08 	sts	0x0861, r1	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>
     280:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <PWMMeasuringStatus>
     284:	87 ec       	ldi	r24, 0xC7	; 199
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	01 97       	sbiw	r24, 0x01	; 1
     28a:	f1 f7       	brne	.-4      	; 0x288 <__vector_35+0x2c>
     28c:	00 c0       	rjmp	.+0      	; 0x28e <__vector_35+0x32>
     28e:	00 00       	nop
     290:	82 e0       	ldi	r24, 0x02	; 2
     292:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <__TEXT_REGION_LENGTH__+0x700674>
     296:	0f c0       	rjmp	.+30     	; 0x2b6 <__vector_35+0x5a>
     298:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
     29c:	90 91 61 08 	lds	r25, 0x0861	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>
     2a0:	88 0f       	add	r24, r24
     2a2:	99 1f       	adc	r25, r25
     2a4:	80 93 13 21 	sts	0x2113, r24	; 0x802113 <steeringPWMPeriod>
     2a8:	90 93 14 21 	sts	0x2114, r25	; 0x802114 <steeringPWMPeriod+0x1>
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <PWMMeasuringStatus>
     2b2:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <__TEXT_REGION_LENGTH__+0x700674>
     2b6:	9f 91       	pop	r25
     2b8:	8f 91       	pop	r24
     2ba:	0f 90       	pop	r0
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	0f 90       	pop	r0
     2c0:	1f 90       	pop	r1
     2c2:	18 95       	reti

000002c4 <__vector_30>:
     2c4:	1f 92       	push	r1
     2c6:	0f 92       	push	r0
     2c8:	0f b6       	in	r0, 0x3f	; 63
     2ca:	0f 92       	push	r0
     2cc:	11 24       	eor	r1, r1
     2ce:	8f 93       	push	r24
     2d0:	9f 93       	push	r25
     2d2:	ef 93       	push	r30
     2d4:	ff 93       	push	r31
     2d6:	f8 94       	cli
     2d8:	84 e0       	ldi	r24, 0x04	; 4
     2da:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <__TEXT_REGION_LENGTH__+0x70060c>
     2de:	80 91 24 21 	lds	r24, 0x2124	; 0x802124 <RSSI+0x1>
     2e2:	81 30       	cpi	r24, 0x01	; 1
     2e4:	61 f4       	brne	.+24     	; 0x2fe <__vector_30+0x3a>
     2e6:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     2ea:	82 fd       	sbrc	r24, 2
     2ec:	0b c0       	rjmp	.+22     	; 0x304 <__vector_30+0x40>
     2ee:	1f c0       	rjmp	.+62     	; 0x32e <__vector_30+0x6a>
     2f0:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     2f4:	82 ff       	sbrs	r24, 2
     2f6:	0d c0       	rjmp	.+26     	; 0x312 <__vector_30+0x4e>
     2f8:	1a c0       	rjmp	.+52     	; 0x32e <__vector_30+0x6a>
     2fa:	78 94       	sei
     2fc:	1c c0       	rjmp	.+56     	; 0x336 <__vector_30+0x72>
     2fe:	88 23       	and	r24, r24
     300:	b9 f3       	breq	.-18     	; 0x2f0 <__vector_30+0x2c>
     302:	15 c0       	rjmp	.+42     	; 0x32e <__vector_30+0x6a>
     304:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     308:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     30c:	10 92 24 21 	sts	0x2124, r1	; 0x802124 <RSSI+0x1>
     310:	f4 cf       	rjmp	.-24     	; 0x2fa <__vector_30+0x36>
     312:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     316:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     31a:	e3 e2       	ldi	r30, 0x23	; 35
     31c:	f1 e2       	ldi	r31, 0x21	; 33
     31e:	84 83       	std	Z+4, r24	; 0x04
     320:	95 83       	std	Z+5, r25	; 0x05
     322:	86 81       	ldd	r24, Z+6	; 0x06
     324:	97 81       	ldd	r25, Z+7	; 0x07
     326:	01 96       	adiw	r24, 0x01	; 1
     328:	86 83       	std	Z+6, r24	; 0x06
     32a:	97 83       	std	Z+7, r25	; 0x07
     32c:	e6 cf       	rjmp	.-52     	; 0x2fa <__vector_30+0x36>
     32e:	82 e0       	ldi	r24, 0x02	; 2
     330:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     334:	e2 cf       	rjmp	.-60     	; 0x2fa <__vector_30+0x36>
     336:	ff 91       	pop	r31
     338:	ef 91       	pop	r30
     33a:	9f 91       	pop	r25
     33c:	8f 91       	pop	r24
     33e:	0f 90       	pop	r0
     340:	0f be       	out	0x3f, r0	; 63
     342:	0f 90       	pop	r0
     344:	1f 90       	pop	r1
     346:	18 95       	reti

00000348 <_Z21configureTimerCounterv>:
1S    = 0x7A12

*/
void configureTimerCounter(){
	//Configure the accurate reporting timer
	TCC4.CTRLA = TC45_CLKSEL_DIV1024_gc;	//Configure a 1024 prescaler (we want very broad timing here, exact precision isn't required)
     348:	e0 e0       	ldi	r30, 0x00	; 0
     34a:	f8 e0       	ldi	r31, 0x08	; 8
     34c:	87 e0       	ldi	r24, 0x07	; 7
     34e:	80 83       	st	Z, r24
	TCC4.PER = TC_1024_500MS;               //500mS delay
     350:	89 e0       	ldi	r24, 0x09	; 9
     352:	9d e3       	ldi	r25, 0x3D	; 61
     354:	86 a3       	std	Z+38, r24	; 0x26
     356:	97 a3       	std	Z+39, r25	; 0x27
											//Default delay value. Reference pre-calculated table up above for more information
	TCC4.CTRLB = TC45_WGMODE_NORMAL_gc;		//Configure the timer for Normal mode operation
     358:	11 82       	std	Z+1, r1	; 0x01
	TCC4.INTCTRLA = TC45_OVFINTLVL_LO_gc;	//Set a low priority overflow interrupt
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	86 83       	std	Z+6, r24	; 0x06

	//Configure the PWM sense module
	//Input capture described on (168)
	TCC5.CTRLA = TC45_CLKSEL_DIV64_gc;		//Configure a 64 prescaler (will count ~10,000 in 20mS)
     35e:	e0 e4       	ldi	r30, 0x40	; 64
     360:	f8 e0       	ldi	r31, 0x08	; 8
     362:	85 e0       	ldi	r24, 0x05	; 5
     364:	80 83       	st	Z, r24
	TCC5.CTRLB = TC45_WGMODE_NORMAL_gc;		//Normal operation
     366:	11 82       	std	Z+1, r1	; 0x01
	TCC5.PER   = 12000;						//This is set to be 20% longer than the 20mS cycle should be
     368:	20 ee       	ldi	r18, 0xE0	; 224
     36a:	3e e2       	ldi	r19, 0x2E	; 46
     36c:	26 a3       	std	Z+38, r18	; 0x26
     36e:	37 a3       	std	Z+39, r19	; 0x27
	
	//Is the following necessary?
	TCC5.INTCTRLA = TC45_OVFINTLVL_MED_gc;	//Set a medium priority overflow interrupt (we want the PWM generation to remain stable)
     370:	92 e0       	ldi	r25, 0x02	; 2
     372:	96 83       	std	Z+6, r25	; 0x06
											//as it will only take a few clock cycles compared to this interrupt
	
	//Configure the PWM generation module
	TCD5.CTRLA = TC45_CLKSEL_DIV64_gc;		//Configure a 64 prescaler (will count ~10,000 in 20mS)
     374:	e0 e4       	ldi	r30, 0x40	; 64
     376:	f9 e0       	ldi	r31, 0x09	; 9
     378:	80 83       	st	Z, r24
	TCD5.CTRLB = TC45_WGMODE_NORMAL_gc;		//Normal operation
     37a:	11 82       	std	Z+1, r1	; 0x01
	TCD5.PER   = 10000;						//We want to establish a 50Hz control loop here (20ms period)
     37c:	80 e1       	ldi	r24, 0x10	; 16
     37e:	97 e2       	ldi	r25, 0x27	; 39
     380:	86 a3       	std	Z+38, r24	; 0x26
     382:	97 a3       	std	Z+39, r25	; 0x27
	TCD5.INTCTRLA = TC45_OVFINTLVL_HI_gc;	//Set a high priority overflow interrupt
     384:	83 e0       	ldi	r24, 0x03	; 3
     386:	86 83       	std	Z+6, r24	; 0x06
	TCD5.INTCTRLB = TC45_CCAINTLVL_HI_gc;   
     388:	87 83       	std	Z+7, r24	; 0x07
	
	TCD5.CCA = 950;		//Initial value for compare
     38a:	86 eb       	ldi	r24, 0xB6	; 182
     38c:	93 e0       	ldi	r25, 0x03	; 3
     38e:	80 a7       	std	Z+40, r24	; 0x28
     390:	91 a7       	std	Z+41, r25	; 0x29
     392:	08 95       	ret

00000394 <__vector_18>:
}

//This triggers when a PWM signal hasn't been detected for the past ~24mS
ISR (TCC5_OVF_vect){
     394:	1f 92       	push	r1
     396:	0f 92       	push	r0
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	0f 92       	push	r0
     39c:	11 24       	eor	r1, r1
     39e:	8f 93       	push	r24
     3a0:	9f 93       	push	r25
     3a2:	ef 93       	push	r30
     3a4:	ff 93       	push	r31
	TCC5.INTFLAGS |= 0b1;  //Reset interrupt flag
     3a6:	e0 e4       	ldi	r30, 0x40	; 64
     3a8:	f8 e0       	ldi	r31, 0x08	; 8
     3aa:	84 85       	ldd	r24, Z+12	; 0x0c
     3ac:	81 60       	ori	r24, 0x01	; 1
     3ae:	84 87       	std	Z+12, r24	; 0x0c
	
	PWMMeasuringStatus = NOT_MEASURING;		//Reset the "NOT MEASURING" flag
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <PWMMeasuringStatus>
	PORTD.PIN4CTRL = PORT_ISC_RISING_gc;	//Reconfigure the port to wait for a high pulse
     3b6:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <__TEXT_REGION_LENGTH__+0x700674>
	
	steeringPWMPeriod = 1500;				//Set the steering PWM period to a stable "standby position"
     3ba:	8c ed       	ldi	r24, 0xDC	; 220
     3bc:	95 e0       	ldi	r25, 0x05	; 5
     3be:	80 93 13 21 	sts	0x2113, r24	; 0x802113 <steeringPWMPeriod>
     3c2:	90 93 14 21 	sts	0x2114, r25	; 0x802114 <steeringPWMPeriod+0x1>
}
     3c6:	ff 91       	pop	r31
     3c8:	ef 91       	pop	r30
     3ca:	9f 91       	pop	r25
     3cc:	8f 91       	pop	r24
     3ce:	0f 90       	pop	r0
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	0f 90       	pop	r0
     3d4:	1f 90       	pop	r1
     3d6:	18 95       	reti

000003d8 <__vector_38>:
/*
Compare vector A for the PWM generation module
This situation ------\______

*/
ISR (TCD5_CCA_vect){
     3d8:	1f 92       	push	r1
     3da:	0f 92       	push	r0
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	0f 92       	push	r0
     3e0:	11 24       	eor	r1, r1
     3e2:	8f 93       	push	r24
	STEER_SIG_CLR();
     3e4:	80 e2       	ldi	r24, 0x20	; 32
     3e6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	//STATUS_SET();
}
     3ea:	8f 91       	pop	r24
     3ec:	0f 90       	pop	r0
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	0f 90       	pop	r0
     3f2:	1f 90       	pop	r1
     3f4:	18 95       	reti

000003f6 <__vector_36>:
This situation: _____/-----

*/


ISR (TCD5_OVF_vect){
     3f6:	1f 92       	push	r1
     3f8:	0f 92       	push	r0
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	0f 92       	push	r0
     3fe:	11 24       	eor	r1, r1
     400:	8f 93       	push	r24
     402:	ef 93       	push	r30
     404:	ff 93       	push	r31
	STEER_SIG_SET();
     406:	80 e2       	ldi	r24, 0x20	; 32
     408:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	
	TCD5.INTFLAGS |= 0b1;
     40c:	e0 e4       	ldi	r30, 0x40	; 64
     40e:	f9 e0       	ldi	r31, 0x09	; 9
     410:	84 85       	ldd	r24, Z+12	; 0x0c
     412:	81 60       	ori	r24, 0x01	; 1
     414:	84 87       	std	Z+12, r24	; 0x0c
	
	TCD5.CNT = 0;
     416:	10 a2       	std	Z+32, r1	; 0x20
     418:	11 a2       	std	Z+33, r1	; 0x21
}
     41a:	ff 91       	pop	r31
     41c:	ef 91       	pop	r30
     41e:	8f 91       	pop	r24
     420:	0f 90       	pop	r0
     422:	0f be       	out	0x3f, r0	; 63
     424:	0f 90       	pop	r0
     426:	1f 90       	pop	r1
     428:	18 95       	reti

0000042a <__vector_12>:

//Handles compare vector for T/C 4
ISR (TCC4_OVF_vect){
     42a:	1f 92       	push	r1
     42c:	0f 92       	push	r0
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	0f 92       	push	r0
     432:	11 24       	eor	r1, r1
     434:	2f 93       	push	r18
     436:	3f 93       	push	r19
     438:	4f 93       	push	r20
     43a:	5f 93       	push	r21
     43c:	6f 93       	push	r22
     43e:	7f 93       	push	r23
     440:	8f 93       	push	r24
     442:	9f 93       	push	r25
     444:	af 93       	push	r26
     446:	ef 93       	push	r30
     448:	ff 93       	push	r31
	++longCounter;
     44a:	20 91 15 21 	lds	r18, 0x2115	; 0x802115 <longCounter>
     44e:	30 91 16 21 	lds	r19, 0x2116	; 0x802116 <longCounter+0x1>
     452:	40 91 17 21 	lds	r20, 0x2117	; 0x802117 <longCounter+0x2>
     456:	50 91 18 21 	lds	r21, 0x2118	; 0x802118 <longCounter+0x3>
     45a:	60 91 19 21 	lds	r22, 0x2119	; 0x802119 <longCounter+0x4>
     45e:	70 91 1a 21 	lds	r23, 0x211A	; 0x80211a <longCounter+0x5>
     462:	80 91 1b 21 	lds	r24, 0x211B	; 0x80211b <longCounter+0x6>
     466:	90 91 1c 21 	lds	r25, 0x211C	; 0x80211c <longCounter+0x7>
     46a:	a1 e0       	ldi	r26, 0x01	; 1
     46c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__adddi3_s8>
     470:	20 93 15 21 	sts	0x2115, r18	; 0x802115 <longCounter>
     474:	30 93 16 21 	sts	0x2116, r19	; 0x802116 <longCounter+0x1>
     478:	40 93 17 21 	sts	0x2117, r20	; 0x802117 <longCounter+0x2>
     47c:	50 93 18 21 	sts	0x2118, r21	; 0x802118 <longCounter+0x3>
     480:	60 93 19 21 	sts	0x2119, r22	; 0x802119 <longCounter+0x4>
     484:	70 93 1a 21 	sts	0x211A, r23	; 0x80211a <longCounter+0x5>
     488:	80 93 1b 21 	sts	0x211B, r24	; 0x80211b <longCounter+0x6>
     48c:	90 93 1c 21 	sts	0x211C, r25	; 0x80211c <longCounter+0x7>
	
	TCC4.INTFLAGS |= 0b1;  //Reset overflow interrupt
     490:	e0 e0       	ldi	r30, 0x00	; 0
     492:	f8 e0       	ldi	r31, 0x08	; 8
     494:	84 85       	ldd	r24, Z+12	; 0x0c
     496:	81 60       	ori	r24, 0x01	; 1
     498:	84 87       	std	Z+12, r24	; 0x0c
	
	broadcastStatus = 1;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	80 93 1d 21 	sts	0x211D, r24	; 0x80211d <broadcastStatus>
}
     4a0:	ff 91       	pop	r31
     4a2:	ef 91       	pop	r30
     4a4:	af 91       	pop	r26
     4a6:	9f 91       	pop	r25
     4a8:	8f 91       	pop	r24
     4aa:	7f 91       	pop	r23
     4ac:	6f 91       	pop	r22
     4ae:	5f 91       	pop	r21
     4b0:	4f 91       	pop	r20
     4b2:	3f 91       	pop	r19
     4b4:	2f 91       	pop	r18
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <_Z12configureRTCv>:

/*
The real time clock is configured to handle XTend RSSI Interpret
*/
void configureRTC(){
	RTC.CTRL = RTC_CORREN_bm | RTC_PRESCALER_DIV1_gc;		//Enable the RTC correction process, and the RTC itself with no prescaler
     4c0:	e0 e0       	ldi	r30, 0x00	; 0
     4c2:	f4 e0       	ldi	r31, 0x04	; 4
     4c4:	89 e0       	ldi	r24, 0x09	; 9
     4c6:	80 83       	st	Z, r24
	RTC.INTCTRL = RTC_COMPINTLVL_LO_gc | RTC_OVFINTLVL_LO_gc; //Enable the overflow and 
     4c8:	85 e0       	ldi	r24, 0x05	; 5
     4ca:	82 83       	std	Z+2, r24	; 0x02
	
    OSC.CTRL |= OSC_RC32KEN_bm;								//Enable the 32.768kHz internal oscillator
     4cc:	a0 e5       	ldi	r26, 0x50	; 80
     4ce:	b0 e0       	ldi	r27, 0x00	; 0
     4d0:	8c 91       	ld	r24, X
     4d2:	84 60       	ori	r24, 0x04	; 4
     4d4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d6:	8f e7       	ldi	r24, 0x7F	; 127
     4d8:	9c e0       	ldi	r25, 0x0C	; 12
     4da:	01 97       	sbiw	r24, 0x01	; 1
     4dc:	f1 f7       	brne	.-4      	; 0x4da <_Z12configureRTCv+0x1a>
     4de:	00 c0       	rjmp	.+0      	; 0x4e0 <_Z12configureRTCv+0x20>
     4e0:	00 00       	nop
	
	_delay_us(400);											//Wait for the oscillator to stabalize.
	
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC32_gc;					//Set the RTC input as the 32.768kHz internal oscillator
     4e2:	a0 e4       	ldi	r26, 0x40	; 64
     4e4:	b0 e0       	ldi	r27, 0x00	; 0
     4e6:	8c e0       	ldi	r24, 0x0C	; 12
     4e8:	13 96       	adiw	r26, 0x03	; 3
     4ea:	8c 93       	st	X, r24
     4ec:	13 97       	sbiw	r26, 0x03	; 3
	CLK.RTCCTRL |= CLK_RTCEN_bm;							//Enable the clock input
     4ee:	13 96       	adiw	r26, 0x03	; 3
     4f0:	8c 91       	ld	r24, X
     4f2:	13 97       	sbiw	r26, 0x03	; 3
     4f4:	81 60       	ori	r24, 0x01	; 1
     4f6:	13 96       	adiw	r26, 0x03	; 3
     4f8:	8c 93       	st	X, r24
	
	//Testing setup code
	RTC.COMP = 16384; //~1 second? Assuming 32.768 KHz
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	90 e4       	ldi	r25, 0x40	; 64
     4fe:	84 87       	std	Z+12, r24	; 0x0c
     500:	95 87       	std	Z+13, r25	; 0x0d
	RTC.PER = 0xFF00;  //No tengo nuguien idea
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	9f ef       	ldi	r25, 0xFF	; 255
     506:	82 87       	std	Z+10, r24	; 0x0a
     508:	93 87       	std	Z+11, r25	; 0x0b
     50a:	08 95       	ret

0000050c <__vector_7>:

}

ISR(RTC_OVF_vect){
     50c:	1f 92       	push	r1
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
     514:	11 24       	eor	r1, r1
	
}
     516:	0f 90       	pop	r0
     518:	0f be       	out	0x3f, r0	; 63
     51a:	0f 90       	pop	r0
     51c:	1f 90       	pop	r1
     51e:	18 95       	reti

00000520 <__vector_8>:

ISR(RTC_COMP_vect){
     520:	1f 92       	push	r1
     522:	0f 92       	push	r0
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	0f 92       	push	r0
     528:	11 24       	eor	r1, r1
     52a:	8f 93       	push	r24
     52c:	ef 93       	push	r30
     52e:	ff 93       	push	r31
	
	RTC.CNT = 0;
     530:	e0 e0       	ldi	r30, 0x00	; 0
     532:	f4 e0       	ldi	r31, 0x04	; 4
     534:	10 86       	std	Z+8, r1	; 0x08
     536:	11 86       	std	Z+9, r1	; 0x09
	RTC.INTFLAGS = 0x02;
     538:	82 e0       	ldi	r24, 0x02	; 2
     53a:	83 83       	std	Z+3, r24	; 0x03
	
	RSSI.countDifference = 0;
     53c:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <RSSI+0x4>
     540:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <RSSI+0x5>
}
     544:	ff 91       	pop	r31
     546:	ef 91       	pop	r30
     548:	8f 91       	pop	r24
     54a:	0f 90       	pop	r0
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	0f 90       	pop	r0
     550:	1f 90       	pop	r1
     552:	18 95       	reti

00000554 <_Z12configureXCLv>:

void configureXCL(){
     554:	08 95       	ret

00000556 <_Z19ReadCalibrationByteh>:
/* Read NVM signature. From http://www.avrfreaks.net/forum/xmega-production-signature-row */
uint8_t ReadCalibrationByte( uint8_t index ){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     556:	aa ec       	ldi	r26, 0xCA	; 202
     558:	b1 e0       	ldi	r27, 0x01	; 1
     55a:	92 e0       	ldi	r25, 0x02	; 2
     55c:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     55e:	e8 2f       	mov	r30, r24
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     564:	1c 92       	st	X, r1

	return( result );
}
     566:	08 95       	ret

00000568 <_Z13configureADCsv>:

#include "config.h"

extern RSSI_type RSSI;

void configureADCs(){
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
	// Batt Input Voltage
	// Halve Input
	//Set to single ended input
	//Set to 12-bit mode
		
	ADCA.CTRLB = (ADC_RESOLUTION_MT12BIT_gc | ADC_CONMODE_bm);	//Sets resolution to 12 bit and sets conversion mode to signed
     56c:	c0 e0       	ldi	r28, 0x00	; 0
     56e:	d2 e0       	ldi	r29, 0x02	; 2
     570:	82 e1       	ldi	r24, 0x12	; 18
     572:	89 83       	std	Y+1, r24	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;                              //Reference the "rail splitter" 2.5v reference
     574:	80 e2       	ldi	r24, 0x20	; 32
     576:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.EVCTRL = 0; //Disable events
     578:	1b 82       	std	Y+3, r1	; 0x03
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
     57a:	87 e0       	ldi	r24, 0x07	; 7
     57c:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));
     57e:	80 e2       	ldi	r24, 0x20	; 32
     580:	0e 94 ab 02 	call	0x556	; 0x556 <_Z19ReadCalibrationByteh>
     584:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));
     586:	81 e2       	ldi	r24, 0x21	; 33
     588:	0e 94 ab 02 	call	0x556	; 0x556 <_Z19ReadCalibrationByteh>
     58c:	8d 87       	std	Y+13, r24	; 0x0d
     58e:	8f e7       	ldi	r24, 0x7F	; 127
     590:	9c e0       	ldi	r25, 0x0C	; 12
     592:	01 97       	sbiw	r24, 0x01	; 1
     594:	f1 f7       	brne	.-4      	; 0x592 <_Z13configureADCsv+0x2a>
     596:	00 c0       	rjmp	.+0      	; 0x598 <_Z13configureADCsv+0x30>
     598:	00 00       	nop
	_delay_us(400);
	//ADCA.CH0.AVGCTRL = ADC_SAMPNUM_256X_gc;
	ADCA.CH0.CTRL = (ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAINL_gc);
     59a:	82 e0       	ldi	r24, 0x02	; 2
     59c:	88 a3       	std	Y+32, r24	; 0x20
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEGL_PIN1_gc);  //Init the ADC MUX to use the PIN8 input
     59e:	81 e4       	ldi	r24, 0x41	; 65
     5a0:	89 a3       	std	Y+33, r24	; 0x21
																	 //and set the negative input to the GND
																     //reference on PORTA PIN1
	ADCA.CH0.INTCTRL = 0; // Set COMPLETE interrupts
     5a2:	1a a2       	std	Y+34, r1	; 0x22
	ADCA.CTRLA = ADC_ENABLE_bm;
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	88 83       	st	Y, r24
	//_delay_ms(1);
	//ADCA.CH0.CTRL = ADC_CH_START_bm;
	//
	//ADCA.CTRLA |= ADC_CH8START_bm;
	*/	
}	
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	08 95       	ret

000005ae <_Z17ReadSignatureBytej>:
	return( result );
}

uint8_t ReadSignatureByte(uint16_t Address)
{
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     5ae:	aa ec       	ldi	r26, 0xCA	; 202
     5b0:	b1 e0       	ldi	r27, 0x01	; 1
     5b2:	22 e0       	ldi	r18, 0x02	; 2
     5b4:	2c 93       	st	X, r18
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
     5b6:	fc 01       	movw	r30, r24
     5b8:	84 91       	lpm	r24, Z
	//  __asm__ ("lpm \n  mov %0, r0 \n" : "=r" (Result) : "z" (Address) : "r0");
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     5ba:	1c 92       	st	X, r1
	return Result;
}
     5bc:	08 95       	ret

000005be <_Z21configureSerialNumberv>:
/*

Note: This function requires serial and should be called after configureUSART()

*/
void configureSerialNumber(){
     5be:	2f 92       	push	r2
     5c0:	3f 92       	push	r3
     5c2:	4f 92       	push	r4
     5c4:	5f 92       	push	r5
     5c6:	6f 92       	push	r6
     5c8:	7f 92       	push	r7
     5ca:	8f 92       	push	r8
     5cc:	9f 92       	push	r9
     5ce:	af 92       	push	r10
     5d0:	bf 92       	push	r11
     5d2:	cf 92       	push	r12
     5d4:	df 92       	push	r13
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
	DeviceSignature[ 0] = ReadSignatureByte(LOTNUM0);
     5e2:	88 e0       	ldi	r24, 0x08	; 8
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Z17ReadSignatureBytej>
     5ea:	c8 e0       	ldi	r28, 0x08	; 8
     5ec:	d1 e2       	ldi	r29, 0x21	; 33
     5ee:	88 83       	st	Y, r24
	DeviceSignature[ 1] = ReadSignatureByte(LOTNUM1);
     5f0:	89 e0       	ldi	r24, 0x09	; 9
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Z17ReadSignatureBytej>
     5f8:	89 83       	std	Y+1, r24	; 0x01
	DeviceSignature[ 2] = ReadSignatureByte(LOTNUM2);
     5fa:	8a e0       	ldi	r24, 0x0A	; 10
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Z17ReadSignatureBytej>
     602:	8a 83       	std	Y+2, r24	; 0x02
	DeviceSignature[ 3] = ReadSignatureByte(LOTNUM3);
     604:	8b e0       	ldi	r24, 0x0B	; 11
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Z17ReadSignatureBytej>
     60c:	8b 83       	std	Y+3, r24	; 0x03
	DeviceSignature[ 4] = ReadSignatureByte(LOTNUM4);
     60e:	8c e0       	ldi	r24, 0x0C	; 12
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Z17ReadSignatureBytej>
     616:	8c 83       	std	Y+4, r24	; 0x04
	DeviceSignature[ 5] = ReadSignatureByte(LOTNUM5);
     618:	8d e0       	ldi	r24, 0x0D	; 13
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Z17ReadSignatureBytej>
     620:	8d 83       	std	Y+5, r24	; 0x05
	DeviceSignature[ 6] = ReadSignatureByte(WAFNUM );
     622:	80 e1       	ldi	r24, 0x10	; 16
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Z17ReadSignatureBytej>
     62a:	8e 83       	std	Y+6, r24	; 0x06
	DeviceSignature[ 7] = ReadSignatureByte(COORDX0);
     62c:	82 e1       	ldi	r24, 0x12	; 18
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Z17ReadSignatureBytej>
     634:	8f 83       	std	Y+7, r24	; 0x07
	DeviceSignature[ 8] = ReadSignatureByte(COORDX1);
     636:	83 e1       	ldi	r24, 0x13	; 19
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Z17ReadSignatureBytej>
     63e:	88 87       	std	Y+8, r24	; 0x08
	DeviceSignature[ 9] = ReadSignatureByte(COORDY0);
     640:	84 e1       	ldi	r24, 0x14	; 20
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Z17ReadSignatureBytej>
     648:	89 87       	std	Y+9, r24	; 0x09
	DeviceSignature[10] = ReadSignatureByte(COORDY1);
     64a:	85 e1       	ldi	r24, 0x15	; 21
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Z17ReadSignatureBytej>
     652:	8a 87       	std	Y+10, r24	; 0x0a
	
	UC_LOT_NUMBER = DeviceSignature[0];
     654:	28 80       	ld	r2, Y
     656:	31 2c       	mov	r3, r1
     658:	41 2c       	mov	r4, r1
     65a:	51 2c       	mov	r5, r1
     65c:	61 2c       	mov	r6, r1
     65e:	71 2c       	mov	r7, r1
     660:	43 01       	movw	r8, r6
     662:	a9 e0       	ldi	r26, 0x09	; 9
     664:	b1 e2       	ldi	r27, 0x21	; 33
     666:	e4 e6       	ldi	r30, 0x64	; 100
     668:	f0 e0       	ldi	r31, 0x00	; 0
	
	for(int i = 1; i < 6; ++i){
		UC_LOT_NUMBER += DeviceSignature[i] * (100*i);//(DeviceSignature[i] << i*8);
     66a:	8d 91       	ld	r24, X+
     66c:	8e 9f       	mul	r24, r30
     66e:	e0 01       	movw	r28, r0
     670:	8f 9f       	mul	r24, r31
     672:	d0 0d       	add	r29, r0
     674:	11 24       	eor	r1, r1
     676:	1d 2f       	mov	r17, r29
     678:	11 0f       	add	r17, r17
     67a:	11 0b       	sbc	r17, r17
     67c:	22 2d       	mov	r18, r2
     67e:	33 2d       	mov	r19, r3
     680:	44 2d       	mov	r20, r4
     682:	55 2d       	mov	r21, r5
     684:	66 2d       	mov	r22, r6
     686:	77 2d       	mov	r23, r7
     688:	88 2d       	mov	r24, r8
     68a:	99 2d       	mov	r25, r9
     68c:	ac 2e       	mov	r10, r28
     68e:	bd 2e       	mov	r11, r29
     690:	c1 2e       	mov	r12, r17
     692:	d1 2e       	mov	r13, r17
     694:	e1 2e       	mov	r14, r17
     696:	f1 2e       	mov	r15, r17
     698:	01 2f       	mov	r16, r17
     69a:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__adddi3>
     69e:	22 2e       	mov	r2, r18
     6a0:	33 2e       	mov	r3, r19
     6a2:	44 2e       	mov	r4, r20
     6a4:	55 2e       	mov	r5, r21
     6a6:	66 2e       	mov	r6, r22
     6a8:	77 2e       	mov	r7, r23
     6aa:	88 2e       	mov	r8, r24
     6ac:	99 2e       	mov	r9, r25
     6ae:	ec 59       	subi	r30, 0x9C	; 156
     6b0:	ff 4f       	sbci	r31, 0xFF	; 255
	DeviceSignature[ 9] = ReadSignatureByte(COORDY0);
	DeviceSignature[10] = ReadSignatureByte(COORDY1);
	
	UC_LOT_NUMBER = DeviceSignature[0];
	
	for(int i = 1; i < 6; ++i){
     6b2:	e8 35       	cpi	r30, 0x58	; 88
     6b4:	82 e0       	ldi	r24, 0x02	; 2
     6b6:	f8 07       	cpc	r31, r24
     6b8:	c1 f6       	brne	.-80     	; 0x66a <_Z21configureSerialNumberv+0xac>
     6ba:	20 92 00 21 	sts	0x2100, r2	; 0x802100 <UC_LOT_NUMBER>
     6be:	30 92 01 21 	sts	0x2101, r3	; 0x802101 <UC_LOT_NUMBER+0x1>
     6c2:	40 92 02 21 	sts	0x2102, r4	; 0x802102 <UC_LOT_NUMBER+0x2>
     6c6:	50 92 03 21 	sts	0x2103, r5	; 0x802103 <UC_LOT_NUMBER+0x3>
     6ca:	60 92 04 21 	sts	0x2104, r6	; 0x802104 <UC_LOT_NUMBER+0x4>
     6ce:	70 92 05 21 	sts	0x2105, r7	; 0x802105 <UC_LOT_NUMBER+0x5>
     6d2:	80 92 06 21 	sts	0x2106, r8	; 0x802106 <UC_LOT_NUMBER+0x6>
     6d6:	90 92 07 21 	sts	0x2107, r9	; 0x802107 <UC_LOT_NUMBER+0x7>
		UC_LOT_NUMBER += DeviceSignature[i] * (100*i);//(DeviceSignature[i] << i*8);
	}
	
	UC_WAFER_ID = DeviceSignature[6];
     6da:	e8 e0       	ldi	r30, 0x08	; 8
     6dc:	f1 e2       	ldi	r31, 0x21	; 33
     6de:	26 81       	ldd	r18, Z+6	; 0x06
	
	for(int i = 1; i < 4; ++i){  //Original stops at 5
		UC_WAFER_ID += DeviceSignature[i+6] * (100*i);
     6e0:	a7 81       	ldd	r26, Z+7	; 0x07
     6e2:	c4 e6       	ldi	r28, 0x64	; 100
     6e4:	ac 9f       	mul	r26, r28
     6e6:	d0 01       	movw	r26, r0
     6e8:	11 24       	eor	r1, r1
     6ea:	1b 2f       	mov	r17, r27
     6ec:	11 0f       	add	r17, r17
     6ee:	11 0b       	sbc	r17, r17
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	40 e0       	ldi	r20, 0x00	; 0
     6f4:	50 e0       	ldi	r21, 0x00	; 0
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	aa 2e       	mov	r10, r26
     700:	bb 2e       	mov	r11, r27
     702:	c1 2e       	mov	r12, r17
     704:	d1 2e       	mov	r13, r17
     706:	e1 2e       	mov	r14, r17
     708:	f1 2e       	mov	r15, r17
     70a:	01 2f       	mov	r16, r17
     70c:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__adddi3>
     710:	a0 85       	ldd	r26, Z+8	; 0x08
     712:	c8 ec       	ldi	r28, 0xC8	; 200
     714:	ac 9f       	mul	r26, r28
     716:	d0 01       	movw	r26, r0
     718:	11 24       	eor	r1, r1
     71a:	1b 2f       	mov	r17, r27
     71c:	11 0f       	add	r17, r17
     71e:	11 0b       	sbc	r17, r17
     720:	aa 2e       	mov	r10, r26
     722:	bb 2e       	mov	r11, r27
     724:	c1 2e       	mov	r12, r17
     726:	d1 2e       	mov	r13, r17
     728:	e1 2e       	mov	r14, r17
     72a:	f1 2e       	mov	r15, r17
     72c:	01 2f       	mov	r16, r17
     72e:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__adddi3>
     732:	c1 85       	ldd	r28, Z+9	; 0x09
     734:	ac e2       	ldi	r26, 0x2C	; 44
     736:	b1 e0       	ldi	r27, 0x01	; 1
     738:	ca 9f       	mul	r28, r26
     73a:	f0 01       	movw	r30, r0
     73c:	cb 9f       	mul	r28, r27
     73e:	f0 0d       	add	r31, r0
     740:	11 24       	eor	r1, r1
     742:	1f 2f       	mov	r17, r31
     744:	11 0f       	add	r17, r17
     746:	11 0b       	sbc	r17, r17
     748:	ae 2e       	mov	r10, r30
     74a:	bf 2e       	mov	r11, r31
     74c:	c1 2e       	mov	r12, r17
     74e:	d1 2e       	mov	r13, r17
     750:	e1 2e       	mov	r14, r17
     752:	f1 2e       	mov	r15, r17
     754:	01 2f       	mov	r16, r17
     756:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__adddi3>
     75a:	20 93 f8 20 	sts	0x20F8, r18	; 0x8020f8 <UC_WAFER_ID>
     75e:	30 93 f9 20 	sts	0x20F9, r19	; 0x8020f9 <UC_WAFER_ID+0x1>
     762:	40 93 fa 20 	sts	0x20FA, r20	; 0x8020fa <UC_WAFER_ID+0x2>
     766:	50 93 fb 20 	sts	0x20FB, r21	; 0x8020fb <UC_WAFER_ID+0x3>
     76a:	60 93 fc 20 	sts	0x20FC, r22	; 0x8020fc <UC_WAFER_ID+0x4>
     76e:	70 93 fd 20 	sts	0x20FD, r23	; 0x8020fd <UC_WAFER_ID+0x5>
     772:	80 93 fe 20 	sts	0x20FE, r24	; 0x8020fe <UC_WAFER_ID+0x6>
     776:	90 93 ff 20 	sts	0x20FF, r25	; 0x8020ff <UC_WAFER_ID+0x7>
	}
	
	serialNumber = -1; //Set the default serial number to -1 ("Not assigned yet")
     77a:	8f ef       	ldi	r24, 0xFF	; 255
     77c:	9f ef       	ldi	r25, 0xFF	; 255
     77e:	80 93 f6 20 	sts	0x20F6, r24	; 0x8020f6 <__data_end>
     782:	90 93 f7 20 	sts	0x20F7, r25	; 0x8020f7 <__data_end+0x1>
	
	//Hardcoded serial number lookups (don't judge)
	if(UC_LOT_NUMBER == 0x13E91 && UC_WAFER_ID == 0x3913)
     786:	22 2d       	mov	r18, r2
     788:	33 2d       	mov	r19, r3
     78a:	44 2d       	mov	r20, r4
     78c:	55 2d       	mov	r21, r5
     78e:	66 2d       	mov	r22, r6
     790:	77 2d       	mov	r23, r7
     792:	88 2d       	mov	r24, r8
     794:	99 2d       	mov	r25, r9
     796:	21 39       	cpi	r18, 0x91	; 145
     798:	3e 43       	sbci	r19, 0x3E	; 62
     79a:	41 40       	sbci	r20, 0x01	; 1
     79c:	51 05       	cpc	r21, r1
     79e:	61 05       	cpc	r22, r1
     7a0:	71 05       	cpc	r23, r1
     7a2:	81 05       	cpc	r24, r1
     7a4:	91 05       	cpc	r25, r1
     7a6:	41 f5       	brne	.+80     	; 0x7f8 <_Z21configureSerialNumberv+0x23a>
     7a8:	20 91 f8 20 	lds	r18, 0x20F8	; 0x8020f8 <UC_WAFER_ID>
     7ac:	30 91 f9 20 	lds	r19, 0x20F9	; 0x8020f9 <UC_WAFER_ID+0x1>
     7b0:	40 91 fa 20 	lds	r20, 0x20FA	; 0x8020fa <UC_WAFER_ID+0x2>
     7b4:	50 91 fb 20 	lds	r21, 0x20FB	; 0x8020fb <UC_WAFER_ID+0x3>
     7b8:	60 91 fc 20 	lds	r22, 0x20FC	; 0x8020fc <UC_WAFER_ID+0x4>
     7bc:	70 91 fd 20 	lds	r23, 0x20FD	; 0x8020fd <UC_WAFER_ID+0x5>
     7c0:	80 91 fe 20 	lds	r24, 0x20FE	; 0x8020fe <UC_WAFER_ID+0x6>
     7c4:	90 91 ff 20 	lds	r25, 0x20FF	; 0x8020ff <UC_WAFER_ID+0x7>
     7c8:	23 31       	cpi	r18, 0x13	; 19
     7ca:	39 43       	sbci	r19, 0x39	; 57
     7cc:	41 05       	cpc	r20, r1
     7ce:	51 05       	cpc	r21, r1
     7d0:	61 05       	cpc	r22, r1
     7d2:	71 05       	cpc	r23, r1
     7d4:	81 05       	cpc	r24, r1
     7d6:	91 05       	cpc	r25, r1
     7d8:	09 f0       	breq	.+2      	; 0x7dc <_Z21configureSerialNumberv+0x21e>
     7da:	72 c0       	rjmp	.+228    	; 0x8c0 <_Z21configureSerialNumberv+0x302>
		serialNumber = 1;
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	80 93 f6 20 	sts	0x20F6, r24	; 0x8020f6 <__data_end>
     7e4:	90 93 f7 20 	sts	0x20F7, r25	; 0x8020f7 <__data_end+0x1>
     7e8:	6b c0       	rjmp	.+214    	; 0x8c0 <_Z21configureSerialNumberv+0x302>
	if(UC_LOT_NUMBER == 0x13e91 && UC_WAFER_ID == 0x3337)
		serialNumber = 2;
     7ea:	82 e0       	ldi	r24, 0x02	; 2
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	80 93 f6 20 	sts	0x20F6, r24	; 0x8020f6 <__data_end>
     7f2:	90 93 f7 20 	sts	0x20F7, r25	; 0x8020f7 <__data_end+0x1>
     7f6:	35 c1       	rjmp	.+618    	; 0xa62 <_Z21configureSerialNumberv+0x4a4>
	if(UC_LOT_NUMBER == 0x13919 && UC_WAFER_ID == 0x1586)
     7f8:	22 2d       	mov	r18, r2
     7fa:	33 2d       	mov	r19, r3
     7fc:	44 2d       	mov	r20, r4
     7fe:	55 2d       	mov	r21, r5
     800:	66 2d       	mov	r22, r6
     802:	77 2d       	mov	r23, r7
     804:	88 2d       	mov	r24, r8
     806:	99 2d       	mov	r25, r9
     808:	29 31       	cpi	r18, 0x19	; 25
     80a:	39 43       	sbci	r19, 0x39	; 57
     80c:	41 40       	sbci	r20, 0x01	; 1
     80e:	51 05       	cpc	r21, r1
     810:	61 05       	cpc	r22, r1
     812:	71 05       	cpc	r23, r1
     814:	81 05       	cpc	r24, r1
     816:	91 05       	cpc	r25, r1
     818:	09 f0       	breq	.+2      	; 0x81c <_Z21configureSerialNumberv+0x25e>
     81a:	23 c1       	rjmp	.+582    	; 0xa62 <_Z21configureSerialNumberv+0x4a4>
     81c:	20 91 f8 20 	lds	r18, 0x20F8	; 0x8020f8 <UC_WAFER_ID>
     820:	30 91 f9 20 	lds	r19, 0x20F9	; 0x8020f9 <UC_WAFER_ID+0x1>
     824:	40 91 fa 20 	lds	r20, 0x20FA	; 0x8020fa <UC_WAFER_ID+0x2>
     828:	50 91 fb 20 	lds	r21, 0x20FB	; 0x8020fb <UC_WAFER_ID+0x3>
     82c:	60 91 fc 20 	lds	r22, 0x20FC	; 0x8020fc <UC_WAFER_ID+0x4>
     830:	70 91 fd 20 	lds	r23, 0x20FD	; 0x8020fd <UC_WAFER_ID+0x5>
     834:	80 91 fe 20 	lds	r24, 0x20FE	; 0x8020fe <UC_WAFER_ID+0x6>
     838:	90 91 ff 20 	lds	r25, 0x20FF	; 0x8020ff <UC_WAFER_ID+0x7>
     83c:	26 38       	cpi	r18, 0x86	; 134
     83e:	35 41       	sbci	r19, 0x15	; 21
     840:	41 05       	cpc	r20, r1
     842:	51 05       	cpc	r21, r1
     844:	61 05       	cpc	r22, r1
     846:	71 05       	cpc	r23, r1
     848:	81 05       	cpc	r24, r1
     84a:	91 05       	cpc	r25, r1
     84c:	09 f0       	breq	.+2      	; 0x850 <_Z21configureSerialNumberv+0x292>
     84e:	53 c0       	rjmp	.+166    	; 0x8f6 <_Z21configureSerialNumberv+0x338>
		serialNumber = 3;
     850:	83 e0       	ldi	r24, 0x03	; 3
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	80 93 f6 20 	sts	0x20F6, r24	; 0x8020f6 <__data_end>
     858:	90 93 f7 20 	sts	0x20F7, r25	; 0x8020f7 <__data_end+0x1>
     85c:	4c c0       	rjmp	.+152    	; 0x8f6 <_Z21configureSerialNumberv+0x338>
	if(UC_LOT_NUMBER == 0x13919 && UC_WAFER_ID == 0x10d6)
		serialNumber = 4;
     85e:	84 e0       	ldi	r24, 0x04	; 4
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	80 93 f6 20 	sts	0x20F6, r24	; 0x8020f6 <__data_end>
     866:	90 93 f7 20 	sts	0x20F7, r25	; 0x8020f7 <__data_end+0x1>
     86a:	5f c0       	rjmp	.+190    	; 0x92a <_Z21configureSerialNumberv+0x36c>
	if(UC_LOT_NUMBER == 0x13919 && UC_WAFER_ID == 0x2cf3)
		serialNumber = 5;
     86c:	85 e0       	ldi	r24, 0x05	; 5
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	80 93 f6 20 	sts	0x20F6, r24	; 0x8020f6 <__data_end>
     874:	90 93 f7 20 	sts	0x20F7, r25	; 0x8020f7 <__data_end+0x1>
     878:	72 c0       	rjmp	.+228    	; 0x95e <_Z21configureSerialNumberv+0x3a0>
	if(UC_LOT_NUMBER == 0x13919 && UC_WAFER_ID == 0x20da)
		serialNumber = 6;
     87a:	86 e0       	ldi	r24, 0x06	; 6
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	80 93 f6 20 	sts	0x20F6, r24	; 0x8020f6 <__data_end>
     882:	90 93 f7 20 	sts	0x20F7, r25	; 0x8020f7 <__data_end+0x1>
     886:	85 c0       	rjmp	.+266    	; 0x992 <_Z21configureSerialNumberv+0x3d4>
	if(UC_LOT_NUMBER == 0x13919 && UC_WAFER_ID == 0x1faf)
		serialNumber = 7;
     888:	87 e0       	ldi	r24, 0x07	; 7
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	80 93 f6 20 	sts	0x20F6, r24	; 0x8020f6 <__data_end>
     890:	90 93 f7 20 	sts	0x20F7, r25	; 0x8020f7 <__data_end+0x1>
     894:	98 c0       	rjmp	.+304    	; 0x9c6 <_Z21configureSerialNumberv+0x408>
	//Need to add 8
	if(UC_LOT_NUMBER == 0x13919 && UC_WAFER_ID == 0x2075)
		serialNumber = 9;
     896:	89 e0       	ldi	r24, 0x09	; 9
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	80 93 f6 20 	sts	0x20F6, r24	; 0x8020f6 <__data_end>
     89e:	90 93 f7 20 	sts	0x20F7, r25	; 0x8020f7 <__data_end+0x1>
     8a2:	ab c0       	rjmp	.+342    	; 0x9fa <_Z21configureSerialNumberv+0x43c>
	if(UC_LOT_NUMBER == 0x13919 && UC_WAFER_ID == 0x2A3A)
		serialNumber = 10;
     8a4:	8a e0       	ldi	r24, 0x0A	; 10
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	80 93 f6 20 	sts	0x20F6, r24	; 0x8020f6 <__data_end>
     8ac:	90 93 f7 20 	sts	0x20F7, r25	; 0x8020f7 <__data_end+0x1>
     8b0:	be c0       	rjmp	.+380    	; 0xa2e <_Z21configureSerialNumberv+0x470>
	if(UC_LOT_NUMBER == 0x13919 && UC_WAFER_ID == 0x21A1)
		serialNumber = 11;
     8b2:	8b e0       	ldi	r24, 0x0B	; 11
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	80 93 f6 20 	sts	0x20F6, r24	; 0x8020f6 <__data_end>
     8ba:	90 93 f7 20 	sts	0x20F7, r25	; 0x8020f7 <__data_end+0x1>
     8be:	d1 c0       	rjmp	.+418    	; 0xa62 <_Z21configureSerialNumberv+0x4a4>
	serialNumber = -1; //Set the default serial number to -1 ("Not assigned yet")
	
	//Hardcoded serial number lookups (don't judge)
	if(UC_LOT_NUMBER == 0x13E91 && UC_WAFER_ID == 0x3913)
		serialNumber = 1;
	if(UC_LOT_NUMBER == 0x13e91 && UC_WAFER_ID == 0x3337)
     8c0:	20 91 f8 20 	lds	r18, 0x20F8	; 0x8020f8 <UC_WAFER_ID>
     8c4:	30 91 f9 20 	lds	r19, 0x20F9	; 0x8020f9 <UC_WAFER_ID+0x1>
     8c8:	40 91 fa 20 	lds	r20, 0x20FA	; 0x8020fa <UC_WAFER_ID+0x2>
     8cc:	50 91 fb 20 	lds	r21, 0x20FB	; 0x8020fb <UC_WAFER_ID+0x3>
     8d0:	60 91 fc 20 	lds	r22, 0x20FC	; 0x8020fc <UC_WAFER_ID+0x4>
     8d4:	70 91 fd 20 	lds	r23, 0x20FD	; 0x8020fd <UC_WAFER_ID+0x5>
     8d8:	80 91 fe 20 	lds	r24, 0x20FE	; 0x8020fe <UC_WAFER_ID+0x6>
     8dc:	90 91 ff 20 	lds	r25, 0x20FF	; 0x8020ff <UC_WAFER_ID+0x7>
     8e0:	27 33       	cpi	r18, 0x37	; 55
     8e2:	33 43       	sbci	r19, 0x33	; 51
     8e4:	41 05       	cpc	r20, r1
     8e6:	51 05       	cpc	r21, r1
     8e8:	61 05       	cpc	r22, r1
     8ea:	71 05       	cpc	r23, r1
     8ec:	81 05       	cpc	r24, r1
     8ee:	91 05       	cpc	r25, r1
     8f0:	09 f0       	breq	.+2      	; 0x8f4 <_Z21configureSerialNumberv+0x336>
     8f2:	b7 c0       	rjmp	.+366    	; 0xa62 <_Z21configureSerialNumberv+0x4a4>
     8f4:	7a cf       	rjmp	.-268    	; 0x7ea <_Z21configureSerialNumberv+0x22c>
		serialNumber = 2;
	if(UC_LOT_NUMBER == 0x13919 && UC_WAFER_ID == 0x1586)
		serialNumber = 3;
	if(UC_LOT_NUMBER == 0x13919 && UC_WAFER_ID == 0x10d6)
     8f6:	20 91 f8 20 	lds	r18, 0x20F8	; 0x8020f8 <UC_WAFER_ID>
     8fa:	30 91 f9 20 	lds	r19, 0x20F9	; 0x8020f9 <UC_WAFER_ID+0x1>
     8fe:	40 91 fa 20 	lds	r20, 0x20FA	; 0x8020fa <UC_WAFER_ID+0x2>
     902:	50 91 fb 20 	lds	r21, 0x20FB	; 0x8020fb <UC_WAFER_ID+0x3>
     906:	60 91 fc 20 	lds	r22, 0x20FC	; 0x8020fc <UC_WAFER_ID+0x4>
     90a:	70 91 fd 20 	lds	r23, 0x20FD	; 0x8020fd <UC_WAFER_ID+0x5>
     90e:	80 91 fe 20 	lds	r24, 0x20FE	; 0x8020fe <UC_WAFER_ID+0x6>
     912:	90 91 ff 20 	lds	r25, 0x20FF	; 0x8020ff <UC_WAFER_ID+0x7>
     916:	26 3d       	cpi	r18, 0xD6	; 214
     918:	30 41       	sbci	r19, 0x10	; 16
     91a:	41 05       	cpc	r20, r1
     91c:	51 05       	cpc	r21, r1
     91e:	61 05       	cpc	r22, r1
     920:	71 05       	cpc	r23, r1
     922:	81 05       	cpc	r24, r1
     924:	91 05       	cpc	r25, r1
     926:	09 f4       	brne	.+2      	; 0x92a <_Z21configureSerialNumberv+0x36c>
     928:	9a cf       	rjmp	.-204    	; 0x85e <_Z21configureSerialNumberv+0x2a0>
		serialNumber = 4;
	if(UC_LOT_NUMBER == 0x13919 && UC_WAFER_ID == 0x2cf3)
     92a:	20 91 f8 20 	lds	r18, 0x20F8	; 0x8020f8 <UC_WAFER_ID>
     92e:	30 91 f9 20 	lds	r19, 0x20F9	; 0x8020f9 <UC_WAFER_ID+0x1>
     932:	40 91 fa 20 	lds	r20, 0x20FA	; 0x8020fa <UC_WAFER_ID+0x2>
     936:	50 91 fb 20 	lds	r21, 0x20FB	; 0x8020fb <UC_WAFER_ID+0x3>
     93a:	60 91 fc 20 	lds	r22, 0x20FC	; 0x8020fc <UC_WAFER_ID+0x4>
     93e:	70 91 fd 20 	lds	r23, 0x20FD	; 0x8020fd <UC_WAFER_ID+0x5>
     942:	80 91 fe 20 	lds	r24, 0x20FE	; 0x8020fe <UC_WAFER_ID+0x6>
     946:	90 91 ff 20 	lds	r25, 0x20FF	; 0x8020ff <UC_WAFER_ID+0x7>
     94a:	23 3f       	cpi	r18, 0xF3	; 243
     94c:	3c 42       	sbci	r19, 0x2C	; 44
     94e:	41 05       	cpc	r20, r1
     950:	51 05       	cpc	r21, r1
     952:	61 05       	cpc	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	09 f4       	brne	.+2      	; 0x95e <_Z21configureSerialNumberv+0x3a0>
     95c:	87 cf       	rjmp	.-242    	; 0x86c <_Z21configureSerialNumberv+0x2ae>
		serialNumber = 5;
	if(UC_LOT_NUMBER == 0x13919 && UC_WAFER_ID == 0x20da)
     95e:	20 91 f8 20 	lds	r18, 0x20F8	; 0x8020f8 <UC_WAFER_ID>
     962:	30 91 f9 20 	lds	r19, 0x20F9	; 0x8020f9 <UC_WAFER_ID+0x1>
     966:	40 91 fa 20 	lds	r20, 0x20FA	; 0x8020fa <UC_WAFER_ID+0x2>
     96a:	50 91 fb 20 	lds	r21, 0x20FB	; 0x8020fb <UC_WAFER_ID+0x3>
     96e:	60 91 fc 20 	lds	r22, 0x20FC	; 0x8020fc <UC_WAFER_ID+0x4>
     972:	70 91 fd 20 	lds	r23, 0x20FD	; 0x8020fd <UC_WAFER_ID+0x5>
     976:	80 91 fe 20 	lds	r24, 0x20FE	; 0x8020fe <UC_WAFER_ID+0x6>
     97a:	90 91 ff 20 	lds	r25, 0x20FF	; 0x8020ff <UC_WAFER_ID+0x7>
     97e:	2a 3d       	cpi	r18, 0xDA	; 218
     980:	30 42       	sbci	r19, 0x20	; 32
     982:	41 05       	cpc	r20, r1
     984:	51 05       	cpc	r21, r1
     986:	61 05       	cpc	r22, r1
     988:	71 05       	cpc	r23, r1
     98a:	81 05       	cpc	r24, r1
     98c:	91 05       	cpc	r25, r1
     98e:	09 f4       	brne	.+2      	; 0x992 <_Z21configureSerialNumberv+0x3d4>
     990:	74 cf       	rjmp	.-280    	; 0x87a <_Z21configureSerialNumberv+0x2bc>
		serialNumber = 6;
	if(UC_LOT_NUMBER == 0x13919 && UC_WAFER_ID == 0x1faf)
     992:	20 91 f8 20 	lds	r18, 0x20F8	; 0x8020f8 <UC_WAFER_ID>
     996:	30 91 f9 20 	lds	r19, 0x20F9	; 0x8020f9 <UC_WAFER_ID+0x1>
     99a:	40 91 fa 20 	lds	r20, 0x20FA	; 0x8020fa <UC_WAFER_ID+0x2>
     99e:	50 91 fb 20 	lds	r21, 0x20FB	; 0x8020fb <UC_WAFER_ID+0x3>
     9a2:	60 91 fc 20 	lds	r22, 0x20FC	; 0x8020fc <UC_WAFER_ID+0x4>
     9a6:	70 91 fd 20 	lds	r23, 0x20FD	; 0x8020fd <UC_WAFER_ID+0x5>
     9aa:	80 91 fe 20 	lds	r24, 0x20FE	; 0x8020fe <UC_WAFER_ID+0x6>
     9ae:	90 91 ff 20 	lds	r25, 0x20FF	; 0x8020ff <UC_WAFER_ID+0x7>
     9b2:	2f 3a       	cpi	r18, 0xAF	; 175
     9b4:	3f 41       	sbci	r19, 0x1F	; 31
     9b6:	41 05       	cpc	r20, r1
     9b8:	51 05       	cpc	r21, r1
     9ba:	61 05       	cpc	r22, r1
     9bc:	71 05       	cpc	r23, r1
     9be:	81 05       	cpc	r24, r1
     9c0:	91 05       	cpc	r25, r1
     9c2:	09 f4       	brne	.+2      	; 0x9c6 <_Z21configureSerialNumberv+0x408>
     9c4:	61 cf       	rjmp	.-318    	; 0x888 <_Z21configureSerialNumberv+0x2ca>
		serialNumber = 7;
	//Need to add 8
	if(UC_LOT_NUMBER == 0x13919 && UC_WAFER_ID == 0x2075)
     9c6:	20 91 f8 20 	lds	r18, 0x20F8	; 0x8020f8 <UC_WAFER_ID>
     9ca:	30 91 f9 20 	lds	r19, 0x20F9	; 0x8020f9 <UC_WAFER_ID+0x1>
     9ce:	40 91 fa 20 	lds	r20, 0x20FA	; 0x8020fa <UC_WAFER_ID+0x2>
     9d2:	50 91 fb 20 	lds	r21, 0x20FB	; 0x8020fb <UC_WAFER_ID+0x3>
     9d6:	60 91 fc 20 	lds	r22, 0x20FC	; 0x8020fc <UC_WAFER_ID+0x4>
     9da:	70 91 fd 20 	lds	r23, 0x20FD	; 0x8020fd <UC_WAFER_ID+0x5>
     9de:	80 91 fe 20 	lds	r24, 0x20FE	; 0x8020fe <UC_WAFER_ID+0x6>
     9e2:	90 91 ff 20 	lds	r25, 0x20FF	; 0x8020ff <UC_WAFER_ID+0x7>
     9e6:	25 37       	cpi	r18, 0x75	; 117
     9e8:	30 42       	sbci	r19, 0x20	; 32
     9ea:	41 05       	cpc	r20, r1
     9ec:	51 05       	cpc	r21, r1
     9ee:	61 05       	cpc	r22, r1
     9f0:	71 05       	cpc	r23, r1
     9f2:	81 05       	cpc	r24, r1
     9f4:	91 05       	cpc	r25, r1
     9f6:	09 f4       	brne	.+2      	; 0x9fa <_Z21configureSerialNumberv+0x43c>
     9f8:	4e cf       	rjmp	.-356    	; 0x896 <_Z21configureSerialNumberv+0x2d8>
		serialNumber = 9;
	if(UC_LOT_NUMBER == 0x13919 && UC_WAFER_ID == 0x2A3A)
     9fa:	20 91 f8 20 	lds	r18, 0x20F8	; 0x8020f8 <UC_WAFER_ID>
     9fe:	30 91 f9 20 	lds	r19, 0x20F9	; 0x8020f9 <UC_WAFER_ID+0x1>
     a02:	40 91 fa 20 	lds	r20, 0x20FA	; 0x8020fa <UC_WAFER_ID+0x2>
     a06:	50 91 fb 20 	lds	r21, 0x20FB	; 0x8020fb <UC_WAFER_ID+0x3>
     a0a:	60 91 fc 20 	lds	r22, 0x20FC	; 0x8020fc <UC_WAFER_ID+0x4>
     a0e:	70 91 fd 20 	lds	r23, 0x20FD	; 0x8020fd <UC_WAFER_ID+0x5>
     a12:	80 91 fe 20 	lds	r24, 0x20FE	; 0x8020fe <UC_WAFER_ID+0x6>
     a16:	90 91 ff 20 	lds	r25, 0x20FF	; 0x8020ff <UC_WAFER_ID+0x7>
     a1a:	2a 33       	cpi	r18, 0x3A	; 58
     a1c:	3a 42       	sbci	r19, 0x2A	; 42
     a1e:	41 05       	cpc	r20, r1
     a20:	51 05       	cpc	r21, r1
     a22:	61 05       	cpc	r22, r1
     a24:	71 05       	cpc	r23, r1
     a26:	81 05       	cpc	r24, r1
     a28:	91 05       	cpc	r25, r1
     a2a:	09 f4       	brne	.+2      	; 0xa2e <_Z21configureSerialNumberv+0x470>
     a2c:	3b cf       	rjmp	.-394    	; 0x8a4 <_Z21configureSerialNumberv+0x2e6>
		serialNumber = 10;
	if(UC_LOT_NUMBER == 0x13919 && UC_WAFER_ID == 0x21A1)
     a2e:	20 91 f8 20 	lds	r18, 0x20F8	; 0x8020f8 <UC_WAFER_ID>
     a32:	30 91 f9 20 	lds	r19, 0x20F9	; 0x8020f9 <UC_WAFER_ID+0x1>
     a36:	40 91 fa 20 	lds	r20, 0x20FA	; 0x8020fa <UC_WAFER_ID+0x2>
     a3a:	50 91 fb 20 	lds	r21, 0x20FB	; 0x8020fb <UC_WAFER_ID+0x3>
     a3e:	60 91 fc 20 	lds	r22, 0x20FC	; 0x8020fc <UC_WAFER_ID+0x4>
     a42:	70 91 fd 20 	lds	r23, 0x20FD	; 0x8020fd <UC_WAFER_ID+0x5>
     a46:	80 91 fe 20 	lds	r24, 0x20FE	; 0x8020fe <UC_WAFER_ID+0x6>
     a4a:	90 91 ff 20 	lds	r25, 0x20FF	; 0x8020ff <UC_WAFER_ID+0x7>
     a4e:	21 3a       	cpi	r18, 0xA1	; 161
     a50:	31 42       	sbci	r19, 0x21	; 33
     a52:	41 05       	cpc	r20, r1
     a54:	51 05       	cpc	r21, r1
     a56:	61 05       	cpc	r22, r1
     a58:	71 05       	cpc	r23, r1
     a5a:	81 05       	cpc	r24, r1
     a5c:	91 05       	cpc	r25, r1
     a5e:	09 f4       	brne	.+2      	; 0xa62 <_Z21configureSerialNumberv+0x4a4>
     a60:	28 cf       	rjmp	.-432    	; 0x8b2 <_Z21configureSerialNumberv+0x2f4>
	
		SendStringPC((char *)"[Wafer ID Number: ");
		SendNumPC(UC_WAFER_ID);
		SendStringPC((char *)"]");
	#endif
}
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	df 90       	pop	r13
     a70:	cf 90       	pop	r12
     a72:	bf 90       	pop	r11
     a74:	af 90       	pop	r10
     a76:	9f 90       	pop	r9
     a78:	8f 90       	pop	r8
     a7a:	7f 90       	pop	r7
     a7c:	6f 90       	pop	r6
     a7e:	5f 90       	pop	r5
     a80:	4f 90       	pop	r4
     a82:	3f 90       	pop	r3
     a84:	2f 90       	pop	r2
     a86:	08 95       	ret

00000a88 <_Z23sampleTempSensorVoltagev>:
  return adcCount * 0.0011982182628062362 + 0.0023407572383072894; //I figure the compiler will trim off what it can't actually use...
	
}

int16_t sampleTempSensorVoltage(void){
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEGL_PIN1_gc);//ADC_CH_MUXNEG0_bm);
     a88:	e0 e0       	ldi	r30, 0x00	; 0
     a8a:	f2 e0       	ldi	r31, 0x02	; 2
     a8c:	81 e4       	ldi	r24, 0x41	; 65
     a8e:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
     a90:	80 a1       	ldd	r24, Z+32	; 0x20
     a92:	80 68       	ori	r24, 0x80	; 128
     a94:	80 a3       	std	Z+32, r24	; 0x20
     a96:	8f e7       	ldi	r24, 0x7F	; 127
     a98:	9c e0       	ldi	r25, 0x0C	; 12
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	f1 f7       	brne	.-4      	; 0xa9a <_Z23sampleTempSensorVoltagev+0x12>
     a9e:	00 c0       	rjmp	.+0      	; 0xaa0 <_Z23sampleTempSensorVoltagev+0x18>
     aa0:	00 00       	nop
	
	_delay_us(400);
	
	//while(((ADCA.INTFLAGS >> ADC_CH0IF_bp) & (1U << 8)) != (1U << 8)); // (1U << n) where n is the adc channel, so zero for this one
	
	while(!(ADCA.INTFLAGS & (1 << 0)));
     aa2:	86 81       	ldd	r24, Z+6	; 0x06
     aa4:	80 ff       	sbrs	r24, 0
     aa6:	fd cf       	rjmp	.-6      	; 0xaa2 <_Z23sampleTempSensorVoltagev+0x1a>
	ADCA.INTFLAGS = (1 << 0);
     aa8:	e0 e0       	ldi	r30, 0x00	; 0
     aaa:	f2 e0       	ldi	r31, 0x02	; 2
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	86 83       	std	Z+6, r24	; 0x06
	
	return 	ADCA.CH0.RES;
     ab0:	84 a1       	ldd	r24, Z+36	; 0x24
     ab2:	95 a1       	ldd	r25, Z+37	; 0x25
}
     ab4:	08 95       	ret

00000ab6 <_Z20sampleBatteryVoltageh>:

int16_t sampleBatteryVoltage(uint8_t batterySelect){
	if(batterySelect == ELECTRONICS)
     ab6:	81 30       	cpi	r24, 0x01	; 1
     ab8:	21 f4       	brne	.+8      	; 0xac2 <_Z20sampleBatteryVoltageh+0xc>
		ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN9_gc | ADC_CH_MUXNEGL_PIN1_gc); //PIN for batt voltage sense
     aba:	89 e4       	ldi	r24, 0x49	; 73
     abc:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
     ac0:	03 c0       	rjmp	.+6      	; 0xac8 <_Z20sampleBatteryVoltageh+0x12>
	else //if (batterySelect == REAR_BATT)
		ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN10_gc | ADC_CH_MUXNEGL_PIN1_gc); //PIN for rear batt voltage sense
     ac2:	81 e5       	ldi	r24, 0x51	; 81
     ac4:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
		
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
     ac8:	e0 e0       	ldi	r30, 0x00	; 0
     aca:	f2 e0       	ldi	r31, 0x02	; 2
     acc:	80 a1       	ldd	r24, Z+32	; 0x20
     ace:	80 68       	ori	r24, 0x80	; 128
     ad0:	80 a3       	std	Z+32, r24	; 0x20
	
	//while(((ADCA.INTFLAGS >> ADC_CH0IF_bp) & (1U << 0)) != (1U << 0)); // (1U << n) where n is the adc channel, so zero for this one
	//ADCA.INTFLAGS = ((1U << 0) << ADC_CH0IF_bp);
	while(!(ADCA.INTFLAGS & (1 << 0)));
     ad2:	86 81       	ldd	r24, Z+6	; 0x06
     ad4:	80 ff       	sbrs	r24, 0
     ad6:	fd cf       	rjmp	.-6      	; 0xad2 <_Z20sampleBatteryVoltageh+0x1c>
	ADCA.INTFLAGS = (1 << 0);
     ad8:	e0 e0       	ldi	r30, 0x00	; 0
     ada:	f2 e0       	ldi	r31, 0x02	; 2
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	86 83       	std	Z+6, r24	; 0x06
	
	return 	ADCA.CH0.RES;
     ae0:	84 a1       	ldd	r24, Z+36	; 0x24
     ae2:	95 a1       	ldd	r25, Z+37	; 0x25
}
     ae4:	08 95       	ret

00000ae6 <_Z19sampleCurrentSensorh>:

uint16_t sampleCurrentSensor(uint8_t currentSelect){
	switch(currentSelect){
     ae6:	82 30       	cpi	r24, 0x02	; 2
     ae8:	99 f0       	breq	.+38     	; 0xb10 <_Z19sampleCurrentSensorh+0x2a>
     aea:	28 f4       	brcc	.+10     	; 0xaf6 <_Z19sampleCurrentSensorh+0x10>
     aec:	88 23       	and	r24, r24
     aee:	41 f0       	breq	.+16     	; 0xb00 <_Z19sampleCurrentSensorh+0x1a>
     af0:	81 30       	cpi	r24, 0x01	; 1
     af2:	51 f0       	breq	.+20     	; 0xb08 <_Z19sampleCurrentSensorh+0x22>
     af4:	18 c0       	rjmp	.+48     	; 0xb26 <_Z19sampleCurrentSensorh+0x40>
     af6:	83 30       	cpi	r24, 0x03	; 3
     af8:	79 f0       	breq	.+30     	; 0xb18 <_Z19sampleCurrentSensorh+0x32>
     afa:	84 30       	cpi	r24, 0x04	; 4
     afc:	89 f0       	breq	.+34     	; 0xb20 <_Z19sampleCurrentSensorh+0x3a>
     afe:	13 c0       	rjmp	.+38     	; 0xb26 <_Z19sampleCurrentSensorh+0x40>
		case XTEND:
			ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN3_gc | ADC_CH_MUXNEGL_PIN1_gc); //PIN for xtend current sense
     b00:	89 e1       	ldi	r24, 0x19	; 25
     b02:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
			break;
     b06:	0f c0       	rjmp	.+30     	; 0xb26 <_Z19sampleCurrentSensorh+0x40>
		case COMP:
			ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN4_gc | ADC_CH_MUXNEGL_PIN1_gc); //PIN for RPi current sense
     b08:	81 e2       	ldi	r24, 0x21	; 33
     b0a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
			break;
     b0e:	0b c0       	rjmp	.+22     	; 0xb26 <_Z19sampleCurrentSensorh+0x40>
		case SYS_5V:
			ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN5_gc | ADC_CH_MUXNEGL_PIN1_gc); //PIN for 5v_SYS current sense
     b10:	89 e2       	ldi	r24, 0x29	; 41
     b12:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
			break;
     b16:	07 c0       	rjmp	.+14     	; 0xb26 <_Z19sampleCurrentSensorh+0x40>
		case THROTTLE:
			ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN6_gc | ADC_CH_MUXNEGL_PIN1_gc); //PIN for Throttle servo current sense
     b18:	81 e3       	ldi	r24, 0x31	; 49
     b1a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
			break;
     b1e:	03 c0       	rjmp	.+6      	; 0xb26 <_Z19sampleCurrentSensorh+0x40>
		case REAR:
			ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN7_gc | ADC_CH_MUXNEGL_PIN1_gc); //PIN for Rear Battery current sense
     b20:	89 e3       	ldi	r24, 0x39	; 57
     b22:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
			break;
	}
		
	ADCA.CH0.CTRL |= ADC_CH_START_bm;		//Start the ADC
     b26:	e0 e0       	ldi	r30, 0x00	; 0
     b28:	f2 e0       	ldi	r31, 0x02	; 2
     b2a:	80 a1       	ldd	r24, Z+32	; 0x20
     b2c:	80 68       	ori	r24, 0x80	; 128
     b2e:	80 a3       	std	Z+32, r24	; 0x20
	
	while(!(ADCA.INTFLAGS & (1 << 0)));		//Wait until the ADC has finished processing
     b30:	86 81       	ldd	r24, Z+6	; 0x06
     b32:	80 ff       	sbrs	r24, 0
     b34:	fd cf       	rjmp	.-6      	; 0xb30 <_Z19sampleCurrentSensorh+0x4a>
	ADCA.INTFLAGS = (1 << 0);				//Reset the interrupt flag
     b36:	e0 e0       	ldi	r30, 0x00	; 0
     b38:	f2 e0       	ldi	r31, 0x02	; 2
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	86 83       	std	Z+6, r24	; 0x06
	
	return 	ADCA.CH0.RES;					//Return the result of the ADC calculation
     b3e:	84 a1       	ldd	r24, Z+36	; 0x24
     b40:	95 a1       	ldd	r25, Z+37	; 0x25
	
	
	return 7;
}
     b42:	08 95       	ret

00000b44 <_Z18getEBoxTemperaturev>:


double getEBoxTemperature(){
     b44:	2f 92       	push	r2
     b46:	3f 92       	push	r3
     b48:	4f 92       	push	r4
     b4a:	5f 92       	push	r5
     b4c:	6f 92       	push	r6
     b4e:	7f 92       	push	r7
     b50:	8f 92       	push	r8
     b52:	9f 92       	push	r9
     b54:	af 92       	push	r10
     b56:	bf 92       	push	r11
     b58:	cf 92       	push	r12
     b5a:	df 92       	push	r13
     b5c:	ef 92       	push	r14
     b5e:	ff 92       	push	r15
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	0f 2e       	mov	r0, r31
     b6a:	f4 e6       	ldi	r31, 0x64	; 100
     b6c:	6f 2e       	mov	r6, r31
     b6e:	71 2c       	mov	r7, r1
     b70:	f0 2d       	mov	r31, r0
	
	int avgVal = 100;
	uint16_t temperature = 0;
	uint64_t sum = 0;
     b72:	41 2c       	mov	r4, r1
     b74:	51 2c       	mov	r5, r1
     b76:	81 2c       	mov	r8, r1
     b78:	91 2c       	mov	r9, r1
     b7a:	d0 e0       	ldi	r29, 0x00	; 0
     b7c:	c0 e0       	ldi	r28, 0x00	; 0
     b7e:	21 2c       	mov	r2, r1
     b80:	31 2c       	mov	r3, r1
	for(int i = 0; i < avgVal; ++i){
		sum += sampleTempSensorVoltage();
     b82:	0e 94 44 05 	call	0xa88	; 0xa88 <_Z23sampleTempSensorVoltagev>
     b86:	b9 2e       	mov	r11, r25
     b88:	a8 2e       	mov	r10, r24
     b8a:	19 2f       	mov	r17, r25
     b8c:	11 0f       	add	r17, r17
     b8e:	11 0b       	sbc	r17, r17
     b90:	24 2d       	mov	r18, r4
     b92:	35 2d       	mov	r19, r5
     b94:	48 2d       	mov	r20, r8
     b96:	59 2d       	mov	r21, r9
     b98:	6d 2f       	mov	r22, r29
     b9a:	7c 2f       	mov	r23, r28
     b9c:	82 2d       	mov	r24, r2
     b9e:	93 2d       	mov	r25, r3
     ba0:	c1 2e       	mov	r12, r17
     ba2:	d1 2e       	mov	r13, r17
     ba4:	e1 2e       	mov	r14, r17
     ba6:	f1 2e       	mov	r15, r17
     ba8:	01 2f       	mov	r16, r17
     baa:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__adddi3>
     bae:	42 2e       	mov	r4, r18
     bb0:	53 2e       	mov	r5, r19
     bb2:	84 2e       	mov	r8, r20
     bb4:	95 2e       	mov	r9, r21
     bb6:	d6 2f       	mov	r29, r22
     bb8:	c7 2f       	mov	r28, r23
     bba:	28 2e       	mov	r2, r24
     bbc:	39 2e       	mov	r3, r25
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	68 1a       	sub	r6, r24
     bc2:	71 08       	sbc	r7, r1
double getEBoxTemperature(){
	
	int avgVal = 100;
	uint16_t temperature = 0;
	uint64_t sum = 0;
	for(int i = 0; i < avgVal; ++i){
     bc4:	f1 f6       	brne	.-68     	; 0xb82 <_Z18getEBoxTemperaturev+0x3e>
		sum += sampleTempSensorVoltage();
	}
	temperature = sum / avgVal;
     bc6:	0f 2e       	mov	r0, r31
     bc8:	f4 e6       	ldi	r31, 0x64	; 100
     bca:	af 2e       	mov	r10, r31
     bcc:	f0 2d       	mov	r31, r0
     bce:	b1 2c       	mov	r11, r1
     bd0:	c1 2c       	mov	r12, r1
     bd2:	d1 2c       	mov	r13, r1
     bd4:	e1 2c       	mov	r14, r1
     bd6:	f1 2c       	mov	r15, r1
     bd8:	00 e0       	ldi	r16, 0x00	; 0
     bda:	10 e0       	ldi	r17, 0x00	; 0
     bdc:	24 2d       	mov	r18, r4
     bde:	35 2d       	mov	r19, r5
     be0:	48 2d       	mov	r20, r8
     be2:	59 2d       	mov	r21, r9
     be4:	6d 2f       	mov	r22, r29
     be6:	7c 2f       	mov	r23, r28
     be8:	82 2d       	mov	r24, r2
     bea:	93 2d       	mov	r25, r3
     bec:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <__udivdi3>
	  default:
		return 1;
  }*/
  
  //Testing and comparing voltages to corresponding count values resulted in this fun function:
  return adcCount * 0.0011982182628062362 + 0.0023407572383072894; //I figure the compiler will trim off what it can't actually use...
     bf0:	62 2f       	mov	r22, r18
     bf2:	73 2f       	mov	r23, r19
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__floatunsisf>
     bfc:	29 e8       	ldi	r18, 0x89	; 137
     bfe:	3d e0       	ldi	r19, 0x0D	; 13
     c00:	4d e9       	ldi	r20, 0x9D	; 157
     c02:	5a e3       	ldi	r21, 0x3A	; 58
     c04:	0e 94 06 0c 	call	0x180c	; 0x180c <__mulsf3>
     c08:	24 e6       	ldi	r18, 0x64	; 100
     c0a:	37 e6       	ldi	r19, 0x67	; 103
     c0c:	49 e1       	ldi	r20, 0x19	; 25
     c0e:	5b e3       	ldi	r21, 0x3B	; 59
     c10:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__addsf3>
	
	#ifdef TMP36
		temperatureFloat = 100.0 * temperatureVoltage - 50.0;
	#endif
	#ifdef TMP37
		temperatureFloat = 50.0 * temperatureVoltage;
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	48 e4       	ldi	r20, 0x48	; 72
     c1a:	52 e4       	ldi	r21, 0x42	; 66
     c1c:	0e 94 06 0c 	call	0x180c	; 0x180c <__mulsf3>
	#endif
	
	return temperatureFloat;
}
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	ff 90       	pop	r15
     c2a:	ef 90       	pop	r14
     c2c:	df 90       	pop	r13
     c2e:	cf 90       	pop	r12
     c30:	bf 90       	pop	r11
     c32:	af 90       	pop	r10
     c34:	9f 90       	pop	r9
     c36:	8f 90       	pop	r8
     c38:	7f 90       	pop	r7
     c3a:	6f 90       	pop	r6
     c3c:	5f 90       	pop	r5
     c3e:	4f 90       	pop	r4
     c40:	3f 90       	pop	r3
     c42:	2f 90       	pop	r2
     c44:	08 95       	ret

00000c46 <_Z17getBatteryVoltageh>:

double getBatteryVoltage(uint8_t batterySelect){
     c46:	4f 92       	push	r4
     c48:	5f 92       	push	r5
     c4a:	6f 92       	push	r6
     c4c:	7f 92       	push	r7
     c4e:	8f 92       	push	r8
     c50:	9f 92       	push	r9
     c52:	af 92       	push	r10
     c54:	bf 92       	push	r11
     c56:	cf 92       	push	r12
     c58:	df 92       	push	r13
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	18 2f       	mov	r17, r24
     c66:	c4 e6       	ldi	r28, 0x64	; 100
     c68:	d0 e0       	ldi	r29, 0x00	; 0

	int avgVal = 100;
	uint32_t sum = 0;
     c6a:	c1 2c       	mov	r12, r1
     c6c:	d1 2c       	mov	r13, r1
     c6e:	76 01       	movw	r14, r12
	
	for(int i = 0; i < avgVal; ++i){
		sum += sampleBatteryVoltage(batterySelect);
     c70:	81 2f       	mov	r24, r17
     c72:	0e 94 5b 05 	call	0xab6	; 0xab6 <_Z20sampleBatteryVoltageh>
     c76:	ac 01       	movw	r20, r24
     c78:	99 0f       	add	r25, r25
     c7a:	66 0b       	sbc	r22, r22
     c7c:	77 0b       	sbc	r23, r23
     c7e:	c4 0e       	add	r12, r20
     c80:	d5 1e       	adc	r13, r21
     c82:	e6 1e       	adc	r14, r22
     c84:	f7 1e       	adc	r15, r23
     c86:	21 97       	sbiw	r28, 0x01	; 1
double getBatteryVoltage(uint8_t batterySelect){

	int avgVal = 100;
	uint32_t sum = 0;
	
	for(int i = 0; i < avgVal; ++i){
     c88:	99 f7       	brne	.-26     	; 0xc70 <_Z17getBatteryVoltageh+0x2a>
		sum += sampleBatteryVoltage(batterySelect);
	}
	uint16_t electronicsVoltageCount = sum / avgVal;
     c8a:	c7 01       	movw	r24, r14
     c8c:	b6 01       	movw	r22, r12
     c8e:	24 e6       	ldi	r18, 0x64	; 100
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	50 e0       	ldi	r21, 0x00	; 0
     c96:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__udivmodsi4>
	  default:
		return 1;
  }*/
  
  //Testing and comparing voltages to corresponding count values resulted in this fun function:
  return adcCount * 0.0011982182628062362 + 0.0023407572383072894; //I figure the compiler will trim off what it can't actually use...
     c9a:	b9 01       	movw	r22, r18
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__floatunsisf>
     ca4:	29 e8       	ldi	r18, 0x89	; 137
     ca6:	3d e0       	ldi	r19, 0x0D	; 13
     ca8:	4d e9       	ldi	r20, 0x9D	; 157
     caa:	5a e3       	ldi	r21, 0x3A	; 58
     cac:	0e 94 06 0c 	call	0x180c	; 0x180c <__mulsf3>
     cb0:	24 e6       	ldi	r18, 0x64	; 100
     cb2:	37 e6       	ldi	r19, 0x67	; 103
     cb4:	49 e1       	ldi	r20, 0x19	; 25
     cb6:	5b e3       	ldi	r21, 0x3B	; 59
     cb8:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__addsf3>
     cbc:	6b 01       	movw	r12, r22
     cbe:	7c 01       	movw	r14, r24
		SendNumPC(electronicsVoltageCount);
		SendStringPC((char *)"] ");
	#endif
	
	double electronicsVoltage = ADCCountToVoltage(electronicsVoltageCount);
	double calculatedElectronicsVoltage =  -4.1274 * pow(electronicsVoltage, 4) + 29.1147 * pow(electronicsVoltage, 3) - 75.1330 * pow(electronicsVoltage, 2) + 85.6459 * electronicsVoltage - 24.1509;
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	40 e8       	ldi	r20, 0x80	; 128
     cc6:	50 e4       	ldi	r21, 0x40	; 64
     cc8:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <pow>
     ccc:	4b 01       	movw	r8, r22
     cce:	5c 01       	movw	r10, r24
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e4       	ldi	r20, 0x40	; 64
     cd6:	50 e4       	ldi	r21, 0x40	; 64
     cd8:	c7 01       	movw	r24, r14
     cda:	b6 01       	movw	r22, r12
     cdc:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <pow>
     ce0:	2b 01       	movw	r4, r22
     ce2:	3c 01       	movw	r6, r24
     ce4:	29 ea       	ldi	r18, 0xA9	; 169
     ce6:	33 e1       	ldi	r19, 0x13	; 19
     ce8:	44 e8       	ldi	r20, 0x84	; 132
     cea:	50 ec       	ldi	r21, 0xC0	; 192
     cec:	c5 01       	movw	r24, r10
     cee:	b4 01       	movw	r22, r8
     cf0:	0e 94 06 0c 	call	0x180c	; 0x180c <__mulsf3>
     cf4:	4b 01       	movw	r8, r22
     cf6:	5c 01       	movw	r10, r24
     cf8:	28 ee       	ldi	r18, 0xE8	; 232
     cfa:	3a ee       	ldi	r19, 0xEA	; 234
     cfc:	48 ee       	ldi	r20, 0xE8	; 232
     cfe:	51 e4       	ldi	r21, 0x41	; 65
     d00:	c3 01       	movw	r24, r6
     d02:	b2 01       	movw	r22, r4
     d04:	0e 94 06 0c 	call	0x180c	; 0x180c <__mulsf3>
     d08:	9b 01       	movw	r18, r22
     d0a:	ac 01       	movw	r20, r24
     d0c:	c5 01       	movw	r24, r10
     d0e:	b4 01       	movw	r22, r8
     d10:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__addsf3>
     d14:	4b 01       	movw	r8, r22
     d16:	5c 01       	movw	r10, r24
     d18:	a7 01       	movw	r20, r14
     d1a:	96 01       	movw	r18, r12
     d1c:	c7 01       	movw	r24, r14
     d1e:	b6 01       	movw	r22, r12
     d20:	0e 94 06 0c 	call	0x180c	; 0x180c <__mulsf3>
     d24:	29 e1       	ldi	r18, 0x19	; 25
     d26:	34 e4       	ldi	r19, 0x44	; 68
     d28:	46 e9       	ldi	r20, 0x96	; 150
     d2a:	52 e4       	ldi	r21, 0x42	; 66
     d2c:	0e 94 06 0c 	call	0x180c	; 0x180c <__mulsf3>
     d30:	9b 01       	movw	r18, r22
     d32:	ac 01       	movw	r20, r24
     d34:	c5 01       	movw	r24, r10
     d36:	b4 01       	movw	r22, r8
     d38:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__subsf3>
     d3c:	4b 01       	movw	r8, r22
     d3e:	5c 01       	movw	r10, r24
     d40:	23 eb       	ldi	r18, 0xB3	; 179
     d42:	3a e4       	ldi	r19, 0x4A	; 74
     d44:	4b ea       	ldi	r20, 0xAB	; 171
     d46:	52 e4       	ldi	r21, 0x42	; 66
     d48:	c7 01       	movw	r24, r14
     d4a:	b6 01       	movw	r22, r12
     d4c:	0e 94 06 0c 	call	0x180c	; 0x180c <__mulsf3>
     d50:	9b 01       	movw	r18, r22
     d52:	ac 01       	movw	r20, r24
     d54:	c5 01       	movw	r24, r10
     d56:	b4 01       	movw	r22, r8
     d58:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__addsf3>
     d5c:	2b e0       	ldi	r18, 0x0B	; 11
     d5e:	35 e3       	ldi	r19, 0x35	; 53
     d60:	41 ec       	ldi	r20, 0xC1	; 193
     d62:	51 e4       	ldi	r21, 0x41	; 65
     d64:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__subsf3>
	SendFloatPC(electronicsVoltage);
	SendStringPC((char *)"] ");
	#endif

	return calculatedElectronicsVoltage;
}
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	ff 90       	pop	r15
     d70:	ef 90       	pop	r14
     d72:	df 90       	pop	r13
     d74:	cf 90       	pop	r12
     d76:	bf 90       	pop	r11
     d78:	af 90       	pop	r10
     d7a:	9f 90       	pop	r9
     d7c:	8f 90       	pop	r8
     d7e:	7f 90       	pop	r7
     d80:	6f 90       	pop	r6
     d82:	5f 90       	pop	r5
     d84:	4f 90       	pop	r4
     d86:	08 95       	ret

00000d88 <_Z16getSystemCurrenth>:


double getSystemCurrent(uint8_t currentSelect){
     d88:	cf 92       	push	r12
     d8a:	df 92       	push	r13
     d8c:	ef 92       	push	r14
     d8e:	ff 92       	push	r15
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	18 2f       	mov	r17, r24
     d98:	c4 e6       	ldi	r28, 0x64	; 100
     d9a:	d0 e0       	ldi	r29, 0x00	; 0
	
	int avgVal = 100;
	uint32_t sum = 0;
     d9c:	c1 2c       	mov	r12, r1
     d9e:	d1 2c       	mov	r13, r1
     da0:	76 01       	movw	r14, r12
	
	for(int i = 0; i < avgVal; ++i){
		sum += sampleCurrentSensor(currentSelect);
     da2:	81 2f       	mov	r24, r17
     da4:	0e 94 73 05 	call	0xae6	; 0xae6 <_Z19sampleCurrentSensorh>
     da8:	c8 0e       	add	r12, r24
     daa:	d9 1e       	adc	r13, r25
     dac:	e1 1c       	adc	r14, r1
     dae:	f1 1c       	adc	r15, r1
     db0:	21 97       	sbiw	r28, 0x01	; 1
double getSystemCurrent(uint8_t currentSelect){
	
	int avgVal = 100;
	uint32_t sum = 0;
	
	for(int i = 0; i < avgVal; ++i){
     db2:	b9 f7       	brne	.-18     	; 0xda2 <_Z16getSystemCurrenth+0x1a>
	
	double currentSenseVoltage = ADCCountToVoltage(currentVoltageCount);
	double calculatedCurrent;
	
	double preampCurrentSenseVoltage;
	if(currentSelect == XTEND){  //The XTend current is based on 5v supply, and doesn't go through an OpAmp
     db4:	11 23       	and	r17, r17
     db6:	a1 f1       	breq	.+104    	; 0xe20 <_Z16getSystemCurrenth+0x98>
	uint32_t sum = 0;
	
	for(int i = 0; i < avgVal; ++i){
		sum += sampleCurrentSensor(currentSelect);
	}
	uint16_t currentVoltageCount = sum / avgVal;
     db8:	c7 01       	movw	r24, r14
     dba:	b6 01       	movw	r22, r12
     dbc:	24 e6       	ldi	r18, 0x64	; 100
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__udivmodsi4>
	  default:
		return 1;
  }*/
  
  //Testing and comparing voltages to corresponding count values resulted in this fun function:
  return adcCount * 0.0011982182628062362 + 0.0023407572383072894; //I figure the compiler will trim off what it can't actually use...
     dc8:	b9 01       	movw	r22, r18
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__floatunsisf>
     dd2:	29 e8       	ldi	r18, 0x89	; 137
     dd4:	3d e0       	ldi	r19, 0x0D	; 13
     dd6:	4d e9       	ldi	r20, 0x9D	; 157
     dd8:	5a e3       	ldi	r21, 0x3A	; 58
     dda:	0e 94 06 0c 	call	0x180c	; 0x180c <__mulsf3>
     dde:	24 e6       	ldi	r18, 0x64	; 100
     de0:	37 e6       	ldi	r19, 0x67	; 103
     de2:	49 e1       	ldi	r20, 0x19	; 25
     de4:	5b e3       	ldi	r21, 0x3B	; 59
     de6:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__addsf3>
	if(currentSelect == XTEND){  //The XTend current is based on 5v supply, and doesn't go through an OpAmp
		preampCurrentSenseVoltage = 7.7; //This measurement is actually impossible... whoops
		calculatedCurrent = 7.7;
	}
	else{  //Anyother case besides XTend (e.g. ACS powered with 3v3
		preampCurrentSenseVoltage = -(currentSenseVoltage/1.5) + 3.3;
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 ec       	ldi	r20, 0xC0	; 192
     df0:	5f e3       	ldi	r21, 0x3F	; 63
     df2:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__divsf3>
     df6:	9b 01       	movw	r18, r22
     df8:	ac 01       	movw	r20, r24
     dfa:	63 e3       	ldi	r22, 0x33	; 51
     dfc:	73 e3       	ldi	r23, 0x33	; 51
     dfe:	83 e5       	ldi	r24, 0x53	; 83
     e00:	90 e4       	ldi	r25, 0x40	; 64
     e02:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__subsf3>
		calculatedCurrent = (preampCurrentSenseVoltage - 1.65) / 0.055;
     e06:	23 e3       	ldi	r18, 0x33	; 51
     e08:	33 e3       	ldi	r19, 0x33	; 51
     e0a:	43 ed       	ldi	r20, 0xD3	; 211
     e0c:	5f e3       	ldi	r21, 0x3F	; 63
     e0e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__subsf3>
     e12:	2e ea       	ldi	r18, 0xAE	; 174
     e14:	37 e4       	ldi	r19, 0x47	; 71
     e16:	41 e6       	ldi	r20, 0x61	; 97
     e18:	5d e3       	ldi	r21, 0x3D	; 61
     e1a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__divsf3>
     e1e:	04 c0       	rjmp	.+8      	; 0xe28 <_Z16getSystemCurrenth+0xa0>
	double calculatedCurrent;
	
	double preampCurrentSenseVoltage;
	if(currentSelect == XTEND){  //The XTend current is based on 5v supply, and doesn't go through an OpAmp
		preampCurrentSenseVoltage = 7.7; //This measurement is actually impossible... whoops
		calculatedCurrent = 7.7;
     e20:	66 e6       	ldi	r22, 0x66	; 102
     e22:	76 e6       	ldi	r23, 0x66	; 102
     e24:	86 ef       	ldi	r24, 0xF6	; 246
     e26:	90 e4       	ldi	r25, 0x40	; 64
	SendFloatPC(preampCurrentSenseVoltage);
	SendStringPC((char *)"] ");
	#endif

	return calculatedCurrent;
}
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	ff 90       	pop	r15
     e30:	ef 90       	pop	r14
     e32:	df 90       	pop	r13
     e34:	cf 90       	pop	r12
     e36:	08 95       	ret

00000e38 <main>:

#define REMOTE_START_CHECK 0x1
#define REMOTE_STOP_CHECK  0x2

int main(void)
{
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	60 97       	sbiw	r28, 0x10	; 16
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	de bf       	out	0x3e, r29	; 62
	configureIO();
     e46:	0e 94 ed 00 	call	0x1da	; 0x1da <_Z11configureIOv>
	configureExternalOscillator();
     e4a:	0e 94 b6 00 	call	0x16c	; 0x16c <_Z27configureExternalOscillatorv>
	configureUSART();					//Set up for 57600 Baud
     e4e:	0e 94 11 0a 	call	0x1422	; 0x1422 <_Z14configureUSARTv>
	configureTimerCounter();
     e52:	0e 94 a4 01 	call	0x348	; 0x348 <_Z21configureTimerCounterv>
	configureADCs();
     e56:	0e 94 b4 02 	call	0x568	; 0x568 <_Z13configureADCsv>
	configureRTC();
     e5a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_Z12configureRTCv>
	configureXCL();
     e5e:	0e 94 aa 02 	call	0x554	; 0x554 <_Z12configureXCLv>
	configureSerialNumber();
     e62:	0e 94 df 02 	call	0x5be	; 0x5be <_Z21configureSerialNumberv>
		
	LOW_LEVEL_INTERRUPTS_ENABLE();
     e66:	e0 ea       	ldi	r30, 0xA0	; 160
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	82 81       	ldd	r24, Z+2	; 0x02
     e6c:	81 60       	ori	r24, 0x01	; 1
     e6e:	82 83       	std	Z+2, r24	; 0x02
	MED_LEVEL_INTERRUPTS_ENABLE();
     e70:	82 81       	ldd	r24, Z+2	; 0x02
     e72:	82 60       	ori	r24, 0x02	; 2
     e74:	82 83       	std	Z+2, r24	; 0x02
	HIGH_LEVEL_INTERRUPTS_ENABLE();
     e76:	82 81       	ldd	r24, Z+2	; 0x02
     e78:	84 60       	ori	r24, 0x04	; 4
     e7a:	82 83       	std	Z+2, r24	; 0x02
	sei();								//Enable global interrupts
     e7c:	78 94       	sei
	
	uint8_t receivedUSARTData;
	
	RSSI.measuring = NOT_MEASURING;
     e7e:	e3 e2       	ldi	r30, 0x23	; 35
     e80:	f1 e2       	ldi	r31, 0x21	; 33
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	81 83       	std	Z+1, r24	; 0x01
	RSSI.timeDifference = 0;
     e86:	12 82       	std	Z+2, r1	; 0x02
     e88:	13 82       	std	Z+3, r1	; 0x03
	RSSI.sampleCount = 0;
     e8a:	16 82       	std	Z+6, r1	; 0x06
     e8c:	17 82       	std	Z+7, r1	; 0x07

	//Init string with basic documentation
	SendStringPC("\n\r#[INIT ROSS PDB]\n\r");
     e8e:	83 e0       	ldi	r24, 0x03	; 3
     e90:	90 e2       	ldi	r25, 0x20	; 32
     e92:	0e 94 75 09 	call	0x12ea	; 0x12ea <_Z12SendStringPCPKc>
	SendStringPC("#Firmware version ");
     e96:	88 e1       	ldi	r24, 0x18	; 24
     e98:	90 e2       	ldi	r25, 0x20	; 32
     e9a:	0e 94 75 09 	call	0x12ea	; 0x12ea <_Z12SendStringPCPKc>
	SendStringPC(FIRMWARE_VERSION_STR);
     e9e:	8b e2       	ldi	r24, 0x2B	; 43
     ea0:	90 e2       	ldi	r25, 0x20	; 32
     ea2:	0e 94 75 09 	call	0x12ea	; 0x12ea <_Z12SendStringPCPKc>
	SendStringPC("\n\r#Serial Number: ");
     ea6:	8e e2       	ldi	r24, 0x2E	; 46
     ea8:	90 e2       	ldi	r25, 0x20	; 32
     eaa:	0e 94 75 09 	call	0x12ea	; 0x12ea <_Z12SendStringPCPKc>
	if(serialNumber == -1)
     eae:	80 91 f6 20 	lds	r24, 0x20F6	; 0x8020f6 <__data_end>
     eb2:	90 91 f7 20 	lds	r25, 0x20F7	; 0x8020f7 <__data_end+0x1>
     eb6:	8f 3f       	cpi	r24, 0xFF	; 255
     eb8:	2f ef       	ldi	r18, 0xFF	; 255
     eba:	92 07       	cpc	r25, r18
     ebc:	29 f4       	brne	.+10     	; 0xec8 <main+0x90>
		SendStringPC("NOT SET");
     ebe:	81 e4       	ldi	r24, 0x41	; 65
     ec0:	90 e2       	ldi	r25, 0x20	; 32
     ec2:	0e 94 75 09 	call	0x12ea	; 0x12ea <_Z12SendStringPCPKc>
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <main+0x94>
	else
		SendNumPC(serialNumber);
     ec8:	0e 94 a0 09 	call	0x1340	; 0x1340 <_Z9SendNumPCi>
	SendStringPC("\n\r#Msg format: Electronics Batt Volt | Rear Batt Volt | Ebox Temperature | 5v_SYS Curr | 5v_Comp Curr | Throttle Current | XTend RSSI | \"Remote Input\" \n\r");
     ecc:	89 e4       	ldi	r24, 0x49	; 73
     ece:	90 e2       	ldi	r25, 0x20	; 32
     ed0:	0e 94 75 09 	call	0x12ea	; 0x12ea <_Z12SendStringPCPKc>
			
			//Steering Override processing
			if(receivedUSARTData >= 71 && receivedUSARTData <= 87){		//Then we need to process a PWM override
				pixhawkOverride = 1;
				manualPWMOutput = receivedUSARTData * 50 - 2450;  //This will generate the correct output per https://goo.gl/7wYL6b
				if(CHECK_DIP_SW_2()){	//5 second update time
     ed4:	0f 2e       	mov	r0, r31
     ed6:	f0 e4       	ldi	r31, 0x40	; 64
     ed8:	6f 2e       	mov	r6, r31
     eda:	f6 e0       	ldi	r31, 0x06	; 6
     edc:	7f 2e       	mov	r7, r31
     ede:	f0 2d       	mov	r31, r0
						pixhawkOverrideCountdown = 10;
					else
						pixhawkOverrideCountdown = 50;
				}
				else {	//1 second update time
					if(TCC4.PER == TC_1024_100MS)
     ee0:	21 2c       	mov	r2, r1
     ee2:	68 94       	set
     ee4:	33 24       	eor	r3, r3
     ee6:	33 f8       	bld	r3, 3
				}
			}
		}		
		
		//Check for commands from the ON/OFF Switch
		if(USART_IsRXComplete(&ONOFF_USART)){
     ee8:	00 ec       	ldi	r16, 0xC0	; 192
     eea:	19 e0       	ldi	r17, 0x09	; 9
					if(TCC4.PER == TC_1024_100MS)
						pixhawkOverrideCountdown = 10;
					else if(TCC4.PER == TC_1024_500MS)
						pixhawkOverrideCountdown = 2;
					else
						pixhawkOverrideCountdown = 10;
     eec:	0f 2e       	mov	r0, r31
     eee:	fa e0       	ldi	r31, 0x0A	; 10
     ef0:	4f 2e       	mov	r4, r31
     ef2:	51 2c       	mov	r5, r1
     ef4:	f0 2d       	mov	r31, r0
				pixhawkOverrideCountdown = 0;
			}
			
			//Steering Override processing
			if(receivedUSARTData >= 71 && receivedUSARTData <= 87){		//Then we need to process a PWM override
				pixhawkOverride = 1;
     ef6:	cc 24       	eor	r12, r12
     ef8:	c3 94       	inc	r12
				manualPWMOutput = receivedUSARTData * 50 - 2450;  //This will generate the correct output per https://goo.gl/7wYL6b
     efa:	0f 2e       	mov	r0, r31
     efc:	f2 e3       	ldi	r31, 0x32	; 50
     efe:	bf 2e       	mov	r11, r31
     f00:	f0 2d       	mov	r31, r0
			
			//Rear relay processing
			if(receivedUSARTData == 'y')
				REAR_RELAY_SET();
			else if(receivedUSARTData == 'n')
				REAR_RELAY_CLR();
     f02:	68 94       	set
     f04:	99 24       	eor	r9, r9
     f06:	95 f8       	bld	r9, 5
			if(receivedUSARTData == 10){	//Remote start requested
				remoteInput = REMOTE_START_CHECK;
				remoteOutputCountdown = STATIC_STATUS_OUTPUT_COUNT;
			}	
			else if(receivedUSARTData == 20){	//Remote stop requested
				remoteInput = REMOTE_STOP_CHECK;
     f08:	68 94       	set
     f0a:	88 24       	eor	r8, r8
     f0c:	81 f8       	bld	r8, 1
				remoteOutputCountdown = STATIC_STATUS_OUTPUT_COUNT;
     f0e:	0f 2e       	mov	r0, r31
     f10:	f5 e0       	ldi	r31, 0x05	; 5
     f12:	af 2e       	mov	r10, r31
     f14:	f0 2d       	mov	r31, r0
		
		if(pixhawkOverride){	//If we do want to override the signal
			TC_PWM_SET(manualPWMOutput);	//Output the desired override PWM output
		}
		else {  //We don't want to overrride the signal
			TC_PWM_SET(steeringPWMPeriod);	//Output the Pixhawk PWM signal
     f16:	0f 2e       	mov	r0, r31
     f18:	f0 e4       	ldi	r31, 0x40	; 64
     f1a:	ef 2e       	mov	r14, r31
     f1c:	f9 e0       	ldi	r31, 0x09	; 9
     f1e:	ff 2e       	mov	r15, r31
     f20:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f22:	8f e3       	ldi	r24, 0x3F	; 63
     f24:	9f e1       	ldi	r25, 0x1F	; 31
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <main+0xee>
     f2a:	00 c0       	rjmp	.+0      	; 0xf2c <main+0xf4>
     f2c:	00 00       	nop
    {

		_delay_ms(1);

		//Check for commands from the computer
		if(USART_IsRXComplete(&COMP_USART)){
     f2e:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <__TEXT_REGION_LENGTH__+0x7008c1>
     f32:	88 23       	and	r24, r24
     f34:	0c f0       	brlt	.+2      	; 0xf38 <main+0x100>
     f36:	6f c0       	rjmp	.+222    	; 0x1016 <main+0x1de>
			receivedUSARTData = USART_GetChar(&COMP_USART);
     f38:	e0 ec       	ldi	r30, 0xC0	; 192
     f3a:	f8 e0       	ldi	r31, 0x08	; 8
     f3c:	d0 80       	ld	r13, Z
			
			//Check if the inputted command is within the range to be
			//forwarded to the ON/OFF switch
			if(receivedUSARTData >= 30 && receivedUSARTData <= 65){
     f3e:	82 ee       	ldi	r24, 0xE2	; 226
     f40:	8d 0d       	add	r24, r13
     f42:	84 32       	cpi	r24, 0x24	; 36
     f44:	18 f4       	brcc	.+6      	; 0xf4c <main+0x114>
				SendCharONOFF(receivedUSARTData);
     f46:	8d 2d       	mov	r24, r13
     f48:	0e 94 85 09 	call	0x130a	; 0x130a <_Z13SendCharONOFFc>
			}
			
			//Rear relay processing
			if(receivedUSARTData == 'y')
     f4c:	f9 e7       	ldi	r31, 0x79	; 121
     f4e:	df 12       	cpse	r13, r31
     f50:	03 c0       	rjmp	.+6      	; 0xf58 <main+0x120>
				REAR_RELAY_SET();
     f52:	f3 01       	movw	r30, r6
     f54:	95 82       	std	Z+5, r9	; 0x05
     f56:	10 c0       	rjmp	.+32     	; 0xf78 <main+0x140>
			else if(receivedUSARTData == 'n')
     f58:	fe e6       	ldi	r31, 0x6E	; 110
     f5a:	df 12       	cpse	r13, r31
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <main+0x12c>
				REAR_RELAY_CLR();
     f5e:	f3 01       	movw	r30, r6
     f60:	96 82       	std	Z+6, r9	; 0x06
     f62:	0a c0       	rjmp	.+20     	; 0xf78 <main+0x140>
			
			//Override canceling
			if(receivedUSARTData == 70){  //Then we need to cancel our override (if it exists)
     f64:	f6 e4       	ldi	r31, 0x46	; 70
     f66:	df 12       	cpse	r13, r31
     f68:	07 c0       	rjmp	.+14     	; 0xf78 <main+0x140>
				pixhawkOverride = 0;
     f6a:	10 92 20 21 	sts	0x2120, r1	; 0x802120 <pixhawkOverride>
				pixhawkOverrideCountdown = 0;
     f6e:	10 92 1e 21 	sts	0x211E, r1	; 0x80211e <pixhawkOverrideCountdown>
     f72:	10 92 1f 21 	sts	0x211F, r1	; 0x80211f <pixhawkOverrideCountdown+0x1>
     f76:	4f c0       	rjmp	.+158    	; 0x1016 <main+0x1de>
			}
			
			//Steering Override processing
			if(receivedUSARTData >= 71 && receivedUSARTData <= 87){		//Then we need to process a PWM override
     f78:	89 eb       	ldi	r24, 0xB9	; 185
     f7a:	8d 0d       	add	r24, r13
     f7c:	81 31       	cpi	r24, 0x11	; 17
     f7e:	08 f0       	brcs	.+2      	; 0xf82 <main+0x14a>
     f80:	4a c0       	rjmp	.+148    	; 0x1016 <main+0x1de>
				pixhawkOverride = 1;
     f82:	c0 92 20 21 	sts	0x2120, r12	; 0x802120 <pixhawkOverride>
				manualPWMOutput = receivedUSARTData * 50 - 2450;  //This will generate the correct output per https://goo.gl/7wYL6b
     f86:	bd 9c       	mul	r11, r13
     f88:	c0 01       	movw	r24, r0
     f8a:	11 24       	eor	r1, r1
     f8c:	82 59       	subi	r24, 0x92	; 146
     f8e:	99 40       	sbci	r25, 0x09	; 9
     f90:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <manualPWMOutput>
     f94:	90 93 02 20 	sts	0x2002, r25	; 0x802002 <manualPWMOutput+0x1>
				if(CHECK_DIP_SW_2()){	//5 second update time
     f98:	f3 01       	movw	r30, r6
     f9a:	80 85       	ldd	r24, Z+8	; 0x08
     f9c:	82 fd       	sbrc	r24, 2
     f9e:	1f c0       	rjmp	.+62     	; 0xfde <main+0x1a6>
					if(TCC4.PER == TC_1024_100MS)
     fa0:	f1 01       	movw	r30, r2
     fa2:	86 a1       	ldd	r24, Z+38	; 0x26
     fa4:	97 a1       	ldd	r25, Z+39	; 0x27
     fa6:	85 33       	cpi	r24, 0x35	; 53
     fa8:	9c 40       	sbci	r25, 0x0C	; 12
     faa:	39 f4       	brne	.+14     	; 0xfba <main+0x182>
						pixhawkOverrideCountdown = 50;
     fac:	82 e3       	ldi	r24, 0x32	; 50
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <pixhawkOverrideCountdown>
     fb4:	90 93 1f 21 	sts	0x211F, r25	; 0x80211f <pixhawkOverrideCountdown+0x1>
     fb8:	2e c0       	rjmp	.+92     	; 0x1016 <main+0x1de>
					else if(TCC4.PER == TC_1024_500MS)
     fba:	f1 01       	movw	r30, r2
     fbc:	86 a1       	ldd	r24, Z+38	; 0x26
     fbe:	97 a1       	ldd	r25, Z+39	; 0x27
     fc0:	89 30       	cpi	r24, 0x09	; 9
     fc2:	9d 43       	sbci	r25, 0x3D	; 61
     fc4:	29 f4       	brne	.+10     	; 0xfd0 <main+0x198>
						pixhawkOverrideCountdown = 10;
     fc6:	40 92 1e 21 	sts	0x211E, r4	; 0x80211e <pixhawkOverrideCountdown>
     fca:	50 92 1f 21 	sts	0x211F, r5	; 0x80211f <pixhawkOverrideCountdown+0x1>
     fce:	23 c0       	rjmp	.+70     	; 0x1016 <main+0x1de>
					else
						pixhawkOverrideCountdown = 50;
     fd0:	82 e3       	ldi	r24, 0x32	; 50
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <pixhawkOverrideCountdown>
     fd8:	90 93 1f 21 	sts	0x211F, r25	; 0x80211f <pixhawkOverrideCountdown+0x1>
     fdc:	1c c0       	rjmp	.+56     	; 0x1016 <main+0x1de>
				}
				else {	//1 second update time
					if(TCC4.PER == TC_1024_100MS)
     fde:	f1 01       	movw	r30, r2
     fe0:	86 a1       	ldd	r24, Z+38	; 0x26
     fe2:	97 a1       	ldd	r25, Z+39	; 0x27
     fe4:	85 33       	cpi	r24, 0x35	; 53
     fe6:	9c 40       	sbci	r25, 0x0C	; 12
     fe8:	29 f4       	brne	.+10     	; 0xff4 <main+0x1bc>
						pixhawkOverrideCountdown = 10;
     fea:	40 92 1e 21 	sts	0x211E, r4	; 0x80211e <pixhawkOverrideCountdown>
     fee:	50 92 1f 21 	sts	0x211F, r5	; 0x80211f <pixhawkOverrideCountdown+0x1>
     ff2:	11 c0       	rjmp	.+34     	; 0x1016 <main+0x1de>
					else if(TCC4.PER == TC_1024_500MS)
     ff4:	f1 01       	movw	r30, r2
     ff6:	86 a1       	ldd	r24, Z+38	; 0x26
     ff8:	97 a1       	ldd	r25, Z+39	; 0x27
     ffa:	89 30       	cpi	r24, 0x09	; 9
     ffc:	9d 43       	sbci	r25, 0x3D	; 61
     ffe:	39 f4       	brne	.+14     	; 0x100e <main+0x1d6>
						pixhawkOverrideCountdown = 2;
    1000:	82 e0       	ldi	r24, 0x02	; 2
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <pixhawkOverrideCountdown>
    1008:	90 93 1f 21 	sts	0x211F, r25	; 0x80211f <pixhawkOverrideCountdown+0x1>
    100c:	04 c0       	rjmp	.+8      	; 0x1016 <main+0x1de>
					else
						pixhawkOverrideCountdown = 10;
    100e:	40 92 1e 21 	sts	0x211E, r4	; 0x80211e <pixhawkOverrideCountdown>
    1012:	50 92 1f 21 	sts	0x211F, r5	; 0x80211f <pixhawkOverrideCountdown+0x1>
				}
			}
		}		
		
		//Check for commands from the ON/OFF Switch
		if(USART_IsRXComplete(&ONOFF_USART)){
    1016:	f8 01       	movw	r30, r16
    1018:	81 81       	ldd	r24, Z+1	; 0x01
    101a:	88 23       	and	r24, r24
    101c:	74 f4       	brge	.+28     	; 0x103a <main+0x202>
			receivedUSARTData = USART_GetChar(&ONOFF_USART);
    101e:	80 81       	ld	r24, Z
			//CHECK FOR IF START OR STOP COMMAND
			if(receivedUSARTData == 10){	//Remote start requested
    1020:	8a 30       	cpi	r24, 0x0A	; 10
    1022:	29 f4       	brne	.+10     	; 0x102e <main+0x1f6>
				remoteInput = REMOTE_START_CHECK;
    1024:	c0 92 22 21 	sts	0x2122, r12	; 0x802122 <remoteInput>
				remoteOutputCountdown = STATIC_STATUS_OUTPUT_COUNT;
    1028:	a0 92 21 21 	sts	0x2121, r10	; 0x802121 <remoteOutputCountdown>
    102c:	06 c0       	rjmp	.+12     	; 0x103a <main+0x202>
			}	
			else if(receivedUSARTData == 20){	//Remote stop requested
    102e:	84 31       	cpi	r24, 0x14	; 20
    1030:	21 f4       	brne	.+8      	; 0x103a <main+0x202>
				remoteInput = REMOTE_STOP_CHECK;
    1032:	80 92 22 21 	sts	0x2122, r8	; 0x802122 <remoteInput>
				remoteOutputCountdown = STATIC_STATUS_OUTPUT_COUNT;
    1036:	a0 92 21 21 	sts	0x2121, r10	; 0x802121 <remoteOutputCountdown>
			}
		}
		
		if(pixhawkOverride){	//If we do want to override the signal
    103a:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <pixhawkOverride>
    103e:	88 23       	and	r24, r24
    1040:	a1 f0       	breq	.+40     	; 0x106a <main+0x232>
			TC_PWM_SET(manualPWMOutput);	//Output the desired override PWM output
    1042:	60 91 01 20 	lds	r22, 0x2001	; 0x802001 <manualPWMOutput>
    1046:	70 91 02 20 	lds	r23, 0x2002	; 0x802002 <manualPWMOutput+0x1>
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__floatunsisf>
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	40 e0       	ldi	r20, 0x00	; 0
    1058:	5f e3       	ldi	r21, 0x3F	; 63
    105a:	0e 94 06 0c 	call	0x180c	; 0x180c <__mulsf3>
    105e:	0e 94 25 0b 	call	0x164a	; 0x164a <__fixunssfsi>
    1062:	f7 01       	movw	r30, r14
    1064:	60 a7       	std	Z+40, r22	; 0x28
    1066:	71 a7       	std	Z+41, r23	; 0x29
    1068:	13 c0       	rjmp	.+38     	; 0x1090 <main+0x258>
		}
		else {  //We don't want to overrride the signal
			TC_PWM_SET(steeringPWMPeriod);	//Output the Pixhawk PWM signal
    106a:	60 91 13 21 	lds	r22, 0x2113	; 0x802113 <steeringPWMPeriod>
    106e:	70 91 14 21 	lds	r23, 0x2114	; 0x802114 <steeringPWMPeriod+0x1>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__floatunsisf>
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 e0       	ldi	r20, 0x00	; 0
    1080:	5f e3       	ldi	r21, 0x3F	; 63
    1082:	0e 94 06 0c 	call	0x180c	; 0x180c <__mulsf3>
    1086:	0e 94 25 0b 	call	0x164a	; 0x164a <__fixunssfsi>
    108a:	f7 01       	movw	r30, r14
    108c:	60 a7       	std	Z+40, r22	; 0x28
    108e:	71 a7       	std	Z+41, r23	; 0x29
		}
		
		if(broadcastStatus){  //This variable becomes true every interval that the user wants info reported
    1090:	80 91 1d 21 	lds	r24, 0x211D	; 0x80211d <broadcastStatus>
    1094:	88 23       	and	r24, r24
    1096:	09 f4       	brne	.+2      	; 0x109a <main+0x262>
    1098:	44 cf       	rjmp	.-376    	; 0xf22 <main+0xea>
			broadcastStatus = 0;
    109a:	10 92 1d 21 	sts	0x211D, r1	; 0x80211d <broadcastStatus>
			
			TCC4.CNT = 0;	//We want to ensure the counter is 0 so that we can 
    109e:	f1 01       	movw	r30, r2
    10a0:	10 a2       	std	Z+32, r1	; 0x20
    10a2:	11 a2       	std	Z+33, r1	; 0x21
							//have a consistent report time. (We don't want to throw
							//out the accuracy of the TC)
			
			//Calculated desired output values
			double EBoxTemp = getEBoxTemperature();
    10a4:	0e 94 a2 05 	call	0xb44	; 0xb44 <_Z18getEBoxTemperaturev>
    10a8:	69 83       	std	Y+1, r22	; 0x01
    10aa:	7a 83       	std	Y+2, r23	; 0x02
    10ac:	8b 83       	std	Y+3, r24	; 0x03
    10ae:	9c 83       	std	Y+4, r25	; 0x04
			double electronicsBatteryVoltage = getBatteryVoltage(ELECTRONICS);
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	0e 94 23 06 	call	0xc46	; 0xc46 <_Z17getBatteryVoltageh>
    10b6:	6b 01       	movw	r12, r22
    10b8:	7c 01       	movw	r14, r24
			double rearBatteryVoltage = getBatteryVoltage(REAR_BATT);
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	0e 94 23 06 	call	0xc46	; 0xc46 <_Z17getBatteryVoltageh>
    10c0:	4b 01       	movw	r8, r22
    10c2:	5c 01       	movw	r10, r24
			//double XTendCurrent = getSystemCurrent(THROTTLE);
			double sysCurrent = getSystemCurrent(SYS_5V);
    10c4:	82 e0       	ldi	r24, 0x02	; 2
    10c6:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z16getSystemCurrenth>
    10ca:	6d 83       	std	Y+5, r22	; 0x05
    10cc:	7e 83       	std	Y+6, r23	; 0x06
    10ce:	8f 83       	std	Y+7, r24	; 0x07
    10d0:	98 87       	std	Y+8, r25	; 0x08
			double compCurrent = getSystemCurrent(COMP);
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z16getSystemCurrenth>
    10d8:	69 87       	std	Y+9, r22	; 0x09
    10da:	7a 87       	std	Y+10, r23	; 0x0a
    10dc:	8b 87       	std	Y+11, r24	; 0x0b
    10de:	9c 87       	std	Y+12, r25	; 0x0c
			double throttleCurrent = getSystemCurrent(THROTTLE);
    10e0:	83 e0       	ldi	r24, 0x03	; 3
    10e2:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z16getSystemCurrenth>
    10e6:	6d 87       	std	Y+13, r22	; 0x0d
    10e8:	7e 87       	std	Y+14, r23	; 0x0e
    10ea:	8f 87       	std	Y+15, r24	; 0x0f
    10ec:	98 8b       	std	Y+16, r25	; 0x10
		}
    }
}

uint16_t inline getXTendRSSI(){
	RTC.CNT = 0;
    10ee:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    10f2:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
				
	//Get RSSI from XTend
	RSSI.measuring = 0;
    10f6:	10 92 24 21 	sts	0x2124, r1	; 0x802124 <RSSI+0x1>
	do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
		_delay_us(50);
					
		if(RTC.CNT > RSSI_MAX_COUNT)
    10fa:	e0 e0       	ldi	r30, 0x00	; 0
    10fc:	f4 e0       	ldi	r31, 0x04	; 4
		break;
					
	}while(READ_RSSI_PIN());
    10fe:	a0 e0       	ldi	r26, 0x00	; 0
    1100:	b6 e0       	ldi	r27, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1102:	8f e8       	ldi	r24, 0x8F	; 143
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	f1 f7       	brne	.-4      	; 0x1106 <main+0x2ce>
    110a:	00 c0       	rjmp	.+0      	; 0x110c <main+0x2d4>
    110c:	00 00       	nop
	//Get RSSI from XTend
	RSSI.measuring = 0;
	do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
		_delay_us(50);
					
		if(RTC.CNT > RSSI_MAX_COUNT)
    110e:	80 85       	ldd	r24, Z+8	; 0x08
    1110:	91 85       	ldd	r25, Z+9	; 0x09
    1112:	82 31       	cpi	r24, 0x12	; 18
    1114:	91 40       	sbci	r25, 0x01	; 1
    1116:	28 f4       	brcc	.+10     	; 0x1122 <main+0x2ea>
		break;
					
	}while(READ_RSSI_PIN());
    1118:	18 96       	adiw	r26, 0x08	; 8
    111a:	8c 91       	ld	r24, X
    111c:	18 97       	sbiw	r26, 0x08	; 8
uint16_t inline getXTendRSSI(){
	RTC.CNT = 0;
				
	//Get RSSI from XTend
	RSSI.measuring = 0;
	do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
    111e:	82 fd       	sbrc	r24, 2
    1120:	f0 cf       	rjmp	.-32     	; 0x1102 <main+0x2ca>
	}while(READ_RSSI_PIN());
				
	do{  //Wait until we have a "High" signal on the RSSI (wait for this ____/----)
		_delay_us(50);
					
		if(RTC.CNT > RSSI_MAX_COUNT)
    1122:	e0 e0       	ldi	r30, 0x00	; 0
    1124:	f4 e0       	ldi	r31, 0x04	; 4
		break;
	}while(!READ_RSSI_PIN());
    1126:	a0 e0       	ldi	r26, 0x00	; 0
    1128:	b6 e0       	ldi	r27, 0x06	; 6
    112a:	8f e8       	ldi	r24, 0x8F	; 143
    112c:	91 e0       	ldi	r25, 0x01	; 1
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	f1 f7       	brne	.-4      	; 0x112e <main+0x2f6>
    1132:	00 c0       	rjmp	.+0      	; 0x1134 <main+0x2fc>
    1134:	00 00       	nop
	}while(READ_RSSI_PIN());
				
	do{  //Wait until we have a "High" signal on the RSSI (wait for this ____/----)
		_delay_us(50);
					
		if(RTC.CNT > RSSI_MAX_COUNT)
    1136:	80 85       	ldd	r24, Z+8	; 0x08
    1138:	91 85       	ldd	r25, Z+9	; 0x09
    113a:	82 31       	cpi	r24, 0x12	; 18
    113c:	91 40       	sbci	r25, 0x01	; 1
    113e:	28 f4       	brcc	.+10     	; 0x114a <main+0x312>
		break;
	}while(!READ_RSSI_PIN());
    1140:	18 96       	adiw	r26, 0x08	; 8
    1142:	8c 91       	ld	r24, X
    1144:	18 97       	sbiw	r26, 0x08	; 8
		if(RTC.CNT > RSSI_MAX_COUNT)
		break;
					
	}while(READ_RSSI_PIN());
				
	do{  //Wait until we have a "High" signal on the RSSI (wait for this ____/----)
    1146:	82 ff       	sbrs	r24, 2
    1148:	f0 cf       	rjmp	.-32     	; 0x112a <main+0x2f2>
					
		if(RTC.CNT > RSSI_MAX_COUNT)
		break;
	}while(!READ_RSSI_PIN());
				
	RTC.CNT = 0;  //Start counting
    114a:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    114e:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
				
	do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
		_delay_us(50);
					
		if(RTC.CNT > RSSI_MAX_COUNT)
    1152:	e0 e0       	ldi	r30, 0x00	; 0
    1154:	f4 e0       	ldi	r31, 0x04	; 4
		break;
	}while(READ_RSSI_PIN());
    1156:	a0 e0       	ldi	r26, 0x00	; 0
    1158:	b6 e0       	ldi	r27, 0x06	; 6
    115a:	8f e8       	ldi	r24, 0x8F	; 143
    115c:	91 e0       	ldi	r25, 0x01	; 1
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	f1 f7       	brne	.-4      	; 0x115e <main+0x326>
    1162:	00 c0       	rjmp	.+0      	; 0x1164 <main+0x32c>
    1164:	00 00       	nop
	RTC.CNT = 0;  //Start counting
				
	do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
		_delay_us(50);
					
		if(RTC.CNT > RSSI_MAX_COUNT)
    1166:	80 85       	ldd	r24, Z+8	; 0x08
    1168:	91 85       	ldd	r25, Z+9	; 0x09
    116a:	82 31       	cpi	r24, 0x12	; 18
    116c:	91 40       	sbci	r25, 0x01	; 1
    116e:	28 f4       	brcc	.+10     	; 0x117a <main+0x342>
		break;
	}while(READ_RSSI_PIN());
    1170:	18 96       	adiw	r26, 0x08	; 8
    1172:	8c 91       	ld	r24, X
    1174:	18 97       	sbiw	r26, 0x08	; 8
		break;
	}while(!READ_RSSI_PIN());
				
	RTC.CNT = 0;  //Start counting
				
	do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
    1176:	82 fd       	sbrc	r24, 2
    1178:	f0 cf       	rjmp	.-32     	; 0x115a <main+0x322>
					
		if(RTC.CNT > RSSI_MAX_COUNT)
		break;
	}while(READ_RSSI_PIN());
				
	RSSI.countDifference = RTC.CNT;
    117a:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    117e:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
    1182:	e3 e2       	ldi	r30, 0x23	; 35
    1184:	f1 e2       	ldi	r31, 0x21	; 33
    1186:	84 83       	std	Z+4, r24	; 0x04
    1188:	95 83       	std	Z+5, r25	; 0x05
	
	RSSI.value = (100 * RSSI.countDifference) / RSSI_MAX_COUNT;
    118a:	24 81       	ldd	r18, Z+4	; 0x04
    118c:	35 81       	ldd	r19, Z+5	; 0x05
    118e:	44 e6       	ldi	r20, 0x64	; 100
    1190:	42 9f       	mul	r20, r18
    1192:	c0 01       	movw	r24, r0
    1194:	43 9f       	mul	r20, r19
    1196:	90 0d       	add	r25, r0
    1198:	11 24       	eor	r1, r1
    119a:	61 e1       	ldi	r22, 0x11	; 17
    119c:	71 e0       	ldi	r23, 0x01	; 1
    119e:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__udivmodhi4>
    11a2:	60 83       	st	Z, r22
				
	RSSI.sampleCount++;
    11a4:	86 81       	ldd	r24, Z+6	; 0x06
    11a6:	97 81       	ldd	r25, Z+7	; 0x07
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	86 83       	std	Z+6, r24	; 0x06
    11ac:	97 83       	std	Z+7, r25	; 0x07
	
	return RSSI.countDifference;
    11ae:	84 81       	ldd	r24, Z+4	; 0x04
    11b0:	95 81       	ldd	r25, Z+5	; 0x05
			
			
			//Actually output the desired values
			//Not the most elegant code in the world, but it works...
			
			SendFloatPC(electronicsBatteryVoltage);	//Send the battery voltage
    11b2:	c7 01       	movw	r24, r14
    11b4:	b6 01       	movw	r22, r12
    11b6:	0e 94 b7 09 	call	0x136e	; 0x136e <_Z11SendFloatPCd>
			SendStringPC("|");
    11ba:	83 ee       	ldi	r24, 0xE3	; 227
    11bc:	90 e2       	ldi	r25, 0x20	; 32
    11be:	0e 94 75 09 	call	0x12ea	; 0x12ea <_Z12SendStringPCPKc>
			if(rearBatteryVoltage < 0)
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	a9 01       	movw	r20, r18
    11c8:	c5 01       	movw	r24, r10
    11ca:	b4 01       	movw	r22, r8
    11cc:	0e 94 a7 0a 	call	0x154e	; 0x154e <__cmpsf2>
    11d0:	88 23       	and	r24, r24
    11d2:	34 f4       	brge	.+12     	; 0x11e0 <main+0x3a8>
				SendFloatPC((double) 0);
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	70 e0       	ldi	r23, 0x00	; 0
    11d8:	cb 01       	movw	r24, r22
    11da:	0e 94 b7 09 	call	0x136e	; 0x136e <_Z11SendFloatPCd>
    11de:	04 c0       	rjmp	.+8      	; 0x11e8 <main+0x3b0>
			else
				SendFloatPC(rearBatteryVoltage);		//Send the rear battery voltage
    11e0:	c5 01       	movw	r24, r10
    11e2:	b4 01       	movw	r22, r8
    11e4:	0e 94 b7 09 	call	0x136e	; 0x136e <_Z11SendFloatPCd>
			SendStringPC("|");
    11e8:	83 ee       	ldi	r24, 0xE3	; 227
    11ea:	90 e2       	ldi	r25, 0x20	; 32
    11ec:	0e 94 75 09 	call	0x12ea	; 0x12ea <_Z12SendStringPCPKc>
			SendFloatPC(EBoxTemp);	//Send the EBox Temperature
    11f0:	69 81       	ldd	r22, Y+1	; 0x01
    11f2:	7a 81       	ldd	r23, Y+2	; 0x02
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	0e 94 b7 09 	call	0x136e	; 0x136e <_Z11SendFloatPCd>
			SendStringPC("|");
    11fc:	83 ee       	ldi	r24, 0xE3	; 227
    11fe:	90 e2       	ldi	r25, 0x20	; 32
    1200:	0e 94 75 09 	call	0x12ea	; 0x12ea <_Z12SendStringPCPKc>
			SendFloatPC(sysCurrent);		//Send 5v_SYS Curr
    1204:	6d 81       	ldd	r22, Y+5	; 0x05
    1206:	7e 81       	ldd	r23, Y+6	; 0x06
    1208:	8f 81       	ldd	r24, Y+7	; 0x07
    120a:	98 85       	ldd	r25, Y+8	; 0x08
    120c:	0e 94 b7 09 	call	0x136e	; 0x136e <_Z11SendFloatPCd>
			SendStringPC("|");
    1210:	83 ee       	ldi	r24, 0xE3	; 227
    1212:	90 e2       	ldi	r25, 0x20	; 32
    1214:	0e 94 75 09 	call	0x12ea	; 0x12ea <_Z12SendStringPCPKc>
			SendFloatPC(compCurrent);		//Send computer Curr (RPi)
    1218:	69 85       	ldd	r22, Y+9	; 0x09
    121a:	7a 85       	ldd	r23, Y+10	; 0x0a
    121c:	8b 85       	ldd	r24, Y+11	; 0x0b
    121e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1220:	0e 94 b7 09 	call	0x136e	; 0x136e <_Z11SendFloatPCd>
			SendStringPC("|");
    1224:	83 ee       	ldi	r24, 0xE3	; 227
    1226:	90 e2       	ldi	r25, 0x20	; 32
    1228:	0e 94 75 09 	call	0x12ea	; 0x12ea <_Z12SendStringPCPKc>
			SendFloatPC(throttleCurrent);
    122c:	6d 85       	ldd	r22, Y+13	; 0x0d
    122e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1230:	8f 85       	ldd	r24, Y+15	; 0x0f
    1232:	98 89       	ldd	r25, Y+16	; 0x10
    1234:	0e 94 b7 09 	call	0x136e	; 0x136e <_Z11SendFloatPCd>
			SendStringPC("|");
    1238:	83 ee       	ldi	r24, 0xE3	; 227
    123a:	90 e2       	ldi	r25, 0x20	; 32
    123c:	0e 94 75 09 	call	0x12ea	; 0x12ea <_Z12SendStringPCPKc>
			SendNumPC(RSSI.value);
    1240:	0f 2e       	mov	r0, r31
    1242:	f3 e2       	ldi	r31, 0x23	; 35
    1244:	ef 2e       	mov	r14, r31
    1246:	f1 e2       	ldi	r31, 0x21	; 33
    1248:	ff 2e       	mov	r15, r31
    124a:	f0 2d       	mov	r31, r0
    124c:	f7 01       	movw	r30, r14
    124e:	80 81       	ld	r24, Z
    1250:	0e 94 88 09 	call	0x1310	; 0x1310 <_Z9SendNumPCh>
			if(RSSI.value == 0)
    1254:	f7 01       	movw	r30, r14
    1256:	80 81       	ld	r24, Z
    1258:	81 11       	cpse	r24, r1
    125a:	04 c0       	rjmp	.+8      	; 0x1264 <main+0x42c>
				SendStringPC("0");
    125c:	85 ee       	ldi	r24, 0xE5	; 229
    125e:	90 e2       	ldi	r25, 0x20	; 32
    1260:	0e 94 75 09 	call	0x12ea	; 0x12ea <_Z12SendStringPCPKc>
			SendStringPC((char *)"|");
    1264:	83 ee       	ldi	r24, 0xE3	; 227
    1266:	90 e2       	ldi	r25, 0x20	; 32
    1268:	0e 94 65 09 	call	0x12ca	; 0x12ca <_Z12SendStringPCPc>
			SendNumPC(remoteInput);
    126c:	80 91 22 21 	lds	r24, 0x2122	; 0x802122 <remoteInput>
    1270:	0e 94 88 09 	call	0x1310	; 0x1310 <_Z9SendNumPCh>
			//SendStringPC((char *)"|");
			
			debuggingOutput();
			
			//Newline
			SendStringPC((char *)"\n\r");
    1274:	80 ee       	ldi	r24, 0xE0	; 224
    1276:	90 e2       	ldi	r25, 0x20	; 32
    1278:	0e 94 65 09 	call	0x12ca	; 0x12ca <_Z12SendStringPCPc>
	
			//Check if we have outputs that need to "expire"
			if(--remoteOutputCountdown == 0){
    127c:	80 91 21 21 	lds	r24, 0x2121	; 0x802121 <remoteOutputCountdown>
    1280:	81 50       	subi	r24, 0x01	; 1
    1282:	80 93 21 21 	sts	0x2121, r24	; 0x802121 <remoteOutputCountdown>
    1286:	81 11       	cpse	r24, r1
    1288:	02 c0       	rjmp	.+4      	; 0x128e <main+0x456>
				remoteInput = 0;
    128a:	10 92 22 21 	sts	0x2122, r1	; 0x802122 <remoteInput>
			}
			
			//Check on the output overriding
			if(pixhawkOverrideCountdown){	//If we are still counting down, this also means that
    128e:	80 91 1e 21 	lds	r24, 0x211E	; 0x80211e <pixhawkOverrideCountdown>
    1292:	90 91 1f 21 	lds	r25, 0x211F	; 0x80211f <pixhawkOverrideCountdown+0x1>
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	31 f0       	breq	.+12     	; 0x12a6 <main+0x46e>
											//we are currently overriding our output
				--pixhawkOverrideCountdown;	//Decrement our counter
    129a:	01 97       	sbiw	r24, 0x01	; 1
    129c:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <pixhawkOverrideCountdown>
    12a0:	90 93 1f 21 	sts	0x211F, r25	; 0x80211f <pixhawkOverrideCountdown+0x1>
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <main+0x472>
			}
			else {	//If we are not counting down, then we want to ensure we are outputting the Pixhawk PWM
				pixhawkOverride = 0;
    12a6:	10 92 20 21 	sts	0x2120, r1	; 0x802120 <pixhawkOverride>
			}
	
			//Check the updating speed setting
			//The speed shouldn't be set lower than maybe 75mS due to RSSI processing time
			//Be careful if you change these, as they are referenced elsewhere (e.g. Override controls)
			if(CHECK_DIP_SW_1()){
    12aa:	f3 01       	movw	r30, r6
    12ac:	80 85       	ldd	r24, Z+8	; 0x08
    12ae:	83 fd       	sbrc	r24, 3
    12b0:	06 c0       	rjmp	.+12     	; 0x12be <main+0x486>
				TCC4.PER = TC_1024_100MS;  //100mS delay
    12b2:	85 e3       	ldi	r24, 0x35	; 53
    12b4:	9c e0       	ldi	r25, 0x0C	; 12
    12b6:	f1 01       	movw	r30, r2
    12b8:	86 a3       	std	Z+38, r24	; 0x26
    12ba:	97 a3       	std	Z+39, r25	; 0x27
    12bc:	1c ce       	rjmp	.-968    	; 0xef6 <main+0xbe>
			}
			else{
				TCC4.PER = TC_1024_500MS;  //500mS delay
    12be:	89 e0       	ldi	r24, 0x09	; 9
    12c0:	9d e3       	ldi	r25, 0x3D	; 61
    12c2:	f1 01       	movw	r30, r2
    12c4:	86 a3       	std	Z+38, r24	; 0x26
    12c6:	97 a3       	std	Z+39, r25	; 0x27
    12c8:	16 ce       	rjmp	.-980    	; 0xef6 <main+0xbe>

000012ca <_Z12SendStringPCPc>:
		sprintf(buffer,"%lx%lx", tempMSB, tempLSB);		
	else
		sprintf(buffer,"%lx", tempLSB);		
	
	SendStringPC(buffer);
}
    12ca:	fc 01       	movw	r30, r24
    12cc:	20 81       	ld	r18, Z
    12ce:	22 23       	and	r18, r18
    12d0:	59 f0       	breq	.+22     	; 0x12e8 <_Z12SendStringPCPc+0x1e>
    12d2:	dc 01       	movw	r26, r24
    12d4:	11 96       	adiw	r26, 0x01	; 1
    12d6:	e0 ec       	ldi	r30, 0xC0	; 192
    12d8:	f8 e0       	ldi	r31, 0x08	; 8
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	95 ff       	sbrs	r25, 5
    12de:	fd cf       	rjmp	.-6      	; 0x12da <_Z12SendStringPCPc+0x10>
    12e0:	20 83       	st	Z, r18
    12e2:	2d 91       	ld	r18, X+
    12e4:	21 11       	cpse	r18, r1
    12e6:	f9 cf       	rjmp	.-14     	; 0x12da <_Z12SendStringPCPc+0x10>
    12e8:	08 95       	ret

000012ea <_Z12SendStringPCPKc>:
    12ea:	fc 01       	movw	r30, r24
    12ec:	20 81       	ld	r18, Z
    12ee:	22 23       	and	r18, r18
    12f0:	59 f0       	breq	.+22     	; 0x1308 <_Z12SendStringPCPKc+0x1e>
    12f2:	dc 01       	movw	r26, r24
    12f4:	11 96       	adiw	r26, 0x01	; 1
    12f6:	e0 ec       	ldi	r30, 0xC0	; 192
    12f8:	f8 e0       	ldi	r31, 0x08	; 8
    12fa:	91 81       	ldd	r25, Z+1	; 0x01
    12fc:	95 ff       	sbrs	r25, 5
    12fe:	fd cf       	rjmp	.-6      	; 0x12fa <_Z12SendStringPCPKc+0x10>
    1300:	20 83       	st	Z, r18
    1302:	2d 91       	ld	r18, X+
    1304:	21 11       	cpse	r18, r1
    1306:	f9 cf       	rjmp	.-14     	; 0x12fa <_Z12SendStringPCPKc+0x10>
    1308:	08 95       	ret

0000130a <_Z13SendCharONOFFc>:
    130a:	80 93 c0 09 	sts	0x09C0, r24	; 0x8009c0 <__TEXT_REGION_LENGTH__+0x7009c0>
    130e:	08 95       	ret

00001310 <_Z9SendNumPCh>:
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	2a 97       	sbiw	r28, 0x0a	; 10
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	4a e0       	ldi	r20, 0x0A	; 10
    1320:	be 01       	movw	r22, r28
    1322:	6f 5f       	subi	r22, 0xFF	; 255
    1324:	7f 4f       	sbci	r23, 0xFF	; 255
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__itoa_ncheck>
    132c:	ce 01       	movw	r24, r28
    132e:	01 96       	adiw	r24, 0x01	; 1
    1330:	0e 94 65 09 	call	0x12ca	; 0x12ca <_Z12SendStringPCPc>
    1334:	2a 96       	adiw	r28, 0x0a	; 10
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	08 95       	ret

00001340 <_Z9SendNumPCi>:
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	64 97       	sbiw	r28, 0x14	; 20
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	4a e0       	ldi	r20, 0x0A	; 10
    1350:	be 01       	movw	r22, r28
    1352:	6f 5f       	subi	r22, 0xFF	; 255
    1354:	7f 4f       	sbci	r23, 0xFF	; 255
    1356:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__itoa_ncheck>
    135a:	ce 01       	movw	r24, r28
    135c:	01 96       	adiw	r24, 0x01	; 1
    135e:	0e 94 65 09 	call	0x12ca	; 0x12ca <_Z12SendStringPCPc>
    1362:	64 96       	adiw	r28, 0x14	; 20
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	de bf       	out	0x3e, r29	; 62
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	08 95       	ret

0000136e <_Z11SendFloatPCd>:

void SendFloatPC(double numToSend){
    136e:	8f 92       	push	r8
    1370:	9f 92       	push	r9
    1372:	af 92       	push	r10
    1374:	bf 92       	push	r11
    1376:	cf 92       	push	r12
    1378:	df 92       	push	r13
    137a:	ef 92       	push	r14
    137c:	ff 92       	push	r15
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	c4 56       	subi	r28, 0x64	; 100
    138c:	d1 09       	sbc	r29, r1
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	4b 01       	movw	r8, r22
    1394:	5c 01       	movw	r10, r24
	char buffer[100];
	
	int d1 = numToSend;
    1396:	0e 94 1e 0b 	call	0x163c	; 0x163c <__fixsfsi>
    139a:	6b 01       	movw	r12, r22
    139c:	7c 01       	movw	r14, r24
	float f2 = numToSend - d1;
    139e:	07 2e       	mov	r0, r23
    13a0:	00 0c       	add	r0, r0
    13a2:	88 0b       	sbc	r24, r24
    13a4:	99 0b       	sbc	r25, r25
    13a6:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__floatsisf>
    13aa:	9b 01       	movw	r18, r22
    13ac:	ac 01       	movw	r20, r24
    13ae:	c5 01       	movw	r24, r10
    13b0:	b4 01       	movw	r22, r8
    13b2:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__subsf3>
	int d2 = trunc(f2 * 10000);
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e4       	ldi	r19, 0x40	; 64
    13ba:	4c e1       	ldi	r20, 0x1C	; 28
    13bc:	56 e4       	ldi	r21, 0x46	; 70
    13be:	0e 94 06 0c 	call	0x180c	; 0x180c <__mulsf3>
    13c2:	0e 94 c3 0c 	call	0x1986	; 0x1986 <trunc>
    13c6:	0e 94 1e 0b 	call	0x163c	; 0x163c <__fixsfsi>
	
	sprintf(buffer, "%d.%04d", d1, abs(d2));
    13ca:	9b 01       	movw	r18, r22
    13cc:	77 23       	and	r23, r23
    13ce:	24 f4       	brge	.+8      	; 0x13d8 <_Z11SendFloatPCd+0x6a>
    13d0:	22 27       	eor	r18, r18
    13d2:	33 27       	eor	r19, r19
    13d4:	26 1b       	sub	r18, r22
    13d6:	37 0b       	sbc	r19, r23
    13d8:	3f 93       	push	r19
    13da:	2f 93       	push	r18
    13dc:	df 92       	push	r13
    13de:	cf 92       	push	r12
    13e0:	8e ee       	ldi	r24, 0xEE	; 238
    13e2:	90 e2       	ldi	r25, 0x20	; 32
    13e4:	9f 93       	push	r25
    13e6:	8f 93       	push	r24
    13e8:	8e 01       	movw	r16, r28
    13ea:	0f 5f       	subi	r16, 0xFF	; 255
    13ec:	1f 4f       	sbci	r17, 0xFF	; 255
    13ee:	1f 93       	push	r17
    13f0:	0f 93       	push	r16
    13f2:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <sprintf>
	
	//sprintf(buffer, "%f", numToSend);
	SendStringPC(buffer);
    13f6:	c8 01       	movw	r24, r16
    13f8:	0e 94 65 09 	call	0x12ca	; 0x12ca <_Z12SendStringPCPc>
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	de bf       	out	0x3e, r29	; 62
}
    1400:	cc 59       	subi	r28, 0x9C	; 156
    1402:	df 4f       	sbci	r29, 0xFF	; 255
    1404:	cd bf       	out	0x3d, r28	; 61
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	ff 90       	pop	r15
    1412:	ef 90       	pop	r14
    1414:	df 90       	pop	r13
    1416:	cf 90       	pop	r12
    1418:	bf 90       	pop	r11
    141a:	af 90       	pop	r10
    141c:	9f 90       	pop	r9
    141e:	8f 90       	pop	r8
    1420:	08 95       	ret

00001422 <_Z14configureUSARTv>:

void configureUSART(void){
	/**** ENABLE COMUPTER USART ****/
	
	//Set TX (pin7) to be output
	PORTC.DIRSET = PIN7_bm;
    1422:	e0 e4       	ldi	r30, 0x40	; 64
    1424:	f6 e0       	ldi	r31, 0x06	; 6
    1426:	40 e8       	ldi	r20, 0x80	; 128
    1428:	41 83       	std	Z+1, r20	; 0x01
	//Set RX (pin6) to be input
	PORTC.DIRCLR = PIN6_bm;
    142a:	30 e4       	ldi	r19, 0x40	; 64
    142c:	32 83       	std	Z+2, r19	; 0x02
	
	//Enable alternate pin location for USART0 in PORTC
	PORTC.REMAP |= (1 << 4);
    142e:	86 85       	ldd	r24, Z+14	; 0x0e
    1430:	80 61       	ori	r24, 0x10	; 16
    1432:	86 87       	std	Z+14, r24	; 0x0e
	
	USART_Format_Set(&COMP_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
    1434:	e0 ec       	ldi	r30, 0xC0	; 192
    1436:	f8 e0       	ldi	r31, 0x08	; 8
    1438:	23 e0       	ldi	r18, 0x03	; 3
    143a:	24 83       	std	Z+4, r18	; 0x04
	
	//Enable a 57600 baudrate
	USART_Baudrate_Set(&COMP_USART, 34, 0);
    143c:	92 e2       	ldi	r25, 0x22	; 34
    143e:	96 83       	std	Z+6, r25	; 0x06
    1440:	17 82       	std	Z+7, r1	; 0x07
	
	// Enable both RX and TX.
	USART_Rx_Enable(&COMP_USART);
    1442:	83 81       	ldd	r24, Z+3	; 0x03
    1444:	80 61       	ori	r24, 0x10	; 16
    1446:	83 83       	std	Z+3, r24	; 0x03
	USART_Tx_Enable(&COMP_USART);
    1448:	83 81       	ldd	r24, Z+3	; 0x03
    144a:	88 60       	ori	r24, 0x08	; 8
    144c:	83 83       	std	Z+3, r24	; 0x03
	
	/**** ENABLE ON/OFF SWITCH USART ****/
	
	//Set TX (pin7) to be output
	PORTD.DIRSET = PIN7_bm;
    144e:	e0 e6       	ldi	r30, 0x60	; 96
    1450:	f6 e0       	ldi	r31, 0x06	; 6
    1452:	41 83       	std	Z+1, r20	; 0x01
	//Set RX (pin6) to be input
	PORTD.DIRCLR = PIN6_bm;
    1454:	32 83       	std	Z+2, r19	; 0x02
	
	//Enable alternate pin location for USART0 in PORTC
	PORTD.REMAP |= (1 << 4);
    1456:	86 85       	ldd	r24, Z+14	; 0x0e
    1458:	80 61       	ori	r24, 0x10	; 16
    145a:	86 87       	std	Z+14, r24	; 0x0e
	
	USART_Format_Set(&ONOFF_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
    145c:	e0 ec       	ldi	r30, 0xC0	; 192
    145e:	f9 e0       	ldi	r31, 0x09	; 9
    1460:	24 83       	std	Z+4, r18	; 0x04
	
	//Enable a 57600 baudrate
	USART_Baudrate_Set(&ONOFF_USART, 34, 0);
    1462:	96 83       	std	Z+6, r25	; 0x06
    1464:	17 82       	std	Z+7, r1	; 0x07
	
	// Enable both RX and TX.
	USART_Rx_Enable(&ONOFF_USART);
    1466:	83 81       	ldd	r24, Z+3	; 0x03
    1468:	80 61       	ori	r24, 0x10	; 16
    146a:	83 83       	std	Z+3, r24	; 0x03
	USART_Tx_Enable(&ONOFF_USART);
    146c:	83 81       	ldd	r24, Z+3	; 0x03
    146e:	88 60       	ori	r24, 0x08	; 8
    1470:	83 83       	std	Z+3, r24	; 0x03
    1472:	08 95       	ret

00001474 <__subsf3>:
    1474:	50 58       	subi	r21, 0x80	; 128

00001476 <__addsf3>:
    1476:	bb 27       	eor	r27, r27
    1478:	aa 27       	eor	r26, r26
    147a:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__addsf3x>
    147e:	0c 94 cc 0b 	jmp	0x1798	; 0x1798 <__fp_round>
    1482:	0e 94 be 0b 	call	0x177c	; 0x177c <__fp_pscA>
    1486:	38 f0       	brcs	.+14     	; 0x1496 <__addsf3+0x20>
    1488:	0e 94 c5 0b 	call	0x178a	; 0x178a <__fp_pscB>
    148c:	20 f0       	brcs	.+8      	; 0x1496 <__addsf3+0x20>
    148e:	39 f4       	brne	.+14     	; 0x149e <__addsf3+0x28>
    1490:	9f 3f       	cpi	r25, 0xFF	; 255
    1492:	19 f4       	brne	.+6      	; 0x149a <__addsf3+0x24>
    1494:	26 f4       	brtc	.+8      	; 0x149e <__addsf3+0x28>
    1496:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__fp_nan>
    149a:	0e f4       	brtc	.+2      	; 0x149e <__addsf3+0x28>
    149c:	e0 95       	com	r30
    149e:	e7 fb       	bst	r30, 7
    14a0:	0c 94 b5 0b 	jmp	0x176a	; 0x176a <__fp_inf>

000014a4 <__addsf3x>:
    14a4:	e9 2f       	mov	r30, r25
    14a6:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__fp_split3>
    14aa:	58 f3       	brcs	.-42     	; 0x1482 <__addsf3+0xc>
    14ac:	ba 17       	cp	r27, r26
    14ae:	62 07       	cpc	r22, r18
    14b0:	73 07       	cpc	r23, r19
    14b2:	84 07       	cpc	r24, r20
    14b4:	95 07       	cpc	r25, r21
    14b6:	20 f0       	brcs	.+8      	; 0x14c0 <__addsf3x+0x1c>
    14b8:	79 f4       	brne	.+30     	; 0x14d8 <__addsf3x+0x34>
    14ba:	a6 f5       	brtc	.+104    	; 0x1524 <__addsf3x+0x80>
    14bc:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__fp_zero>
    14c0:	0e f4       	brtc	.+2      	; 0x14c4 <__addsf3x+0x20>
    14c2:	e0 95       	com	r30
    14c4:	0b 2e       	mov	r0, r27
    14c6:	ba 2f       	mov	r27, r26
    14c8:	a0 2d       	mov	r26, r0
    14ca:	0b 01       	movw	r0, r22
    14cc:	b9 01       	movw	r22, r18
    14ce:	90 01       	movw	r18, r0
    14d0:	0c 01       	movw	r0, r24
    14d2:	ca 01       	movw	r24, r20
    14d4:	a0 01       	movw	r20, r0
    14d6:	11 24       	eor	r1, r1
    14d8:	ff 27       	eor	r31, r31
    14da:	59 1b       	sub	r21, r25
    14dc:	99 f0       	breq	.+38     	; 0x1504 <__addsf3x+0x60>
    14de:	59 3f       	cpi	r21, 0xF9	; 249
    14e0:	50 f4       	brcc	.+20     	; 0x14f6 <__addsf3x+0x52>
    14e2:	50 3e       	cpi	r21, 0xE0	; 224
    14e4:	68 f1       	brcs	.+90     	; 0x1540 <__addsf3x+0x9c>
    14e6:	1a 16       	cp	r1, r26
    14e8:	f0 40       	sbci	r31, 0x00	; 0
    14ea:	a2 2f       	mov	r26, r18
    14ec:	23 2f       	mov	r18, r19
    14ee:	34 2f       	mov	r19, r20
    14f0:	44 27       	eor	r20, r20
    14f2:	58 5f       	subi	r21, 0xF8	; 248
    14f4:	f3 cf       	rjmp	.-26     	; 0x14dc <__addsf3x+0x38>
    14f6:	46 95       	lsr	r20
    14f8:	37 95       	ror	r19
    14fa:	27 95       	ror	r18
    14fc:	a7 95       	ror	r26
    14fe:	f0 40       	sbci	r31, 0x00	; 0
    1500:	53 95       	inc	r21
    1502:	c9 f7       	brne	.-14     	; 0x14f6 <__addsf3x+0x52>
    1504:	7e f4       	brtc	.+30     	; 0x1524 <__addsf3x+0x80>
    1506:	1f 16       	cp	r1, r31
    1508:	ba 0b       	sbc	r27, r26
    150a:	62 0b       	sbc	r22, r18
    150c:	73 0b       	sbc	r23, r19
    150e:	84 0b       	sbc	r24, r20
    1510:	ba f0       	brmi	.+46     	; 0x1540 <__addsf3x+0x9c>
    1512:	91 50       	subi	r25, 0x01	; 1
    1514:	a1 f0       	breq	.+40     	; 0x153e <__addsf3x+0x9a>
    1516:	ff 0f       	add	r31, r31
    1518:	bb 1f       	adc	r27, r27
    151a:	66 1f       	adc	r22, r22
    151c:	77 1f       	adc	r23, r23
    151e:	88 1f       	adc	r24, r24
    1520:	c2 f7       	brpl	.-16     	; 0x1512 <__addsf3x+0x6e>
    1522:	0e c0       	rjmp	.+28     	; 0x1540 <__addsf3x+0x9c>
    1524:	ba 0f       	add	r27, r26
    1526:	62 1f       	adc	r22, r18
    1528:	73 1f       	adc	r23, r19
    152a:	84 1f       	adc	r24, r20
    152c:	48 f4       	brcc	.+18     	; 0x1540 <__addsf3x+0x9c>
    152e:	87 95       	ror	r24
    1530:	77 95       	ror	r23
    1532:	67 95       	ror	r22
    1534:	b7 95       	ror	r27
    1536:	f7 95       	ror	r31
    1538:	9e 3f       	cpi	r25, 0xFE	; 254
    153a:	08 f0       	brcs	.+2      	; 0x153e <__addsf3x+0x9a>
    153c:	b0 cf       	rjmp	.-160    	; 0x149e <__addsf3+0x28>
    153e:	93 95       	inc	r25
    1540:	88 0f       	add	r24, r24
    1542:	08 f0       	brcs	.+2      	; 0x1546 <__addsf3x+0xa2>
    1544:	99 27       	eor	r25, r25
    1546:	ee 0f       	add	r30, r30
    1548:	97 95       	ror	r25
    154a:	87 95       	ror	r24
    154c:	08 95       	ret

0000154e <__cmpsf2>:
    154e:	0e 94 91 0b 	call	0x1722	; 0x1722 <__fp_cmp>
    1552:	08 f4       	brcc	.+2      	; 0x1556 <__cmpsf2+0x8>
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	08 95       	ret

00001558 <__divsf3>:
    1558:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__divsf3x>
    155c:	0c 94 cc 0b 	jmp	0x1798	; 0x1798 <__fp_round>
    1560:	0e 94 c5 0b 	call	0x178a	; 0x178a <__fp_pscB>
    1564:	58 f0       	brcs	.+22     	; 0x157c <__divsf3+0x24>
    1566:	0e 94 be 0b 	call	0x177c	; 0x177c <__fp_pscA>
    156a:	40 f0       	brcs	.+16     	; 0x157c <__divsf3+0x24>
    156c:	29 f4       	brne	.+10     	; 0x1578 <__divsf3+0x20>
    156e:	5f 3f       	cpi	r21, 0xFF	; 255
    1570:	29 f0       	breq	.+10     	; 0x157c <__divsf3+0x24>
    1572:	0c 94 b5 0b 	jmp	0x176a	; 0x176a <__fp_inf>
    1576:	51 11       	cpse	r21, r1
    1578:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__fp_szero>
    157c:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__fp_nan>

00001580 <__divsf3x>:
    1580:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__fp_split3>
    1584:	68 f3       	brcs	.-38     	; 0x1560 <__divsf3+0x8>

00001586 <__divsf3_pse>:
    1586:	99 23       	and	r25, r25
    1588:	b1 f3       	breq	.-20     	; 0x1576 <__divsf3+0x1e>
    158a:	55 23       	and	r21, r21
    158c:	91 f3       	breq	.-28     	; 0x1572 <__divsf3+0x1a>
    158e:	95 1b       	sub	r25, r21
    1590:	55 0b       	sbc	r21, r21
    1592:	bb 27       	eor	r27, r27
    1594:	aa 27       	eor	r26, r26
    1596:	62 17       	cp	r22, r18
    1598:	73 07       	cpc	r23, r19
    159a:	84 07       	cpc	r24, r20
    159c:	38 f0       	brcs	.+14     	; 0x15ac <__divsf3_pse+0x26>
    159e:	9f 5f       	subi	r25, 0xFF	; 255
    15a0:	5f 4f       	sbci	r21, 0xFF	; 255
    15a2:	22 0f       	add	r18, r18
    15a4:	33 1f       	adc	r19, r19
    15a6:	44 1f       	adc	r20, r20
    15a8:	aa 1f       	adc	r26, r26
    15aa:	a9 f3       	breq	.-22     	; 0x1596 <__divsf3_pse+0x10>
    15ac:	35 d0       	rcall	.+106    	; 0x1618 <__divsf3_pse+0x92>
    15ae:	0e 2e       	mov	r0, r30
    15b0:	3a f0       	brmi	.+14     	; 0x15c0 <__divsf3_pse+0x3a>
    15b2:	e0 e8       	ldi	r30, 0x80	; 128
    15b4:	32 d0       	rcall	.+100    	; 0x161a <__divsf3_pse+0x94>
    15b6:	91 50       	subi	r25, 0x01	; 1
    15b8:	50 40       	sbci	r21, 0x00	; 0
    15ba:	e6 95       	lsr	r30
    15bc:	00 1c       	adc	r0, r0
    15be:	ca f7       	brpl	.-14     	; 0x15b2 <__divsf3_pse+0x2c>
    15c0:	2b d0       	rcall	.+86     	; 0x1618 <__divsf3_pse+0x92>
    15c2:	fe 2f       	mov	r31, r30
    15c4:	29 d0       	rcall	.+82     	; 0x1618 <__divsf3_pse+0x92>
    15c6:	66 0f       	add	r22, r22
    15c8:	77 1f       	adc	r23, r23
    15ca:	88 1f       	adc	r24, r24
    15cc:	bb 1f       	adc	r27, r27
    15ce:	26 17       	cp	r18, r22
    15d0:	37 07       	cpc	r19, r23
    15d2:	48 07       	cpc	r20, r24
    15d4:	ab 07       	cpc	r26, r27
    15d6:	b0 e8       	ldi	r27, 0x80	; 128
    15d8:	09 f0       	breq	.+2      	; 0x15dc <__divsf3_pse+0x56>
    15da:	bb 0b       	sbc	r27, r27
    15dc:	80 2d       	mov	r24, r0
    15de:	bf 01       	movw	r22, r30
    15e0:	ff 27       	eor	r31, r31
    15e2:	93 58       	subi	r25, 0x83	; 131
    15e4:	5f 4f       	sbci	r21, 0xFF	; 255
    15e6:	3a f0       	brmi	.+14     	; 0x15f6 <__divsf3_pse+0x70>
    15e8:	9e 3f       	cpi	r25, 0xFE	; 254
    15ea:	51 05       	cpc	r21, r1
    15ec:	78 f0       	brcs	.+30     	; 0x160c <__divsf3_pse+0x86>
    15ee:	0c 94 b5 0b 	jmp	0x176a	; 0x176a <__fp_inf>
    15f2:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__fp_szero>
    15f6:	5f 3f       	cpi	r21, 0xFF	; 255
    15f8:	e4 f3       	brlt	.-8      	; 0x15f2 <__divsf3_pse+0x6c>
    15fa:	98 3e       	cpi	r25, 0xE8	; 232
    15fc:	d4 f3       	brlt	.-12     	; 0x15f2 <__divsf3_pse+0x6c>
    15fe:	86 95       	lsr	r24
    1600:	77 95       	ror	r23
    1602:	67 95       	ror	r22
    1604:	b7 95       	ror	r27
    1606:	f7 95       	ror	r31
    1608:	9f 5f       	subi	r25, 0xFF	; 255
    160a:	c9 f7       	brne	.-14     	; 0x15fe <__divsf3_pse+0x78>
    160c:	88 0f       	add	r24, r24
    160e:	91 1d       	adc	r25, r1
    1610:	96 95       	lsr	r25
    1612:	87 95       	ror	r24
    1614:	97 f9       	bld	r25, 7
    1616:	08 95       	ret
    1618:	e1 e0       	ldi	r30, 0x01	; 1
    161a:	66 0f       	add	r22, r22
    161c:	77 1f       	adc	r23, r23
    161e:	88 1f       	adc	r24, r24
    1620:	bb 1f       	adc	r27, r27
    1622:	62 17       	cp	r22, r18
    1624:	73 07       	cpc	r23, r19
    1626:	84 07       	cpc	r24, r20
    1628:	ba 07       	cpc	r27, r26
    162a:	20 f0       	brcs	.+8      	; 0x1634 <__divsf3_pse+0xae>
    162c:	62 1b       	sub	r22, r18
    162e:	73 0b       	sbc	r23, r19
    1630:	84 0b       	sbc	r24, r20
    1632:	ba 0b       	sbc	r27, r26
    1634:	ee 1f       	adc	r30, r30
    1636:	88 f7       	brcc	.-30     	; 0x161a <__divsf3_pse+0x94>
    1638:	e0 95       	com	r30
    163a:	08 95       	ret

0000163c <__fixsfsi>:
    163c:	0e 94 25 0b 	call	0x164a	; 0x164a <__fixunssfsi>
    1640:	68 94       	set
    1642:	b1 11       	cpse	r27, r1
    1644:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__fp_szero>
    1648:	08 95       	ret

0000164a <__fixunssfsi>:
    164a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__fp_splitA>
    164e:	88 f0       	brcs	.+34     	; 0x1672 <__fixunssfsi+0x28>
    1650:	9f 57       	subi	r25, 0x7F	; 127
    1652:	98 f0       	brcs	.+38     	; 0x167a <__fixunssfsi+0x30>
    1654:	b9 2f       	mov	r27, r25
    1656:	99 27       	eor	r25, r25
    1658:	b7 51       	subi	r27, 0x17	; 23
    165a:	b0 f0       	brcs	.+44     	; 0x1688 <__fixunssfsi+0x3e>
    165c:	e1 f0       	breq	.+56     	; 0x1696 <__fixunssfsi+0x4c>
    165e:	66 0f       	add	r22, r22
    1660:	77 1f       	adc	r23, r23
    1662:	88 1f       	adc	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	1a f0       	brmi	.+6      	; 0x166e <__fixunssfsi+0x24>
    1668:	ba 95       	dec	r27
    166a:	c9 f7       	brne	.-14     	; 0x165e <__fixunssfsi+0x14>
    166c:	14 c0       	rjmp	.+40     	; 0x1696 <__fixunssfsi+0x4c>
    166e:	b1 30       	cpi	r27, 0x01	; 1
    1670:	91 f0       	breq	.+36     	; 0x1696 <__fixunssfsi+0x4c>
    1672:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__fp_zero>
    1676:	b1 e0       	ldi	r27, 0x01	; 1
    1678:	08 95       	ret
    167a:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__fp_zero>
    167e:	67 2f       	mov	r22, r23
    1680:	78 2f       	mov	r23, r24
    1682:	88 27       	eor	r24, r24
    1684:	b8 5f       	subi	r27, 0xF8	; 248
    1686:	39 f0       	breq	.+14     	; 0x1696 <__fixunssfsi+0x4c>
    1688:	b9 3f       	cpi	r27, 0xF9	; 249
    168a:	cc f3       	brlt	.-14     	; 0x167e <__fixunssfsi+0x34>
    168c:	86 95       	lsr	r24
    168e:	77 95       	ror	r23
    1690:	67 95       	ror	r22
    1692:	b3 95       	inc	r27
    1694:	d9 f7       	brne	.-10     	; 0x168c <__fixunssfsi+0x42>
    1696:	3e f4       	brtc	.+14     	; 0x16a6 <__fixunssfsi+0x5c>
    1698:	90 95       	com	r25
    169a:	80 95       	com	r24
    169c:	70 95       	com	r23
    169e:	61 95       	neg	r22
    16a0:	7f 4f       	sbci	r23, 0xFF	; 255
    16a2:	8f 4f       	sbci	r24, 0xFF	; 255
    16a4:	9f 4f       	sbci	r25, 0xFF	; 255
    16a6:	08 95       	ret

000016a8 <__floatunsisf>:
    16a8:	e8 94       	clt
    16aa:	09 c0       	rjmp	.+18     	; 0x16be <__floatsisf+0x12>

000016ac <__floatsisf>:
    16ac:	97 fb       	bst	r25, 7
    16ae:	3e f4       	brtc	.+14     	; 0x16be <__floatsisf+0x12>
    16b0:	90 95       	com	r25
    16b2:	80 95       	com	r24
    16b4:	70 95       	com	r23
    16b6:	61 95       	neg	r22
    16b8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ba:	8f 4f       	sbci	r24, 0xFF	; 255
    16bc:	9f 4f       	sbci	r25, 0xFF	; 255
    16be:	99 23       	and	r25, r25
    16c0:	a9 f0       	breq	.+42     	; 0x16ec <__floatsisf+0x40>
    16c2:	f9 2f       	mov	r31, r25
    16c4:	96 e9       	ldi	r25, 0x96	; 150
    16c6:	bb 27       	eor	r27, r27
    16c8:	93 95       	inc	r25
    16ca:	f6 95       	lsr	r31
    16cc:	87 95       	ror	r24
    16ce:	77 95       	ror	r23
    16d0:	67 95       	ror	r22
    16d2:	b7 95       	ror	r27
    16d4:	f1 11       	cpse	r31, r1
    16d6:	f8 cf       	rjmp	.-16     	; 0x16c8 <__floatsisf+0x1c>
    16d8:	fa f4       	brpl	.+62     	; 0x1718 <__floatsisf+0x6c>
    16da:	bb 0f       	add	r27, r27
    16dc:	11 f4       	brne	.+4      	; 0x16e2 <__floatsisf+0x36>
    16de:	60 ff       	sbrs	r22, 0
    16e0:	1b c0       	rjmp	.+54     	; 0x1718 <__floatsisf+0x6c>
    16e2:	6f 5f       	subi	r22, 0xFF	; 255
    16e4:	7f 4f       	sbci	r23, 0xFF	; 255
    16e6:	8f 4f       	sbci	r24, 0xFF	; 255
    16e8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ea:	16 c0       	rjmp	.+44     	; 0x1718 <__floatsisf+0x6c>
    16ec:	88 23       	and	r24, r24
    16ee:	11 f0       	breq	.+4      	; 0x16f4 <__floatsisf+0x48>
    16f0:	96 e9       	ldi	r25, 0x96	; 150
    16f2:	11 c0       	rjmp	.+34     	; 0x1716 <__floatsisf+0x6a>
    16f4:	77 23       	and	r23, r23
    16f6:	21 f0       	breq	.+8      	; 0x1700 <__floatsisf+0x54>
    16f8:	9e e8       	ldi	r25, 0x8E	; 142
    16fa:	87 2f       	mov	r24, r23
    16fc:	76 2f       	mov	r23, r22
    16fe:	05 c0       	rjmp	.+10     	; 0x170a <__floatsisf+0x5e>
    1700:	66 23       	and	r22, r22
    1702:	71 f0       	breq	.+28     	; 0x1720 <__floatsisf+0x74>
    1704:	96 e8       	ldi	r25, 0x86	; 134
    1706:	86 2f       	mov	r24, r22
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	2a f0       	brmi	.+10     	; 0x1718 <__floatsisf+0x6c>
    170e:	9a 95       	dec	r25
    1710:	66 0f       	add	r22, r22
    1712:	77 1f       	adc	r23, r23
    1714:	88 1f       	adc	r24, r24
    1716:	da f7       	brpl	.-10     	; 0x170e <__floatsisf+0x62>
    1718:	88 0f       	add	r24, r24
    171a:	96 95       	lsr	r25
    171c:	87 95       	ror	r24
    171e:	97 f9       	bld	r25, 7
    1720:	08 95       	ret

00001722 <__fp_cmp>:
    1722:	99 0f       	add	r25, r25
    1724:	00 08       	sbc	r0, r0
    1726:	55 0f       	add	r21, r21
    1728:	aa 0b       	sbc	r26, r26
    172a:	e0 e8       	ldi	r30, 0x80	; 128
    172c:	fe ef       	ldi	r31, 0xFE	; 254
    172e:	16 16       	cp	r1, r22
    1730:	17 06       	cpc	r1, r23
    1732:	e8 07       	cpc	r30, r24
    1734:	f9 07       	cpc	r31, r25
    1736:	c0 f0       	brcs	.+48     	; 0x1768 <__fp_cmp+0x46>
    1738:	12 16       	cp	r1, r18
    173a:	13 06       	cpc	r1, r19
    173c:	e4 07       	cpc	r30, r20
    173e:	f5 07       	cpc	r31, r21
    1740:	98 f0       	brcs	.+38     	; 0x1768 <__fp_cmp+0x46>
    1742:	62 1b       	sub	r22, r18
    1744:	73 0b       	sbc	r23, r19
    1746:	84 0b       	sbc	r24, r20
    1748:	95 0b       	sbc	r25, r21
    174a:	39 f4       	brne	.+14     	; 0x175a <__fp_cmp+0x38>
    174c:	0a 26       	eor	r0, r26
    174e:	61 f0       	breq	.+24     	; 0x1768 <__fp_cmp+0x46>
    1750:	23 2b       	or	r18, r19
    1752:	24 2b       	or	r18, r20
    1754:	25 2b       	or	r18, r21
    1756:	21 f4       	brne	.+8      	; 0x1760 <__fp_cmp+0x3e>
    1758:	08 95       	ret
    175a:	0a 26       	eor	r0, r26
    175c:	09 f4       	brne	.+2      	; 0x1760 <__fp_cmp+0x3e>
    175e:	a1 40       	sbci	r26, 0x01	; 1
    1760:	a6 95       	lsr	r26
    1762:	8f ef       	ldi	r24, 0xFF	; 255
    1764:	81 1d       	adc	r24, r1
    1766:	81 1d       	adc	r24, r1
    1768:	08 95       	ret

0000176a <__fp_inf>:
    176a:	97 f9       	bld	r25, 7
    176c:	9f 67       	ori	r25, 0x7F	; 127
    176e:	80 e8       	ldi	r24, 0x80	; 128
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	08 95       	ret

00001776 <__fp_nan>:
    1776:	9f ef       	ldi	r25, 0xFF	; 255
    1778:	80 ec       	ldi	r24, 0xC0	; 192
    177a:	08 95       	ret

0000177c <__fp_pscA>:
    177c:	00 24       	eor	r0, r0
    177e:	0a 94       	dec	r0
    1780:	16 16       	cp	r1, r22
    1782:	17 06       	cpc	r1, r23
    1784:	18 06       	cpc	r1, r24
    1786:	09 06       	cpc	r0, r25
    1788:	08 95       	ret

0000178a <__fp_pscB>:
    178a:	00 24       	eor	r0, r0
    178c:	0a 94       	dec	r0
    178e:	12 16       	cp	r1, r18
    1790:	13 06       	cpc	r1, r19
    1792:	14 06       	cpc	r1, r20
    1794:	05 06       	cpc	r0, r21
    1796:	08 95       	ret

00001798 <__fp_round>:
    1798:	09 2e       	mov	r0, r25
    179a:	03 94       	inc	r0
    179c:	00 0c       	add	r0, r0
    179e:	11 f4       	brne	.+4      	; 0x17a4 <__fp_round+0xc>
    17a0:	88 23       	and	r24, r24
    17a2:	52 f0       	brmi	.+20     	; 0x17b8 <__fp_round+0x20>
    17a4:	bb 0f       	add	r27, r27
    17a6:	40 f4       	brcc	.+16     	; 0x17b8 <__fp_round+0x20>
    17a8:	bf 2b       	or	r27, r31
    17aa:	11 f4       	brne	.+4      	; 0x17b0 <__fp_round+0x18>
    17ac:	60 ff       	sbrs	r22, 0
    17ae:	04 c0       	rjmp	.+8      	; 0x17b8 <__fp_round+0x20>
    17b0:	6f 5f       	subi	r22, 0xFF	; 255
    17b2:	7f 4f       	sbci	r23, 0xFF	; 255
    17b4:	8f 4f       	sbci	r24, 0xFF	; 255
    17b6:	9f 4f       	sbci	r25, 0xFF	; 255
    17b8:	08 95       	ret

000017ba <__fp_split3>:
    17ba:	57 fd       	sbrc	r21, 7
    17bc:	90 58       	subi	r25, 0x80	; 128
    17be:	44 0f       	add	r20, r20
    17c0:	55 1f       	adc	r21, r21
    17c2:	59 f0       	breq	.+22     	; 0x17da <__fp_splitA+0x10>
    17c4:	5f 3f       	cpi	r21, 0xFF	; 255
    17c6:	71 f0       	breq	.+28     	; 0x17e4 <__fp_splitA+0x1a>
    17c8:	47 95       	ror	r20

000017ca <__fp_splitA>:
    17ca:	88 0f       	add	r24, r24
    17cc:	97 fb       	bst	r25, 7
    17ce:	99 1f       	adc	r25, r25
    17d0:	61 f0       	breq	.+24     	; 0x17ea <__fp_splitA+0x20>
    17d2:	9f 3f       	cpi	r25, 0xFF	; 255
    17d4:	79 f0       	breq	.+30     	; 0x17f4 <__fp_splitA+0x2a>
    17d6:	87 95       	ror	r24
    17d8:	08 95       	ret
    17da:	12 16       	cp	r1, r18
    17dc:	13 06       	cpc	r1, r19
    17de:	14 06       	cpc	r1, r20
    17e0:	55 1f       	adc	r21, r21
    17e2:	f2 cf       	rjmp	.-28     	; 0x17c8 <__fp_split3+0xe>
    17e4:	46 95       	lsr	r20
    17e6:	f1 df       	rcall	.-30     	; 0x17ca <__fp_splitA>
    17e8:	08 c0       	rjmp	.+16     	; 0x17fa <__fp_splitA+0x30>
    17ea:	16 16       	cp	r1, r22
    17ec:	17 06       	cpc	r1, r23
    17ee:	18 06       	cpc	r1, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	f1 cf       	rjmp	.-30     	; 0x17d6 <__fp_splitA+0xc>
    17f4:	86 95       	lsr	r24
    17f6:	71 05       	cpc	r23, r1
    17f8:	61 05       	cpc	r22, r1
    17fa:	08 94       	sec
    17fc:	08 95       	ret

000017fe <__fp_zero>:
    17fe:	e8 94       	clt

00001800 <__fp_szero>:
    1800:	bb 27       	eor	r27, r27
    1802:	66 27       	eor	r22, r22
    1804:	77 27       	eor	r23, r23
    1806:	cb 01       	movw	r24, r22
    1808:	97 f9       	bld	r25, 7
    180a:	08 95       	ret

0000180c <__mulsf3>:
    180c:	0e 94 19 0c 	call	0x1832	; 0x1832 <__mulsf3x>
    1810:	0c 94 cc 0b 	jmp	0x1798	; 0x1798 <__fp_round>
    1814:	0e 94 be 0b 	call	0x177c	; 0x177c <__fp_pscA>
    1818:	38 f0       	brcs	.+14     	; 0x1828 <__mulsf3+0x1c>
    181a:	0e 94 c5 0b 	call	0x178a	; 0x178a <__fp_pscB>
    181e:	20 f0       	brcs	.+8      	; 0x1828 <__mulsf3+0x1c>
    1820:	95 23       	and	r25, r21
    1822:	11 f0       	breq	.+4      	; 0x1828 <__mulsf3+0x1c>
    1824:	0c 94 b5 0b 	jmp	0x176a	; 0x176a <__fp_inf>
    1828:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__fp_nan>
    182c:	11 24       	eor	r1, r1
    182e:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__fp_szero>

00001832 <__mulsf3x>:
    1832:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__fp_split3>
    1836:	70 f3       	brcs	.-36     	; 0x1814 <__mulsf3+0x8>

00001838 <__mulsf3_pse>:
    1838:	95 9f       	mul	r25, r21
    183a:	c1 f3       	breq	.-16     	; 0x182c <__mulsf3+0x20>
    183c:	95 0f       	add	r25, r21
    183e:	50 e0       	ldi	r21, 0x00	; 0
    1840:	55 1f       	adc	r21, r21
    1842:	62 9f       	mul	r22, r18
    1844:	f0 01       	movw	r30, r0
    1846:	72 9f       	mul	r23, r18
    1848:	bb 27       	eor	r27, r27
    184a:	f0 0d       	add	r31, r0
    184c:	b1 1d       	adc	r27, r1
    184e:	63 9f       	mul	r22, r19
    1850:	aa 27       	eor	r26, r26
    1852:	f0 0d       	add	r31, r0
    1854:	b1 1d       	adc	r27, r1
    1856:	aa 1f       	adc	r26, r26
    1858:	64 9f       	mul	r22, r20
    185a:	66 27       	eor	r22, r22
    185c:	b0 0d       	add	r27, r0
    185e:	a1 1d       	adc	r26, r1
    1860:	66 1f       	adc	r22, r22
    1862:	82 9f       	mul	r24, r18
    1864:	22 27       	eor	r18, r18
    1866:	b0 0d       	add	r27, r0
    1868:	a1 1d       	adc	r26, r1
    186a:	62 1f       	adc	r22, r18
    186c:	73 9f       	mul	r23, r19
    186e:	b0 0d       	add	r27, r0
    1870:	a1 1d       	adc	r26, r1
    1872:	62 1f       	adc	r22, r18
    1874:	83 9f       	mul	r24, r19
    1876:	a0 0d       	add	r26, r0
    1878:	61 1d       	adc	r22, r1
    187a:	22 1f       	adc	r18, r18
    187c:	74 9f       	mul	r23, r20
    187e:	33 27       	eor	r19, r19
    1880:	a0 0d       	add	r26, r0
    1882:	61 1d       	adc	r22, r1
    1884:	23 1f       	adc	r18, r19
    1886:	84 9f       	mul	r24, r20
    1888:	60 0d       	add	r22, r0
    188a:	21 1d       	adc	r18, r1
    188c:	82 2f       	mov	r24, r18
    188e:	76 2f       	mov	r23, r22
    1890:	6a 2f       	mov	r22, r26
    1892:	11 24       	eor	r1, r1
    1894:	9f 57       	subi	r25, 0x7F	; 127
    1896:	50 40       	sbci	r21, 0x00	; 0
    1898:	9a f0       	brmi	.+38     	; 0x18c0 <__mulsf3_pse+0x88>
    189a:	f1 f0       	breq	.+60     	; 0x18d8 <__mulsf3_pse+0xa0>
    189c:	88 23       	and	r24, r24
    189e:	4a f0       	brmi	.+18     	; 0x18b2 <__mulsf3_pse+0x7a>
    18a0:	ee 0f       	add	r30, r30
    18a2:	ff 1f       	adc	r31, r31
    18a4:	bb 1f       	adc	r27, r27
    18a6:	66 1f       	adc	r22, r22
    18a8:	77 1f       	adc	r23, r23
    18aa:	88 1f       	adc	r24, r24
    18ac:	91 50       	subi	r25, 0x01	; 1
    18ae:	50 40       	sbci	r21, 0x00	; 0
    18b0:	a9 f7       	brne	.-22     	; 0x189c <__mulsf3_pse+0x64>
    18b2:	9e 3f       	cpi	r25, 0xFE	; 254
    18b4:	51 05       	cpc	r21, r1
    18b6:	80 f0       	brcs	.+32     	; 0x18d8 <__mulsf3_pse+0xa0>
    18b8:	0c 94 b5 0b 	jmp	0x176a	; 0x176a <__fp_inf>
    18bc:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__fp_szero>
    18c0:	5f 3f       	cpi	r21, 0xFF	; 255
    18c2:	e4 f3       	brlt	.-8      	; 0x18bc <__mulsf3_pse+0x84>
    18c4:	98 3e       	cpi	r25, 0xE8	; 232
    18c6:	d4 f3       	brlt	.-12     	; 0x18bc <__mulsf3_pse+0x84>
    18c8:	86 95       	lsr	r24
    18ca:	77 95       	ror	r23
    18cc:	67 95       	ror	r22
    18ce:	b7 95       	ror	r27
    18d0:	f7 95       	ror	r31
    18d2:	e7 95       	ror	r30
    18d4:	9f 5f       	subi	r25, 0xFF	; 255
    18d6:	c1 f7       	brne	.-16     	; 0x18c8 <__mulsf3_pse+0x90>
    18d8:	fe 2b       	or	r31, r30
    18da:	88 0f       	add	r24, r24
    18dc:	91 1d       	adc	r25, r1
    18de:	96 95       	lsr	r25
    18e0:	87 95       	ror	r24
    18e2:	97 f9       	bld	r25, 7
    18e4:	08 95       	ret

000018e6 <pow>:
    18e6:	fa 01       	movw	r30, r20
    18e8:	ee 0f       	add	r30, r30
    18ea:	ff 1f       	adc	r31, r31
    18ec:	30 96       	adiw	r30, 0x00	; 0
    18ee:	21 05       	cpc	r18, r1
    18f0:	31 05       	cpc	r19, r1
    18f2:	a1 f1       	breq	.+104    	; 0x195c <pow+0x76>
    18f4:	61 15       	cp	r22, r1
    18f6:	71 05       	cpc	r23, r1
    18f8:	61 f4       	brne	.+24     	; 0x1912 <pow+0x2c>
    18fa:	80 38       	cpi	r24, 0x80	; 128
    18fc:	bf e3       	ldi	r27, 0x3F	; 63
    18fe:	9b 07       	cpc	r25, r27
    1900:	49 f1       	breq	.+82     	; 0x1954 <pow+0x6e>
    1902:	68 94       	set
    1904:	90 38       	cpi	r25, 0x80	; 128
    1906:	81 05       	cpc	r24, r1
    1908:	61 f0       	breq	.+24     	; 0x1922 <pow+0x3c>
    190a:	80 38       	cpi	r24, 0x80	; 128
    190c:	bf ef       	ldi	r27, 0xFF	; 255
    190e:	9b 07       	cpc	r25, r27
    1910:	41 f0       	breq	.+16     	; 0x1922 <pow+0x3c>
    1912:	99 23       	and	r25, r25
    1914:	4a f5       	brpl	.+82     	; 0x1968 <pow+0x82>
    1916:	ff 3f       	cpi	r31, 0xFF	; 255
    1918:	e1 05       	cpc	r30, r1
    191a:	31 05       	cpc	r19, r1
    191c:	21 05       	cpc	r18, r1
    191e:	19 f1       	breq	.+70     	; 0x1966 <pow+0x80>
    1920:	e8 94       	clt
    1922:	08 94       	sec
    1924:	e7 95       	ror	r30
    1926:	d9 01       	movw	r26, r18
    1928:	aa 23       	and	r26, r26
    192a:	29 f4       	brne	.+10     	; 0x1936 <pow+0x50>
    192c:	ab 2f       	mov	r26, r27
    192e:	be 2f       	mov	r27, r30
    1930:	f8 5f       	subi	r31, 0xF8	; 248
    1932:	d0 f3       	brcs	.-12     	; 0x1928 <pow+0x42>
    1934:	10 c0       	rjmp	.+32     	; 0x1956 <pow+0x70>
    1936:	ff 5f       	subi	r31, 0xFF	; 255
    1938:	70 f4       	brcc	.+28     	; 0x1956 <pow+0x70>
    193a:	a6 95       	lsr	r26
    193c:	e0 f7       	brcc	.-8      	; 0x1936 <pow+0x50>
    193e:	f7 39       	cpi	r31, 0x97	; 151
    1940:	50 f0       	brcs	.+20     	; 0x1956 <pow+0x70>
    1942:	19 f0       	breq	.+6      	; 0x194a <pow+0x64>
    1944:	ff 3a       	cpi	r31, 0xAF	; 175
    1946:	38 f4       	brcc	.+14     	; 0x1956 <pow+0x70>
    1948:	9f 77       	andi	r25, 0x7F	; 127
    194a:	9f 93       	push	r25
    194c:	0d d0       	rcall	.+26     	; 0x1968 <pow+0x82>
    194e:	0f 90       	pop	r0
    1950:	07 fc       	sbrc	r0, 7
    1952:	90 58       	subi	r25, 0x80	; 128
    1954:	08 95       	ret
    1956:	46 f0       	brts	.+16     	; 0x1968 <pow+0x82>
    1958:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__fp_nan>
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	80 e8       	ldi	r24, 0x80	; 128
    1962:	9f e3       	ldi	r25, 0x3F	; 63
    1964:	08 95       	ret
    1966:	4f e7       	ldi	r20, 0x7F	; 127
    1968:	9f 77       	andi	r25, 0x7F	; 127
    196a:	5f 93       	push	r21
    196c:	4f 93       	push	r20
    196e:	3f 93       	push	r19
    1970:	2f 93       	push	r18
    1972:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <log>
    1976:	2f 91       	pop	r18
    1978:	3f 91       	pop	r19
    197a:	4f 91       	pop	r20
    197c:	5f 91       	pop	r21
    197e:	0e 94 06 0c 	call	0x180c	; 0x180c <__mulsf3>
    1982:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <exp>

00001986 <trunc>:
    1986:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__fp_trunc>
    198a:	30 f0       	brcs	.+12     	; 0x1998 <trunc+0x12>
    198c:	9f 37       	cpi	r25, 0x7F	; 127
    198e:	10 f4       	brcc	.+4      	; 0x1994 <trunc+0xe>
    1990:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__fp_szero>
    1994:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <__fp_mintl>
    1998:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__fp_mpack>
    199c:	29 f4       	brne	.+10     	; 0x19a8 <trunc+0x22>
    199e:	16 f0       	brts	.+4      	; 0x19a4 <trunc+0x1e>
    19a0:	0c 94 b5 0b 	jmp	0x176a	; 0x176a <__fp_inf>
    19a4:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__fp_zero>
    19a8:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__fp_nan>

000019ac <exp>:
    19ac:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__fp_splitA>
    19b0:	a8 f3       	brcs	.-22     	; 0x199c <trunc+0x16>
    19b2:	96 38       	cpi	r25, 0x86	; 134
    19b4:	a0 f7       	brcc	.-24     	; 0x199e <trunc+0x18>
    19b6:	07 f8       	bld	r0, 7
    19b8:	0f 92       	push	r0
    19ba:	e8 94       	clt
    19bc:	2b e3       	ldi	r18, 0x3B	; 59
    19be:	3a ea       	ldi	r19, 0xAA	; 170
    19c0:	48 eb       	ldi	r20, 0xB8	; 184
    19c2:	5f e7       	ldi	r21, 0x7F	; 127
    19c4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__mulsf3_pse>
    19c8:	0f 92       	push	r0
    19ca:	0f 92       	push	r0
    19cc:	0f 92       	push	r0
    19ce:	4d b7       	in	r20, 0x3d	; 61
    19d0:	5e b7       	in	r21, 0x3e	; 62
    19d2:	0f 92       	push	r0
    19d4:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <modf>
    19d8:	ec ea       	ldi	r30, 0xAC	; 172
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__fp_powser>
    19e0:	4f 91       	pop	r20
    19e2:	5f 91       	pop	r21
    19e4:	ef 91       	pop	r30
    19e6:	ff 91       	pop	r31
    19e8:	e5 95       	asr	r30
    19ea:	ee 1f       	adc	r30, r30
    19ec:	ff 1f       	adc	r31, r31
    19ee:	49 f0       	breq	.+18     	; 0x1a02 <exp+0x56>
    19f0:	fe 57       	subi	r31, 0x7E	; 126
    19f2:	e0 68       	ori	r30, 0x80	; 128
    19f4:	44 27       	eor	r20, r20
    19f6:	ee 0f       	add	r30, r30
    19f8:	44 1f       	adc	r20, r20
    19fa:	fa 95       	dec	r31
    19fc:	e1 f7       	brne	.-8      	; 0x19f6 <exp+0x4a>
    19fe:	41 95       	neg	r20
    1a00:	55 0b       	sbc	r21, r21
    1a02:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ldexp>
    1a06:	0f 90       	pop	r0
    1a08:	07 fe       	sbrs	r0, 7
    1a0a:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <inverse>
    1a0e:	08 95       	ret

00001a10 <__fp_mintl>:
    1a10:	88 23       	and	r24, r24
    1a12:	71 f4       	brne	.+28     	; 0x1a30 <__fp_mintl+0x20>
    1a14:	77 23       	and	r23, r23
    1a16:	21 f0       	breq	.+8      	; 0x1a20 <__fp_mintl+0x10>
    1a18:	98 50       	subi	r25, 0x08	; 8
    1a1a:	87 2b       	or	r24, r23
    1a1c:	76 2f       	mov	r23, r22
    1a1e:	07 c0       	rjmp	.+14     	; 0x1a2e <__fp_mintl+0x1e>
    1a20:	66 23       	and	r22, r22
    1a22:	11 f4       	brne	.+4      	; 0x1a28 <__fp_mintl+0x18>
    1a24:	99 27       	eor	r25, r25
    1a26:	0d c0       	rjmp	.+26     	; 0x1a42 <__fp_mintl+0x32>
    1a28:	90 51       	subi	r25, 0x10	; 16
    1a2a:	86 2b       	or	r24, r22
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	60 e0       	ldi	r22, 0x00	; 0
    1a30:	2a f0       	brmi	.+10     	; 0x1a3c <__fp_mintl+0x2c>
    1a32:	9a 95       	dec	r25
    1a34:	66 0f       	add	r22, r22
    1a36:	77 1f       	adc	r23, r23
    1a38:	88 1f       	adc	r24, r24
    1a3a:	da f7       	brpl	.-10     	; 0x1a32 <__fp_mintl+0x22>
    1a3c:	88 0f       	add	r24, r24
    1a3e:	96 95       	lsr	r25
    1a40:	87 95       	ror	r24
    1a42:	97 f9       	bld	r25, 7
    1a44:	08 95       	ret

00001a46 <__fp_mpack>:
    1a46:	9f 3f       	cpi	r25, 0xFF	; 255
    1a48:	31 f0       	breq	.+12     	; 0x1a56 <__fp_mpack_finite+0xc>

00001a4a <__fp_mpack_finite>:
    1a4a:	91 50       	subi	r25, 0x01	; 1
    1a4c:	20 f4       	brcc	.+8      	; 0x1a56 <__fp_mpack_finite+0xc>
    1a4e:	87 95       	ror	r24
    1a50:	77 95       	ror	r23
    1a52:	67 95       	ror	r22
    1a54:	b7 95       	ror	r27
    1a56:	88 0f       	add	r24, r24
    1a58:	91 1d       	adc	r25, r1
    1a5a:	96 95       	lsr	r25
    1a5c:	87 95       	ror	r24
    1a5e:	97 f9       	bld	r25, 7
    1a60:	08 95       	ret

00001a62 <__fp_powser>:
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	1f 93       	push	r17
    1a68:	0f 93       	push	r16
    1a6a:	ff 92       	push	r15
    1a6c:	ef 92       	push	r14
    1a6e:	df 92       	push	r13
    1a70:	7b 01       	movw	r14, r22
    1a72:	8c 01       	movw	r16, r24
    1a74:	68 94       	set
    1a76:	06 c0       	rjmp	.+12     	; 0x1a84 <__fp_powser+0x22>
    1a78:	da 2e       	mov	r13, r26
    1a7a:	ef 01       	movw	r28, r30
    1a7c:	0e 94 19 0c 	call	0x1832	; 0x1832 <__mulsf3x>
    1a80:	fe 01       	movw	r30, r28
    1a82:	e8 94       	clt
    1a84:	a5 91       	lpm	r26, Z+
    1a86:	25 91       	lpm	r18, Z+
    1a88:	35 91       	lpm	r19, Z+
    1a8a:	45 91       	lpm	r20, Z+
    1a8c:	55 91       	lpm	r21, Z+
    1a8e:	a6 f3       	brts	.-24     	; 0x1a78 <__fp_powser+0x16>
    1a90:	ef 01       	movw	r28, r30
    1a92:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__addsf3x>
    1a96:	fe 01       	movw	r30, r28
    1a98:	97 01       	movw	r18, r14
    1a9a:	a8 01       	movw	r20, r16
    1a9c:	da 94       	dec	r13
    1a9e:	69 f7       	brne	.-38     	; 0x1a7a <__fp_powser+0x18>
    1aa0:	df 90       	pop	r13
    1aa2:	ef 90       	pop	r14
    1aa4:	ff 90       	pop	r15
    1aa6:	0f 91       	pop	r16
    1aa8:	1f 91       	pop	r17
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <__fp_trunc>:
    1ab0:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__fp_splitA>
    1ab4:	a0 f0       	brcs	.+40     	; 0x1ade <__fp_trunc+0x2e>
    1ab6:	be e7       	ldi	r27, 0x7E	; 126
    1ab8:	b9 17       	cp	r27, r25
    1aba:	88 f4       	brcc	.+34     	; 0x1ade <__fp_trunc+0x2e>
    1abc:	bb 27       	eor	r27, r27
    1abe:	9f 38       	cpi	r25, 0x8F	; 143
    1ac0:	60 f4       	brcc	.+24     	; 0x1ada <__fp_trunc+0x2a>
    1ac2:	16 16       	cp	r1, r22
    1ac4:	b1 1d       	adc	r27, r1
    1ac6:	67 2f       	mov	r22, r23
    1ac8:	78 2f       	mov	r23, r24
    1aca:	88 27       	eor	r24, r24
    1acc:	98 5f       	subi	r25, 0xF8	; 248
    1ace:	f7 cf       	rjmp	.-18     	; 0x1abe <__fp_trunc+0xe>
    1ad0:	86 95       	lsr	r24
    1ad2:	77 95       	ror	r23
    1ad4:	67 95       	ror	r22
    1ad6:	b1 1d       	adc	r27, r1
    1ad8:	93 95       	inc	r25
    1ada:	96 39       	cpi	r25, 0x96	; 150
    1adc:	c8 f3       	brcs	.-14     	; 0x1ad0 <__fp_trunc+0x20>
    1ade:	08 95       	ret

00001ae0 <inverse>:
    1ae0:	9b 01       	movw	r18, r22
    1ae2:	ac 01       	movw	r20, r24
    1ae4:	60 e0       	ldi	r22, 0x00	; 0
    1ae6:	70 e0       	ldi	r23, 0x00	; 0
    1ae8:	80 e8       	ldi	r24, 0x80	; 128
    1aea:	9f e3       	ldi	r25, 0x3F	; 63
    1aec:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__divsf3>
    1af0:	0c 94 b5 0b 	jmp	0x176a	; 0x176a <__fp_inf>
    1af4:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__fp_mpack>

00001af8 <ldexp>:
    1af8:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__fp_splitA>
    1afc:	d8 f3       	brcs	.-10     	; 0x1af4 <inverse+0x14>
    1afe:	99 23       	and	r25, r25
    1b00:	c9 f3       	breq	.-14     	; 0x1af4 <inverse+0x14>
    1b02:	94 0f       	add	r25, r20
    1b04:	51 1d       	adc	r21, r1
    1b06:	a3 f3       	brvs	.-24     	; 0x1af0 <inverse+0x10>
    1b08:	91 50       	subi	r25, 0x01	; 1
    1b0a:	50 40       	sbci	r21, 0x00	; 0
    1b0c:	94 f0       	brlt	.+36     	; 0x1b32 <ldexp+0x3a>
    1b0e:	59 f0       	breq	.+22     	; 0x1b26 <ldexp+0x2e>
    1b10:	88 23       	and	r24, r24
    1b12:	32 f0       	brmi	.+12     	; 0x1b20 <ldexp+0x28>
    1b14:	66 0f       	add	r22, r22
    1b16:	77 1f       	adc	r23, r23
    1b18:	88 1f       	adc	r24, r24
    1b1a:	91 50       	subi	r25, 0x01	; 1
    1b1c:	50 40       	sbci	r21, 0x00	; 0
    1b1e:	c1 f7       	brne	.-16     	; 0x1b10 <ldexp+0x18>
    1b20:	9e 3f       	cpi	r25, 0xFE	; 254
    1b22:	51 05       	cpc	r21, r1
    1b24:	2c f7       	brge	.-54     	; 0x1af0 <inverse+0x10>
    1b26:	88 0f       	add	r24, r24
    1b28:	91 1d       	adc	r25, r1
    1b2a:	96 95       	lsr	r25
    1b2c:	87 95       	ror	r24
    1b2e:	97 f9       	bld	r25, 7
    1b30:	08 95       	ret
    1b32:	5f 3f       	cpi	r21, 0xFF	; 255
    1b34:	ac f0       	brlt	.+42     	; 0x1b60 <ldexp+0x68>
    1b36:	98 3e       	cpi	r25, 0xE8	; 232
    1b38:	9c f0       	brlt	.+38     	; 0x1b60 <ldexp+0x68>
    1b3a:	bb 27       	eor	r27, r27
    1b3c:	86 95       	lsr	r24
    1b3e:	77 95       	ror	r23
    1b40:	67 95       	ror	r22
    1b42:	b7 95       	ror	r27
    1b44:	08 f4       	brcc	.+2      	; 0x1b48 <ldexp+0x50>
    1b46:	b1 60       	ori	r27, 0x01	; 1
    1b48:	93 95       	inc	r25
    1b4a:	c1 f7       	brne	.-16     	; 0x1b3c <ldexp+0x44>
    1b4c:	bb 0f       	add	r27, r27
    1b4e:	58 f7       	brcc	.-42     	; 0x1b26 <ldexp+0x2e>
    1b50:	11 f4       	brne	.+4      	; 0x1b56 <ldexp+0x5e>
    1b52:	60 ff       	sbrs	r22, 0
    1b54:	e8 cf       	rjmp	.-48     	; 0x1b26 <ldexp+0x2e>
    1b56:	6f 5f       	subi	r22, 0xFF	; 255
    1b58:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5e:	e3 cf       	rjmp	.-58     	; 0x1b26 <ldexp+0x2e>
    1b60:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__fp_szero>
    1b64:	16 f0       	brts	.+4      	; 0x1b6a <ldexp+0x72>
    1b66:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__fp_mpack>
    1b6a:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__fp_nan>
    1b6e:	68 94       	set
    1b70:	0c 94 b5 0b 	jmp	0x176a	; 0x176a <__fp_inf>

00001b74 <log>:
    1b74:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__fp_splitA>
    1b78:	a8 f3       	brcs	.-22     	; 0x1b64 <ldexp+0x6c>
    1b7a:	99 23       	and	r25, r25
    1b7c:	c1 f3       	breq	.-16     	; 0x1b6e <ldexp+0x76>
    1b7e:	ae f3       	brts	.-22     	; 0x1b6a <ldexp+0x72>
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	1f 93       	push	r17
    1b86:	0f 93       	push	r16
    1b88:	ff 92       	push	r15
    1b8a:	c9 2f       	mov	r28, r25
    1b8c:	dd 27       	eor	r29, r29
    1b8e:	88 23       	and	r24, r24
    1b90:	2a f0       	brmi	.+10     	; 0x1b9c <log+0x28>
    1b92:	21 97       	sbiw	r28, 0x01	; 1
    1b94:	66 0f       	add	r22, r22
    1b96:	77 1f       	adc	r23, r23
    1b98:	88 1f       	adc	r24, r24
    1b9a:	da f7       	brpl	.-10     	; 0x1b92 <log+0x1e>
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e8       	ldi	r20, 0x80	; 128
    1ba2:	5f eb       	ldi	r21, 0xBF	; 191
    1ba4:	9f e3       	ldi	r25, 0x3F	; 63
    1ba6:	88 39       	cpi	r24, 0x98	; 152
    1ba8:	20 f0       	brcs	.+8      	; 0x1bb2 <log+0x3e>
    1baa:	80 3e       	cpi	r24, 0xE0	; 224
    1bac:	38 f0       	brcs	.+14     	; 0x1bbc <log+0x48>
    1bae:	21 96       	adiw	r28, 0x01	; 1
    1bb0:	8f 77       	andi	r24, 0x7F	; 127
    1bb2:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__addsf3>
    1bb6:	e4 ed       	ldi	r30, 0xD4	; 212
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	04 c0       	rjmp	.+8      	; 0x1bc4 <log+0x50>
    1bbc:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__addsf3>
    1bc0:	e1 e0       	ldi	r30, 0x01	; 1
    1bc2:	f1 e0       	ldi	r31, 0x01	; 1
    1bc4:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__fp_powser>
    1bc8:	8b 01       	movw	r16, r22
    1bca:	be 01       	movw	r22, r28
    1bcc:	ec 01       	movw	r28, r24
    1bce:	fb 2e       	mov	r15, r27
    1bd0:	6f 57       	subi	r22, 0x7F	; 127
    1bd2:	71 09       	sbc	r23, r1
    1bd4:	75 95       	asr	r23
    1bd6:	77 1f       	adc	r23, r23
    1bd8:	88 0b       	sbc	r24, r24
    1bda:	99 0b       	sbc	r25, r25
    1bdc:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__floatsisf>
    1be0:	28 e1       	ldi	r18, 0x18	; 24
    1be2:	32 e7       	ldi	r19, 0x72	; 114
    1be4:	41 e3       	ldi	r20, 0x31	; 49
    1be6:	5f e3       	ldi	r21, 0x3F	; 63
    1be8:	0e 94 19 0c 	call	0x1832	; 0x1832 <__mulsf3x>
    1bec:	af 2d       	mov	r26, r15
    1bee:	98 01       	movw	r18, r16
    1bf0:	ae 01       	movw	r20, r28
    1bf2:	ff 90       	pop	r15
    1bf4:	0f 91       	pop	r16
    1bf6:	1f 91       	pop	r17
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__addsf3x>
    1c00:	0c 94 cc 0b 	jmp	0x1798	; 0x1798 <__fp_round>

00001c04 <modf>:
    1c04:	fa 01       	movw	r30, r20
    1c06:	dc 01       	movw	r26, r24
    1c08:	aa 0f       	add	r26, r26
    1c0a:	bb 1f       	adc	r27, r27
    1c0c:	9b 01       	movw	r18, r22
    1c0e:	ac 01       	movw	r20, r24
    1c10:	bf 57       	subi	r27, 0x7F	; 127
    1c12:	28 f4       	brcc	.+10     	; 0x1c1e <modf+0x1a>
    1c14:	22 27       	eor	r18, r18
    1c16:	33 27       	eor	r19, r19
    1c18:	44 27       	eor	r20, r20
    1c1a:	50 78       	andi	r21, 0x80	; 128
    1c1c:	20 c0       	rjmp	.+64     	; 0x1c5e <modf+0x5a>
    1c1e:	b7 51       	subi	r27, 0x17	; 23
    1c20:	90 f4       	brcc	.+36     	; 0x1c46 <modf+0x42>
    1c22:	ab 2f       	mov	r26, r27
    1c24:	00 24       	eor	r0, r0
    1c26:	46 95       	lsr	r20
    1c28:	37 95       	ror	r19
    1c2a:	27 95       	ror	r18
    1c2c:	01 1c       	adc	r0, r1
    1c2e:	a3 95       	inc	r26
    1c30:	d2 f3       	brmi	.-12     	; 0x1c26 <modf+0x22>
    1c32:	00 20       	and	r0, r0
    1c34:	71 f0       	breq	.+28     	; 0x1c52 <modf+0x4e>
    1c36:	22 0f       	add	r18, r18
    1c38:	33 1f       	adc	r19, r19
    1c3a:	44 1f       	adc	r20, r20
    1c3c:	b3 95       	inc	r27
    1c3e:	da f3       	brmi	.-10     	; 0x1c36 <modf+0x32>
    1c40:	0e d0       	rcall	.+28     	; 0x1c5e <modf+0x5a>
    1c42:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <__subsf3>
    1c46:	61 30       	cpi	r22, 0x01	; 1
    1c48:	71 05       	cpc	r23, r1
    1c4a:	a0 e8       	ldi	r26, 0x80	; 128
    1c4c:	8a 07       	cpc	r24, r26
    1c4e:	b9 46       	sbci	r27, 0x69	; 105
    1c50:	30 f4       	brcc	.+12     	; 0x1c5e <modf+0x5a>
    1c52:	9b 01       	movw	r18, r22
    1c54:	ac 01       	movw	r20, r24
    1c56:	66 27       	eor	r22, r22
    1c58:	77 27       	eor	r23, r23
    1c5a:	88 27       	eor	r24, r24
    1c5c:	90 78       	andi	r25, 0x80	; 128
    1c5e:	30 96       	adiw	r30, 0x00	; 0
    1c60:	21 f0       	breq	.+8      	; 0x1c6a <modf+0x66>
    1c62:	20 83       	st	Z, r18
    1c64:	31 83       	std	Z+1, r19	; 0x01
    1c66:	42 83       	std	Z+2, r20	; 0x02
    1c68:	53 83       	std	Z+3, r21	; 0x03
    1c6a:	08 95       	ret

00001c6c <__udivmodhi4>:
    1c6c:	aa 1b       	sub	r26, r26
    1c6e:	bb 1b       	sub	r27, r27
    1c70:	51 e1       	ldi	r21, 0x11	; 17
    1c72:	07 c0       	rjmp	.+14     	; 0x1c82 <__udivmodhi4_ep>

00001c74 <__udivmodhi4_loop>:
    1c74:	aa 1f       	adc	r26, r26
    1c76:	bb 1f       	adc	r27, r27
    1c78:	a6 17       	cp	r26, r22
    1c7a:	b7 07       	cpc	r27, r23
    1c7c:	10 f0       	brcs	.+4      	; 0x1c82 <__udivmodhi4_ep>
    1c7e:	a6 1b       	sub	r26, r22
    1c80:	b7 0b       	sbc	r27, r23

00001c82 <__udivmodhi4_ep>:
    1c82:	88 1f       	adc	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	5a 95       	dec	r21
    1c88:	a9 f7       	brne	.-22     	; 0x1c74 <__udivmodhi4_loop>
    1c8a:	80 95       	com	r24
    1c8c:	90 95       	com	r25
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	08 95       	ret

00001c94 <__udivmodsi4>:
    1c94:	a1 e2       	ldi	r26, 0x21	; 33
    1c96:	1a 2e       	mov	r1, r26
    1c98:	aa 1b       	sub	r26, r26
    1c9a:	bb 1b       	sub	r27, r27
    1c9c:	fd 01       	movw	r30, r26
    1c9e:	0d c0       	rjmp	.+26     	; 0x1cba <__udivmodsi4_ep>

00001ca0 <__udivmodsi4_loop>:
    1ca0:	aa 1f       	adc	r26, r26
    1ca2:	bb 1f       	adc	r27, r27
    1ca4:	ee 1f       	adc	r30, r30
    1ca6:	ff 1f       	adc	r31, r31
    1ca8:	a2 17       	cp	r26, r18
    1caa:	b3 07       	cpc	r27, r19
    1cac:	e4 07       	cpc	r30, r20
    1cae:	f5 07       	cpc	r31, r21
    1cb0:	20 f0       	brcs	.+8      	; 0x1cba <__udivmodsi4_ep>
    1cb2:	a2 1b       	sub	r26, r18
    1cb4:	b3 0b       	sbc	r27, r19
    1cb6:	e4 0b       	sbc	r30, r20
    1cb8:	f5 0b       	sbc	r31, r21

00001cba <__udivmodsi4_ep>:
    1cba:	66 1f       	adc	r22, r22
    1cbc:	77 1f       	adc	r23, r23
    1cbe:	88 1f       	adc	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	1a 94       	dec	r1
    1cc4:	69 f7       	brne	.-38     	; 0x1ca0 <__udivmodsi4_loop>
    1cc6:	60 95       	com	r22
    1cc8:	70 95       	com	r23
    1cca:	80 95       	com	r24
    1ccc:	90 95       	com	r25
    1cce:	9b 01       	movw	r18, r22
    1cd0:	ac 01       	movw	r20, r24
    1cd2:	bd 01       	movw	r22, r26
    1cd4:	cf 01       	movw	r24, r30
    1cd6:	08 95       	ret

00001cd8 <__umoddi3>:
    1cd8:	68 94       	set
    1cda:	01 c0       	rjmp	.+2      	; 0x1cde <__udivdi3_umoddi3>

00001cdc <__udivdi3>:
    1cdc:	e8 94       	clt

00001cde <__udivdi3_umoddi3>:
    1cde:	8f 92       	push	r8
    1ce0:	9f 92       	push	r9
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__udivmod64>
    1cea:	df 91       	pop	r29
    1cec:	cf 91       	pop	r28
    1cee:	9f 90       	pop	r9
    1cf0:	8f 90       	pop	r8
    1cf2:	08 95       	ret

00001cf4 <__udivmod64>:
    1cf4:	88 24       	eor	r8, r8
    1cf6:	99 24       	eor	r9, r9
    1cf8:	f4 01       	movw	r30, r8
    1cfa:	e4 01       	movw	r28, r8
    1cfc:	b0 e4       	ldi	r27, 0x40	; 64
    1cfe:	9f 93       	push	r25
    1d00:	aa 27       	eor	r26, r26
    1d02:	9a 15       	cp	r25, r10
    1d04:	8b 04       	cpc	r8, r11
    1d06:	9c 04       	cpc	r9, r12
    1d08:	ed 05       	cpc	r30, r13
    1d0a:	fe 05       	cpc	r31, r14
    1d0c:	cf 05       	cpc	r28, r15
    1d0e:	d0 07       	cpc	r29, r16
    1d10:	a1 07       	cpc	r26, r17
    1d12:	98 f4       	brcc	.+38     	; 0x1d3a <__udivmod64+0x46>
    1d14:	ad 2f       	mov	r26, r29
    1d16:	dc 2f       	mov	r29, r28
    1d18:	cf 2f       	mov	r28, r31
    1d1a:	fe 2f       	mov	r31, r30
    1d1c:	e9 2d       	mov	r30, r9
    1d1e:	98 2c       	mov	r9, r8
    1d20:	89 2e       	mov	r8, r25
    1d22:	98 2f       	mov	r25, r24
    1d24:	87 2f       	mov	r24, r23
    1d26:	76 2f       	mov	r23, r22
    1d28:	65 2f       	mov	r22, r21
    1d2a:	54 2f       	mov	r21, r20
    1d2c:	43 2f       	mov	r20, r19
    1d2e:	32 2f       	mov	r19, r18
    1d30:	22 27       	eor	r18, r18
    1d32:	b8 50       	subi	r27, 0x08	; 8
    1d34:	31 f7       	brne	.-52     	; 0x1d02 <__udivmod64+0xe>
    1d36:	bf 91       	pop	r27
    1d38:	27 c0       	rjmp	.+78     	; 0x1d88 <__udivmod64+0x94>
    1d3a:	1b 2e       	mov	r1, r27
    1d3c:	bf 91       	pop	r27
    1d3e:	bb 27       	eor	r27, r27
    1d40:	22 0f       	add	r18, r18
    1d42:	33 1f       	adc	r19, r19
    1d44:	44 1f       	adc	r20, r20
    1d46:	55 1f       	adc	r21, r21
    1d48:	66 1f       	adc	r22, r22
    1d4a:	77 1f       	adc	r23, r23
    1d4c:	88 1f       	adc	r24, r24
    1d4e:	99 1f       	adc	r25, r25
    1d50:	88 1c       	adc	r8, r8
    1d52:	99 1c       	adc	r9, r9
    1d54:	ee 1f       	adc	r30, r30
    1d56:	ff 1f       	adc	r31, r31
    1d58:	cc 1f       	adc	r28, r28
    1d5a:	dd 1f       	adc	r29, r29
    1d5c:	aa 1f       	adc	r26, r26
    1d5e:	bb 1f       	adc	r27, r27
    1d60:	8a 14       	cp	r8, r10
    1d62:	9b 04       	cpc	r9, r11
    1d64:	ec 05       	cpc	r30, r12
    1d66:	fd 05       	cpc	r31, r13
    1d68:	ce 05       	cpc	r28, r14
    1d6a:	df 05       	cpc	r29, r15
    1d6c:	a0 07       	cpc	r26, r16
    1d6e:	b1 07       	cpc	r27, r17
    1d70:	48 f0       	brcs	.+18     	; 0x1d84 <__udivmod64+0x90>
    1d72:	8a 18       	sub	r8, r10
    1d74:	9b 08       	sbc	r9, r11
    1d76:	ec 09       	sbc	r30, r12
    1d78:	fd 09       	sbc	r31, r13
    1d7a:	ce 09       	sbc	r28, r14
    1d7c:	df 09       	sbc	r29, r15
    1d7e:	a0 0b       	sbc	r26, r16
    1d80:	b1 0b       	sbc	r27, r17
    1d82:	21 60       	ori	r18, 0x01	; 1
    1d84:	1a 94       	dec	r1
    1d86:	e1 f6       	brne	.-72     	; 0x1d40 <__udivmod64+0x4c>
    1d88:	2e f4       	brtc	.+10     	; 0x1d94 <__udivmod64+0xa0>
    1d8a:	94 01       	movw	r18, r8
    1d8c:	af 01       	movw	r20, r30
    1d8e:	be 01       	movw	r22, r28
    1d90:	cd 01       	movw	r24, r26
    1d92:	00 0c       	add	r0, r0
    1d94:	08 95       	ret

00001d96 <__adddi3>:
    1d96:	2a 0d       	add	r18, r10
    1d98:	3b 1d       	adc	r19, r11
    1d9a:	4c 1d       	adc	r20, r12
    1d9c:	5d 1d       	adc	r21, r13
    1d9e:	6e 1d       	adc	r22, r14
    1da0:	7f 1d       	adc	r23, r15
    1da2:	80 1f       	adc	r24, r16
    1da4:	91 1f       	adc	r25, r17
    1da6:	08 95       	ret

00001da8 <__adddi3_s8>:
    1da8:	00 24       	eor	r0, r0
    1daa:	a7 fd       	sbrc	r26, 7
    1dac:	00 94       	com	r0
    1dae:	2a 0f       	add	r18, r26
    1db0:	30 1d       	adc	r19, r0
    1db2:	40 1d       	adc	r20, r0
    1db4:	50 1d       	adc	r21, r0
    1db6:	60 1d       	adc	r22, r0
    1db8:	70 1d       	adc	r23, r0
    1dba:	80 1d       	adc	r24, r0
    1dbc:	90 1d       	adc	r25, r0
    1dbe:	08 95       	ret

00001dc0 <__itoa_ncheck>:
    1dc0:	bb 27       	eor	r27, r27
    1dc2:	4a 30       	cpi	r20, 0x0A	; 10
    1dc4:	31 f4       	brne	.+12     	; 0x1dd2 <__itoa_ncheck+0x12>
    1dc6:	99 23       	and	r25, r25
    1dc8:	22 f4       	brpl	.+8      	; 0x1dd2 <__itoa_ncheck+0x12>
    1dca:	bd e2       	ldi	r27, 0x2D	; 45
    1dcc:	90 95       	com	r25
    1dce:	81 95       	neg	r24
    1dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd2:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__utoa_common>

00001dd6 <__utoa_ncheck>:
    1dd6:	bb 27       	eor	r27, r27

00001dd8 <__utoa_common>:
    1dd8:	fb 01       	movw	r30, r22
    1dda:	55 27       	eor	r21, r21
    1ddc:	aa 27       	eor	r26, r26
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	aa 1f       	adc	r26, r26
    1de4:	a4 17       	cp	r26, r20
    1de6:	10 f0       	brcs	.+4      	; 0x1dec <__utoa_common+0x14>
    1de8:	a4 1b       	sub	r26, r20
    1dea:	83 95       	inc	r24
    1dec:	50 51       	subi	r21, 0x10	; 16
    1dee:	b9 f7       	brne	.-18     	; 0x1dde <__utoa_common+0x6>
    1df0:	a0 5d       	subi	r26, 0xD0	; 208
    1df2:	aa 33       	cpi	r26, 0x3A	; 58
    1df4:	08 f0       	brcs	.+2      	; 0x1df8 <__utoa_common+0x20>
    1df6:	a9 5d       	subi	r26, 0xD9	; 217
    1df8:	a1 93       	st	Z+, r26
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	79 f7       	brne	.-34     	; 0x1ddc <__utoa_common+0x4>
    1dfe:	b1 11       	cpse	r27, r1
    1e00:	b1 93       	st	Z+, r27
    1e02:	11 92       	st	Z+, r1
    1e04:	cb 01       	movw	r24, r22
    1e06:	0c 94 10 11 	jmp	0x2220	; 0x2220 <strrev>

00001e0a <sprintf>:
    1e0a:	ae e0       	ldi	r26, 0x0E	; 14
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	eb e0       	ldi	r30, 0x0B	; 11
    1e10:	ff e0       	ldi	r31, 0x0F	; 15
    1e12:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <__prologue_saves__+0x1c>
    1e16:	0d 89       	ldd	r16, Y+21	; 0x15
    1e18:	1e 89       	ldd	r17, Y+22	; 0x16
    1e1a:	86 e0       	ldi	r24, 0x06	; 6
    1e1c:	8c 83       	std	Y+4, r24	; 0x04
    1e1e:	09 83       	std	Y+1, r16	; 0x01
    1e20:	1a 83       	std	Y+2, r17	; 0x02
    1e22:	8f ef       	ldi	r24, 0xFF	; 255
    1e24:	9f e7       	ldi	r25, 0x7F	; 127
    1e26:	8d 83       	std	Y+5, r24	; 0x05
    1e28:	9e 83       	std	Y+6, r25	; 0x06
    1e2a:	ae 01       	movw	r20, r28
    1e2c:	47 5e       	subi	r20, 0xE7	; 231
    1e2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e30:	6f 89       	ldd	r22, Y+23	; 0x17
    1e32:	78 8d       	ldd	r23, Y+24	; 0x18
    1e34:	ce 01       	movw	r24, r28
    1e36:	01 96       	adiw	r24, 0x01	; 1
    1e38:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <vfprintf>
    1e3c:	2f 81       	ldd	r18, Y+7	; 0x07
    1e3e:	38 85       	ldd	r19, Y+8	; 0x08
    1e40:	f8 01       	movw	r30, r16
    1e42:	e2 0f       	add	r30, r18
    1e44:	f3 1f       	adc	r31, r19
    1e46:	10 82       	st	Z, r1
    1e48:	2e 96       	adiw	r28, 0x0e	; 14
    1e4a:	e4 e0       	ldi	r30, 0x04	; 4
    1e4c:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__epilogue_restores__+0x1c>

00001e50 <vfprintf>:
    1e50:	ac e0       	ldi	r26, 0x0C	; 12
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	ee e2       	ldi	r30, 0x2E	; 46
    1e56:	ff e0       	ldi	r31, 0x0F	; 15
    1e58:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__prologue_saves__>
    1e5c:	7c 01       	movw	r14, r24
    1e5e:	6b 01       	movw	r12, r22
    1e60:	8a 01       	movw	r16, r20
    1e62:	fc 01       	movw	r30, r24
    1e64:	16 82       	std	Z+6, r1	; 0x06
    1e66:	17 82       	std	Z+7, r1	; 0x07
    1e68:	83 81       	ldd	r24, Z+3	; 0x03
    1e6a:	81 ff       	sbrs	r24, 1
    1e6c:	bd c1       	rjmp	.+890    	; 0x21e8 <vfprintf+0x398>
    1e6e:	ce 01       	movw	r24, r28
    1e70:	01 96       	adiw	r24, 0x01	; 1
    1e72:	4c 01       	movw	r8, r24
    1e74:	f7 01       	movw	r30, r14
    1e76:	93 81       	ldd	r25, Z+3	; 0x03
    1e78:	f6 01       	movw	r30, r12
    1e7a:	93 fd       	sbrc	r25, 3
    1e7c:	85 91       	lpm	r24, Z+
    1e7e:	93 ff       	sbrs	r25, 3
    1e80:	81 91       	ld	r24, Z+
    1e82:	6f 01       	movw	r12, r30
    1e84:	88 23       	and	r24, r24
    1e86:	09 f4       	brne	.+2      	; 0x1e8a <vfprintf+0x3a>
    1e88:	ab c1       	rjmp	.+854    	; 0x21e0 <vfprintf+0x390>
    1e8a:	85 32       	cpi	r24, 0x25	; 37
    1e8c:	39 f4       	brne	.+14     	; 0x1e9c <vfprintf+0x4c>
    1e8e:	93 fd       	sbrc	r25, 3
    1e90:	85 91       	lpm	r24, Z+
    1e92:	93 ff       	sbrs	r25, 3
    1e94:	81 91       	ld	r24, Z+
    1e96:	6f 01       	movw	r12, r30
    1e98:	85 32       	cpi	r24, 0x25	; 37
    1e9a:	29 f4       	brne	.+10     	; 0x1ea6 <vfprintf+0x56>
    1e9c:	b7 01       	movw	r22, r14
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	0e 94 20 11 	call	0x2240	; 0x2240 <fputc>
    1ea4:	e7 cf       	rjmp	.-50     	; 0x1e74 <vfprintf+0x24>
    1ea6:	51 2c       	mov	r5, r1
    1ea8:	31 2c       	mov	r3, r1
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	20 32       	cpi	r18, 0x20	; 32
    1eae:	a0 f4       	brcc	.+40     	; 0x1ed8 <vfprintf+0x88>
    1eb0:	8b 32       	cpi	r24, 0x2B	; 43
    1eb2:	69 f0       	breq	.+26     	; 0x1ece <vfprintf+0x7e>
    1eb4:	30 f4       	brcc	.+12     	; 0x1ec2 <vfprintf+0x72>
    1eb6:	80 32       	cpi	r24, 0x20	; 32
    1eb8:	59 f0       	breq	.+22     	; 0x1ed0 <vfprintf+0x80>
    1eba:	83 32       	cpi	r24, 0x23	; 35
    1ebc:	69 f4       	brne	.+26     	; 0x1ed8 <vfprintf+0x88>
    1ebe:	20 61       	ori	r18, 0x10	; 16
    1ec0:	2c c0       	rjmp	.+88     	; 0x1f1a <vfprintf+0xca>
    1ec2:	8d 32       	cpi	r24, 0x2D	; 45
    1ec4:	39 f0       	breq	.+14     	; 0x1ed4 <vfprintf+0x84>
    1ec6:	80 33       	cpi	r24, 0x30	; 48
    1ec8:	39 f4       	brne	.+14     	; 0x1ed8 <vfprintf+0x88>
    1eca:	21 60       	ori	r18, 0x01	; 1
    1ecc:	26 c0       	rjmp	.+76     	; 0x1f1a <vfprintf+0xca>
    1ece:	22 60       	ori	r18, 0x02	; 2
    1ed0:	24 60       	ori	r18, 0x04	; 4
    1ed2:	23 c0       	rjmp	.+70     	; 0x1f1a <vfprintf+0xca>
    1ed4:	28 60       	ori	r18, 0x08	; 8
    1ed6:	21 c0       	rjmp	.+66     	; 0x1f1a <vfprintf+0xca>
    1ed8:	27 fd       	sbrc	r18, 7
    1eda:	27 c0       	rjmp	.+78     	; 0x1f2a <vfprintf+0xda>
    1edc:	30 ed       	ldi	r19, 0xD0	; 208
    1ede:	38 0f       	add	r19, r24
    1ee0:	3a 30       	cpi	r19, 0x0A	; 10
    1ee2:	78 f4       	brcc	.+30     	; 0x1f02 <vfprintf+0xb2>
    1ee4:	26 ff       	sbrs	r18, 6
    1ee6:	06 c0       	rjmp	.+12     	; 0x1ef4 <vfprintf+0xa4>
    1ee8:	fa e0       	ldi	r31, 0x0A	; 10
    1eea:	5f 9e       	mul	r5, r31
    1eec:	30 0d       	add	r19, r0
    1eee:	11 24       	eor	r1, r1
    1ef0:	53 2e       	mov	r5, r19
    1ef2:	13 c0       	rjmp	.+38     	; 0x1f1a <vfprintf+0xca>
    1ef4:	8a e0       	ldi	r24, 0x0A	; 10
    1ef6:	38 9e       	mul	r3, r24
    1ef8:	30 0d       	add	r19, r0
    1efa:	11 24       	eor	r1, r1
    1efc:	33 2e       	mov	r3, r19
    1efe:	20 62       	ori	r18, 0x20	; 32
    1f00:	0c c0       	rjmp	.+24     	; 0x1f1a <vfprintf+0xca>
    1f02:	8e 32       	cpi	r24, 0x2E	; 46
    1f04:	21 f4       	brne	.+8      	; 0x1f0e <vfprintf+0xbe>
    1f06:	26 fd       	sbrc	r18, 6
    1f08:	6b c1       	rjmp	.+726    	; 0x21e0 <vfprintf+0x390>
    1f0a:	20 64       	ori	r18, 0x40	; 64
    1f0c:	06 c0       	rjmp	.+12     	; 0x1f1a <vfprintf+0xca>
    1f0e:	8c 36       	cpi	r24, 0x6C	; 108
    1f10:	11 f4       	brne	.+4      	; 0x1f16 <vfprintf+0xc6>
    1f12:	20 68       	ori	r18, 0x80	; 128
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <vfprintf+0xca>
    1f16:	88 36       	cpi	r24, 0x68	; 104
    1f18:	41 f4       	brne	.+16     	; 0x1f2a <vfprintf+0xda>
    1f1a:	f6 01       	movw	r30, r12
    1f1c:	93 fd       	sbrc	r25, 3
    1f1e:	85 91       	lpm	r24, Z+
    1f20:	93 ff       	sbrs	r25, 3
    1f22:	81 91       	ld	r24, Z+
    1f24:	6f 01       	movw	r12, r30
    1f26:	81 11       	cpse	r24, r1
    1f28:	c1 cf       	rjmp	.-126    	; 0x1eac <vfprintf+0x5c>
    1f2a:	98 2f       	mov	r25, r24
    1f2c:	9f 7d       	andi	r25, 0xDF	; 223
    1f2e:	95 54       	subi	r25, 0x45	; 69
    1f30:	93 30       	cpi	r25, 0x03	; 3
    1f32:	28 f4       	brcc	.+10     	; 0x1f3e <vfprintf+0xee>
    1f34:	0c 5f       	subi	r16, 0xFC	; 252
    1f36:	1f 4f       	sbci	r17, 0xFF	; 255
    1f38:	ff e3       	ldi	r31, 0x3F	; 63
    1f3a:	f9 83       	std	Y+1, r31	; 0x01
    1f3c:	0d c0       	rjmp	.+26     	; 0x1f58 <vfprintf+0x108>
    1f3e:	83 36       	cpi	r24, 0x63	; 99
    1f40:	31 f0       	breq	.+12     	; 0x1f4e <vfprintf+0xfe>
    1f42:	83 37       	cpi	r24, 0x73	; 115
    1f44:	71 f0       	breq	.+28     	; 0x1f62 <vfprintf+0x112>
    1f46:	83 35       	cpi	r24, 0x53	; 83
    1f48:	09 f0       	breq	.+2      	; 0x1f4c <vfprintf+0xfc>
    1f4a:	5b c0       	rjmp	.+182    	; 0x2002 <vfprintf+0x1b2>
    1f4c:	22 c0       	rjmp	.+68     	; 0x1f92 <vfprintf+0x142>
    1f4e:	f8 01       	movw	r30, r16
    1f50:	80 81       	ld	r24, Z
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	0e 5f       	subi	r16, 0xFE	; 254
    1f56:	1f 4f       	sbci	r17, 0xFF	; 255
    1f58:	44 24       	eor	r4, r4
    1f5a:	43 94       	inc	r4
    1f5c:	51 2c       	mov	r5, r1
    1f5e:	54 01       	movw	r10, r8
    1f60:	15 c0       	rjmp	.+42     	; 0x1f8c <vfprintf+0x13c>
    1f62:	38 01       	movw	r6, r16
    1f64:	f2 e0       	ldi	r31, 0x02	; 2
    1f66:	6f 0e       	add	r6, r31
    1f68:	71 1c       	adc	r7, r1
    1f6a:	f8 01       	movw	r30, r16
    1f6c:	a0 80       	ld	r10, Z
    1f6e:	b1 80       	ldd	r11, Z+1	; 0x01
    1f70:	26 ff       	sbrs	r18, 6
    1f72:	03 c0       	rjmp	.+6      	; 0x1f7a <vfprintf+0x12a>
    1f74:	65 2d       	mov	r22, r5
    1f76:	70 e0       	ldi	r23, 0x00	; 0
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <vfprintf+0x12e>
    1f7a:	6f ef       	ldi	r22, 0xFF	; 255
    1f7c:	7f ef       	ldi	r23, 0xFF	; 255
    1f7e:	c5 01       	movw	r24, r10
    1f80:	2c 87       	std	Y+12, r18	; 0x0c
    1f82:	0e 94 05 11 	call	0x220a	; 0x220a <strnlen>
    1f86:	2c 01       	movw	r4, r24
    1f88:	83 01       	movw	r16, r6
    1f8a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f8c:	2f 77       	andi	r18, 0x7F	; 127
    1f8e:	22 2e       	mov	r2, r18
    1f90:	17 c0       	rjmp	.+46     	; 0x1fc0 <vfprintf+0x170>
    1f92:	38 01       	movw	r6, r16
    1f94:	f2 e0       	ldi	r31, 0x02	; 2
    1f96:	6f 0e       	add	r6, r31
    1f98:	71 1c       	adc	r7, r1
    1f9a:	f8 01       	movw	r30, r16
    1f9c:	a0 80       	ld	r10, Z
    1f9e:	b1 80       	ldd	r11, Z+1	; 0x01
    1fa0:	26 ff       	sbrs	r18, 6
    1fa2:	03 c0       	rjmp	.+6      	; 0x1faa <vfprintf+0x15a>
    1fa4:	65 2d       	mov	r22, r5
    1fa6:	70 e0       	ldi	r23, 0x00	; 0
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <vfprintf+0x15e>
    1faa:	6f ef       	ldi	r22, 0xFF	; 255
    1fac:	7f ef       	ldi	r23, 0xFF	; 255
    1fae:	c5 01       	movw	r24, r10
    1fb0:	2c 87       	std	Y+12, r18	; 0x0c
    1fb2:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <strnlen_P>
    1fb6:	2c 01       	movw	r4, r24
    1fb8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fba:	20 68       	ori	r18, 0x80	; 128
    1fbc:	22 2e       	mov	r2, r18
    1fbe:	83 01       	movw	r16, r6
    1fc0:	23 fc       	sbrc	r2, 3
    1fc2:	1b c0       	rjmp	.+54     	; 0x1ffa <vfprintf+0x1aa>
    1fc4:	83 2d       	mov	r24, r3
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	48 16       	cp	r4, r24
    1fca:	59 06       	cpc	r5, r25
    1fcc:	b0 f4       	brcc	.+44     	; 0x1ffa <vfprintf+0x1aa>
    1fce:	b7 01       	movw	r22, r14
    1fd0:	80 e2       	ldi	r24, 0x20	; 32
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	0e 94 20 11 	call	0x2240	; 0x2240 <fputc>
    1fd8:	3a 94       	dec	r3
    1fda:	f4 cf       	rjmp	.-24     	; 0x1fc4 <vfprintf+0x174>
    1fdc:	f5 01       	movw	r30, r10
    1fde:	27 fc       	sbrc	r2, 7
    1fe0:	85 91       	lpm	r24, Z+
    1fe2:	27 fe       	sbrs	r2, 7
    1fe4:	81 91       	ld	r24, Z+
    1fe6:	5f 01       	movw	r10, r30
    1fe8:	b7 01       	movw	r22, r14
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	0e 94 20 11 	call	0x2240	; 0x2240 <fputc>
    1ff0:	31 10       	cpse	r3, r1
    1ff2:	3a 94       	dec	r3
    1ff4:	f1 e0       	ldi	r31, 0x01	; 1
    1ff6:	4f 1a       	sub	r4, r31
    1ff8:	51 08       	sbc	r5, r1
    1ffa:	41 14       	cp	r4, r1
    1ffc:	51 04       	cpc	r5, r1
    1ffe:	71 f7       	brne	.-36     	; 0x1fdc <vfprintf+0x18c>
    2000:	e5 c0       	rjmp	.+458    	; 0x21cc <vfprintf+0x37c>
    2002:	84 36       	cpi	r24, 0x64	; 100
    2004:	11 f0       	breq	.+4      	; 0x200a <vfprintf+0x1ba>
    2006:	89 36       	cpi	r24, 0x69	; 105
    2008:	39 f5       	brne	.+78     	; 0x2058 <vfprintf+0x208>
    200a:	f8 01       	movw	r30, r16
    200c:	27 ff       	sbrs	r18, 7
    200e:	07 c0       	rjmp	.+14     	; 0x201e <vfprintf+0x1ce>
    2010:	60 81       	ld	r22, Z
    2012:	71 81       	ldd	r23, Z+1	; 0x01
    2014:	82 81       	ldd	r24, Z+2	; 0x02
    2016:	93 81       	ldd	r25, Z+3	; 0x03
    2018:	0c 5f       	subi	r16, 0xFC	; 252
    201a:	1f 4f       	sbci	r17, 0xFF	; 255
    201c:	08 c0       	rjmp	.+16     	; 0x202e <vfprintf+0x1de>
    201e:	60 81       	ld	r22, Z
    2020:	71 81       	ldd	r23, Z+1	; 0x01
    2022:	07 2e       	mov	r0, r23
    2024:	00 0c       	add	r0, r0
    2026:	88 0b       	sbc	r24, r24
    2028:	99 0b       	sbc	r25, r25
    202a:	0e 5f       	subi	r16, 0xFE	; 254
    202c:	1f 4f       	sbci	r17, 0xFF	; 255
    202e:	2f 76       	andi	r18, 0x6F	; 111
    2030:	72 2e       	mov	r7, r18
    2032:	97 ff       	sbrs	r25, 7
    2034:	09 c0       	rjmp	.+18     	; 0x2048 <vfprintf+0x1f8>
    2036:	90 95       	com	r25
    2038:	80 95       	com	r24
    203a:	70 95       	com	r23
    203c:	61 95       	neg	r22
    203e:	7f 4f       	sbci	r23, 0xFF	; 255
    2040:	8f 4f       	sbci	r24, 0xFF	; 255
    2042:	9f 4f       	sbci	r25, 0xFF	; 255
    2044:	20 68       	ori	r18, 0x80	; 128
    2046:	72 2e       	mov	r7, r18
    2048:	2a e0       	ldi	r18, 0x0A	; 10
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	a4 01       	movw	r20, r8
    204e:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__ultoa_invert>
    2052:	a8 2e       	mov	r10, r24
    2054:	a8 18       	sub	r10, r8
    2056:	44 c0       	rjmp	.+136    	; 0x20e0 <vfprintf+0x290>
    2058:	85 37       	cpi	r24, 0x75	; 117
    205a:	29 f4       	brne	.+10     	; 0x2066 <vfprintf+0x216>
    205c:	2f 7e       	andi	r18, 0xEF	; 239
    205e:	b2 2e       	mov	r11, r18
    2060:	2a e0       	ldi	r18, 0x0A	; 10
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	25 c0       	rjmp	.+74     	; 0x20b0 <vfprintf+0x260>
    2066:	f2 2f       	mov	r31, r18
    2068:	f9 7f       	andi	r31, 0xF9	; 249
    206a:	bf 2e       	mov	r11, r31
    206c:	8f 36       	cpi	r24, 0x6F	; 111
    206e:	c1 f0       	breq	.+48     	; 0x20a0 <vfprintf+0x250>
    2070:	18 f4       	brcc	.+6      	; 0x2078 <vfprintf+0x228>
    2072:	88 35       	cpi	r24, 0x58	; 88
    2074:	79 f0       	breq	.+30     	; 0x2094 <vfprintf+0x244>
    2076:	b4 c0       	rjmp	.+360    	; 0x21e0 <vfprintf+0x390>
    2078:	80 37       	cpi	r24, 0x70	; 112
    207a:	19 f0       	breq	.+6      	; 0x2082 <vfprintf+0x232>
    207c:	88 37       	cpi	r24, 0x78	; 120
    207e:	21 f0       	breq	.+8      	; 0x2088 <vfprintf+0x238>
    2080:	af c0       	rjmp	.+350    	; 0x21e0 <vfprintf+0x390>
    2082:	2f 2f       	mov	r18, r31
    2084:	20 61       	ori	r18, 0x10	; 16
    2086:	b2 2e       	mov	r11, r18
    2088:	b4 fe       	sbrs	r11, 4
    208a:	0d c0       	rjmp	.+26     	; 0x20a6 <vfprintf+0x256>
    208c:	8b 2d       	mov	r24, r11
    208e:	84 60       	ori	r24, 0x04	; 4
    2090:	b8 2e       	mov	r11, r24
    2092:	09 c0       	rjmp	.+18     	; 0x20a6 <vfprintf+0x256>
    2094:	24 ff       	sbrs	r18, 4
    2096:	0a c0       	rjmp	.+20     	; 0x20ac <vfprintf+0x25c>
    2098:	9f 2f       	mov	r25, r31
    209a:	96 60       	ori	r25, 0x06	; 6
    209c:	b9 2e       	mov	r11, r25
    209e:	06 c0       	rjmp	.+12     	; 0x20ac <vfprintf+0x25c>
    20a0:	28 e0       	ldi	r18, 0x08	; 8
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	05 c0       	rjmp	.+10     	; 0x20b0 <vfprintf+0x260>
    20a6:	20 e1       	ldi	r18, 0x10	; 16
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <vfprintf+0x260>
    20ac:	20 e1       	ldi	r18, 0x10	; 16
    20ae:	32 e0       	ldi	r19, 0x02	; 2
    20b0:	f8 01       	movw	r30, r16
    20b2:	b7 fe       	sbrs	r11, 7
    20b4:	07 c0       	rjmp	.+14     	; 0x20c4 <vfprintf+0x274>
    20b6:	60 81       	ld	r22, Z
    20b8:	71 81       	ldd	r23, Z+1	; 0x01
    20ba:	82 81       	ldd	r24, Z+2	; 0x02
    20bc:	93 81       	ldd	r25, Z+3	; 0x03
    20be:	0c 5f       	subi	r16, 0xFC	; 252
    20c0:	1f 4f       	sbci	r17, 0xFF	; 255
    20c2:	06 c0       	rjmp	.+12     	; 0x20d0 <vfprintf+0x280>
    20c4:	60 81       	ld	r22, Z
    20c6:	71 81       	ldd	r23, Z+1	; 0x01
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	0e 5f       	subi	r16, 0xFE	; 254
    20ce:	1f 4f       	sbci	r17, 0xFF	; 255
    20d0:	a4 01       	movw	r20, r8
    20d2:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__ultoa_invert>
    20d6:	a8 2e       	mov	r10, r24
    20d8:	a8 18       	sub	r10, r8
    20da:	fb 2d       	mov	r31, r11
    20dc:	ff 77       	andi	r31, 0x7F	; 127
    20de:	7f 2e       	mov	r7, r31
    20e0:	76 fe       	sbrs	r7, 6
    20e2:	0b c0       	rjmp	.+22     	; 0x20fa <vfprintf+0x2aa>
    20e4:	37 2d       	mov	r19, r7
    20e6:	3e 7f       	andi	r19, 0xFE	; 254
    20e8:	a5 14       	cp	r10, r5
    20ea:	50 f4       	brcc	.+20     	; 0x2100 <vfprintf+0x2b0>
    20ec:	74 fe       	sbrs	r7, 4
    20ee:	0a c0       	rjmp	.+20     	; 0x2104 <vfprintf+0x2b4>
    20f0:	72 fc       	sbrc	r7, 2
    20f2:	08 c0       	rjmp	.+16     	; 0x2104 <vfprintf+0x2b4>
    20f4:	37 2d       	mov	r19, r7
    20f6:	3e 7e       	andi	r19, 0xEE	; 238
    20f8:	05 c0       	rjmp	.+10     	; 0x2104 <vfprintf+0x2b4>
    20fa:	ba 2c       	mov	r11, r10
    20fc:	37 2d       	mov	r19, r7
    20fe:	03 c0       	rjmp	.+6      	; 0x2106 <vfprintf+0x2b6>
    2100:	ba 2c       	mov	r11, r10
    2102:	01 c0       	rjmp	.+2      	; 0x2106 <vfprintf+0x2b6>
    2104:	b5 2c       	mov	r11, r5
    2106:	34 ff       	sbrs	r19, 4
    2108:	0d c0       	rjmp	.+26     	; 0x2124 <vfprintf+0x2d4>
    210a:	fe 01       	movw	r30, r28
    210c:	ea 0d       	add	r30, r10
    210e:	f1 1d       	adc	r31, r1
    2110:	80 81       	ld	r24, Z
    2112:	80 33       	cpi	r24, 0x30	; 48
    2114:	11 f4       	brne	.+4      	; 0x211a <vfprintf+0x2ca>
    2116:	39 7e       	andi	r19, 0xE9	; 233
    2118:	09 c0       	rjmp	.+18     	; 0x212c <vfprintf+0x2dc>
    211a:	32 ff       	sbrs	r19, 2
    211c:	06 c0       	rjmp	.+12     	; 0x212a <vfprintf+0x2da>
    211e:	b3 94       	inc	r11
    2120:	b3 94       	inc	r11
    2122:	04 c0       	rjmp	.+8      	; 0x212c <vfprintf+0x2dc>
    2124:	83 2f       	mov	r24, r19
    2126:	86 78       	andi	r24, 0x86	; 134
    2128:	09 f0       	breq	.+2      	; 0x212c <vfprintf+0x2dc>
    212a:	b3 94       	inc	r11
    212c:	33 fd       	sbrc	r19, 3
    212e:	13 c0       	rjmp	.+38     	; 0x2156 <vfprintf+0x306>
    2130:	30 ff       	sbrs	r19, 0
    2132:	06 c0       	rjmp	.+12     	; 0x2140 <vfprintf+0x2f0>
    2134:	5a 2c       	mov	r5, r10
    2136:	b3 14       	cp	r11, r3
    2138:	18 f4       	brcc	.+6      	; 0x2140 <vfprintf+0x2f0>
    213a:	53 0c       	add	r5, r3
    213c:	5b 18       	sub	r5, r11
    213e:	b3 2c       	mov	r11, r3
    2140:	b3 14       	cp	r11, r3
    2142:	68 f4       	brcc	.+26     	; 0x215e <vfprintf+0x30e>
    2144:	b7 01       	movw	r22, r14
    2146:	80 e2       	ldi	r24, 0x20	; 32
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	3c 87       	std	Y+12, r19	; 0x0c
    214c:	0e 94 20 11 	call	0x2240	; 0x2240 <fputc>
    2150:	b3 94       	inc	r11
    2152:	3c 85       	ldd	r19, Y+12	; 0x0c
    2154:	f5 cf       	rjmp	.-22     	; 0x2140 <vfprintf+0x2f0>
    2156:	b3 14       	cp	r11, r3
    2158:	10 f4       	brcc	.+4      	; 0x215e <vfprintf+0x30e>
    215a:	3b 18       	sub	r3, r11
    215c:	01 c0       	rjmp	.+2      	; 0x2160 <vfprintf+0x310>
    215e:	31 2c       	mov	r3, r1
    2160:	34 ff       	sbrs	r19, 4
    2162:	12 c0       	rjmp	.+36     	; 0x2188 <vfprintf+0x338>
    2164:	b7 01       	movw	r22, r14
    2166:	80 e3       	ldi	r24, 0x30	; 48
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	3c 87       	std	Y+12, r19	; 0x0c
    216c:	0e 94 20 11 	call	0x2240	; 0x2240 <fputc>
    2170:	3c 85       	ldd	r19, Y+12	; 0x0c
    2172:	32 ff       	sbrs	r19, 2
    2174:	17 c0       	rjmp	.+46     	; 0x21a4 <vfprintf+0x354>
    2176:	31 fd       	sbrc	r19, 1
    2178:	03 c0       	rjmp	.+6      	; 0x2180 <vfprintf+0x330>
    217a:	88 e7       	ldi	r24, 0x78	; 120
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <vfprintf+0x334>
    2180:	88 e5       	ldi	r24, 0x58	; 88
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	b7 01       	movw	r22, r14
    2186:	0c c0       	rjmp	.+24     	; 0x21a0 <vfprintf+0x350>
    2188:	83 2f       	mov	r24, r19
    218a:	86 78       	andi	r24, 0x86	; 134
    218c:	59 f0       	breq	.+22     	; 0x21a4 <vfprintf+0x354>
    218e:	31 ff       	sbrs	r19, 1
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <vfprintf+0x346>
    2192:	8b e2       	ldi	r24, 0x2B	; 43
    2194:	01 c0       	rjmp	.+2      	; 0x2198 <vfprintf+0x348>
    2196:	80 e2       	ldi	r24, 0x20	; 32
    2198:	37 fd       	sbrc	r19, 7
    219a:	8d e2       	ldi	r24, 0x2D	; 45
    219c:	b7 01       	movw	r22, r14
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	0e 94 20 11 	call	0x2240	; 0x2240 <fputc>
    21a4:	a5 14       	cp	r10, r5
    21a6:	38 f4       	brcc	.+14     	; 0x21b6 <vfprintf+0x366>
    21a8:	b7 01       	movw	r22, r14
    21aa:	80 e3       	ldi	r24, 0x30	; 48
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	0e 94 20 11 	call	0x2240	; 0x2240 <fputc>
    21b2:	5a 94       	dec	r5
    21b4:	f7 cf       	rjmp	.-18     	; 0x21a4 <vfprintf+0x354>
    21b6:	aa 94       	dec	r10
    21b8:	f4 01       	movw	r30, r8
    21ba:	ea 0d       	add	r30, r10
    21bc:	f1 1d       	adc	r31, r1
    21be:	80 81       	ld	r24, Z
    21c0:	b7 01       	movw	r22, r14
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	0e 94 20 11 	call	0x2240	; 0x2240 <fputc>
    21c8:	a1 10       	cpse	r10, r1
    21ca:	f5 cf       	rjmp	.-22     	; 0x21b6 <vfprintf+0x366>
    21cc:	33 20       	and	r3, r3
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <vfprintf+0x382>
    21d0:	51 ce       	rjmp	.-862    	; 0x1e74 <vfprintf+0x24>
    21d2:	b7 01       	movw	r22, r14
    21d4:	80 e2       	ldi	r24, 0x20	; 32
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	0e 94 20 11 	call	0x2240	; 0x2240 <fputc>
    21dc:	3a 94       	dec	r3
    21de:	f6 cf       	rjmp	.-20     	; 0x21cc <vfprintf+0x37c>
    21e0:	f7 01       	movw	r30, r14
    21e2:	86 81       	ldd	r24, Z+6	; 0x06
    21e4:	97 81       	ldd	r25, Z+7	; 0x07
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <vfprintf+0x39c>
    21e8:	8f ef       	ldi	r24, 0xFF	; 255
    21ea:	9f ef       	ldi	r25, 0xFF	; 255
    21ec:	2c 96       	adiw	r28, 0x0c	; 12
    21ee:	e2 e1       	ldi	r30, 0x12	; 18
    21f0:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__epilogue_restores__>

000021f4 <strnlen_P>:
    21f4:	fc 01       	movw	r30, r24
    21f6:	05 90       	lpm	r0, Z+
    21f8:	61 50       	subi	r22, 0x01	; 1
    21fa:	70 40       	sbci	r23, 0x00	; 0
    21fc:	01 10       	cpse	r0, r1
    21fe:	d8 f7       	brcc	.-10     	; 0x21f6 <strnlen_P+0x2>
    2200:	80 95       	com	r24
    2202:	90 95       	com	r25
    2204:	8e 0f       	add	r24, r30
    2206:	9f 1f       	adc	r25, r31
    2208:	08 95       	ret

0000220a <strnlen>:
    220a:	fc 01       	movw	r30, r24
    220c:	61 50       	subi	r22, 0x01	; 1
    220e:	70 40       	sbci	r23, 0x00	; 0
    2210:	01 90       	ld	r0, Z+
    2212:	01 10       	cpse	r0, r1
    2214:	d8 f7       	brcc	.-10     	; 0x220c <strnlen+0x2>
    2216:	80 95       	com	r24
    2218:	90 95       	com	r25
    221a:	8e 0f       	add	r24, r30
    221c:	9f 1f       	adc	r25, r31
    221e:	08 95       	ret

00002220 <strrev>:
    2220:	dc 01       	movw	r26, r24
    2222:	fc 01       	movw	r30, r24
    2224:	67 2f       	mov	r22, r23
    2226:	71 91       	ld	r23, Z+
    2228:	77 23       	and	r23, r23
    222a:	e1 f7       	brne	.-8      	; 0x2224 <strrev+0x4>
    222c:	32 97       	sbiw	r30, 0x02	; 2
    222e:	04 c0       	rjmp	.+8      	; 0x2238 <strrev+0x18>
    2230:	7c 91       	ld	r23, X
    2232:	6d 93       	st	X+, r22
    2234:	70 83       	st	Z, r23
    2236:	62 91       	ld	r22, -Z
    2238:	ae 17       	cp	r26, r30
    223a:	bf 07       	cpc	r27, r31
    223c:	c8 f3       	brcs	.-14     	; 0x2230 <strrev+0x10>
    223e:	08 95       	ret

00002240 <fputc>:
    2240:	0f 93       	push	r16
    2242:	1f 93       	push	r17
    2244:	cf 93       	push	r28
    2246:	df 93       	push	r29
    2248:	fb 01       	movw	r30, r22
    224a:	23 81       	ldd	r18, Z+3	; 0x03
    224c:	21 fd       	sbrc	r18, 1
    224e:	03 c0       	rjmp	.+6      	; 0x2256 <fputc+0x16>
    2250:	8f ef       	ldi	r24, 0xFF	; 255
    2252:	9f ef       	ldi	r25, 0xFF	; 255
    2254:	28 c0       	rjmp	.+80     	; 0x22a6 <fputc+0x66>
    2256:	22 ff       	sbrs	r18, 2
    2258:	16 c0       	rjmp	.+44     	; 0x2286 <fputc+0x46>
    225a:	46 81       	ldd	r20, Z+6	; 0x06
    225c:	57 81       	ldd	r21, Z+7	; 0x07
    225e:	24 81       	ldd	r18, Z+4	; 0x04
    2260:	35 81       	ldd	r19, Z+5	; 0x05
    2262:	42 17       	cp	r20, r18
    2264:	53 07       	cpc	r21, r19
    2266:	44 f4       	brge	.+16     	; 0x2278 <fputc+0x38>
    2268:	a0 81       	ld	r26, Z
    226a:	b1 81       	ldd	r27, Z+1	; 0x01
    226c:	9d 01       	movw	r18, r26
    226e:	2f 5f       	subi	r18, 0xFF	; 255
    2270:	3f 4f       	sbci	r19, 0xFF	; 255
    2272:	20 83       	st	Z, r18
    2274:	31 83       	std	Z+1, r19	; 0x01
    2276:	8c 93       	st	X, r24
    2278:	26 81       	ldd	r18, Z+6	; 0x06
    227a:	37 81       	ldd	r19, Z+7	; 0x07
    227c:	2f 5f       	subi	r18, 0xFF	; 255
    227e:	3f 4f       	sbci	r19, 0xFF	; 255
    2280:	26 83       	std	Z+6, r18	; 0x06
    2282:	37 83       	std	Z+7, r19	; 0x07
    2284:	10 c0       	rjmp	.+32     	; 0x22a6 <fputc+0x66>
    2286:	eb 01       	movw	r28, r22
    2288:	09 2f       	mov	r16, r25
    228a:	18 2f       	mov	r17, r24
    228c:	00 84       	ldd	r0, Z+8	; 0x08
    228e:	f1 85       	ldd	r31, Z+9	; 0x09
    2290:	e0 2d       	mov	r30, r0
    2292:	09 95       	icall
    2294:	89 2b       	or	r24, r25
    2296:	e1 f6       	brne	.-72     	; 0x2250 <fputc+0x10>
    2298:	8e 81       	ldd	r24, Y+6	; 0x06
    229a:	9f 81       	ldd	r25, Y+7	; 0x07
    229c:	01 96       	adiw	r24, 0x01	; 1
    229e:	8e 83       	std	Y+6, r24	; 0x06
    22a0:	9f 83       	std	Y+7, r25	; 0x07
    22a2:	81 2f       	mov	r24, r17
    22a4:	90 2f       	mov	r25, r16
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	1f 91       	pop	r17
    22ac:	0f 91       	pop	r16
    22ae:	08 95       	ret

000022b0 <__ultoa_invert>:
    22b0:	fa 01       	movw	r30, r20
    22b2:	aa 27       	eor	r26, r26
    22b4:	28 30       	cpi	r18, 0x08	; 8
    22b6:	51 f1       	breq	.+84     	; 0x230c <__ultoa_invert+0x5c>
    22b8:	20 31       	cpi	r18, 0x10	; 16
    22ba:	81 f1       	breq	.+96     	; 0x231c <__ultoa_invert+0x6c>
    22bc:	e8 94       	clt
    22be:	6f 93       	push	r22
    22c0:	6e 7f       	andi	r22, 0xFE	; 254
    22c2:	6e 5f       	subi	r22, 0xFE	; 254
    22c4:	7f 4f       	sbci	r23, 0xFF	; 255
    22c6:	8f 4f       	sbci	r24, 0xFF	; 255
    22c8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ca:	af 4f       	sbci	r26, 0xFF	; 255
    22cc:	b1 e0       	ldi	r27, 0x01	; 1
    22ce:	3e d0       	rcall	.+124    	; 0x234c <__ultoa_invert+0x9c>
    22d0:	b4 e0       	ldi	r27, 0x04	; 4
    22d2:	3c d0       	rcall	.+120    	; 0x234c <__ultoa_invert+0x9c>
    22d4:	67 0f       	add	r22, r23
    22d6:	78 1f       	adc	r23, r24
    22d8:	89 1f       	adc	r24, r25
    22da:	9a 1f       	adc	r25, r26
    22dc:	a1 1d       	adc	r26, r1
    22de:	68 0f       	add	r22, r24
    22e0:	79 1f       	adc	r23, r25
    22e2:	8a 1f       	adc	r24, r26
    22e4:	91 1d       	adc	r25, r1
    22e6:	a1 1d       	adc	r26, r1
    22e8:	6a 0f       	add	r22, r26
    22ea:	71 1d       	adc	r23, r1
    22ec:	81 1d       	adc	r24, r1
    22ee:	91 1d       	adc	r25, r1
    22f0:	a1 1d       	adc	r26, r1
    22f2:	20 d0       	rcall	.+64     	; 0x2334 <__ultoa_invert+0x84>
    22f4:	09 f4       	brne	.+2      	; 0x22f8 <__ultoa_invert+0x48>
    22f6:	68 94       	set
    22f8:	3f 91       	pop	r19
    22fa:	2a e0       	ldi	r18, 0x0A	; 10
    22fc:	26 9f       	mul	r18, r22
    22fe:	11 24       	eor	r1, r1
    2300:	30 19       	sub	r19, r0
    2302:	30 5d       	subi	r19, 0xD0	; 208
    2304:	31 93       	st	Z+, r19
    2306:	de f6       	brtc	.-74     	; 0x22be <__ultoa_invert+0xe>
    2308:	cf 01       	movw	r24, r30
    230a:	08 95       	ret
    230c:	46 2f       	mov	r20, r22
    230e:	47 70       	andi	r20, 0x07	; 7
    2310:	40 5d       	subi	r20, 0xD0	; 208
    2312:	41 93       	st	Z+, r20
    2314:	b3 e0       	ldi	r27, 0x03	; 3
    2316:	0f d0       	rcall	.+30     	; 0x2336 <__ultoa_invert+0x86>
    2318:	c9 f7       	brne	.-14     	; 0x230c <__ultoa_invert+0x5c>
    231a:	f6 cf       	rjmp	.-20     	; 0x2308 <__ultoa_invert+0x58>
    231c:	46 2f       	mov	r20, r22
    231e:	4f 70       	andi	r20, 0x0F	; 15
    2320:	40 5d       	subi	r20, 0xD0	; 208
    2322:	4a 33       	cpi	r20, 0x3A	; 58
    2324:	18 f0       	brcs	.+6      	; 0x232c <__ultoa_invert+0x7c>
    2326:	49 5d       	subi	r20, 0xD9	; 217
    2328:	31 fd       	sbrc	r19, 1
    232a:	40 52       	subi	r20, 0x20	; 32
    232c:	41 93       	st	Z+, r20
    232e:	02 d0       	rcall	.+4      	; 0x2334 <__ultoa_invert+0x84>
    2330:	a9 f7       	brne	.-22     	; 0x231c <__ultoa_invert+0x6c>
    2332:	ea cf       	rjmp	.-44     	; 0x2308 <__ultoa_invert+0x58>
    2334:	b4 e0       	ldi	r27, 0x04	; 4
    2336:	a6 95       	lsr	r26
    2338:	97 95       	ror	r25
    233a:	87 95       	ror	r24
    233c:	77 95       	ror	r23
    233e:	67 95       	ror	r22
    2340:	ba 95       	dec	r27
    2342:	c9 f7       	brne	.-14     	; 0x2336 <__ultoa_invert+0x86>
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	61 05       	cpc	r22, r1
    2348:	71 05       	cpc	r23, r1
    234a:	08 95       	ret
    234c:	9b 01       	movw	r18, r22
    234e:	ac 01       	movw	r20, r24
    2350:	0a 2e       	mov	r0, r26
    2352:	06 94       	lsr	r0
    2354:	57 95       	ror	r21
    2356:	47 95       	ror	r20
    2358:	37 95       	ror	r19
    235a:	27 95       	ror	r18
    235c:	ba 95       	dec	r27
    235e:	c9 f7       	brne	.-14     	; 0x2352 <__ultoa_invert+0xa2>
    2360:	62 0f       	add	r22, r18
    2362:	73 1f       	adc	r23, r19
    2364:	84 1f       	adc	r24, r20
    2366:	95 1f       	adc	r25, r21
    2368:	a0 1d       	adc	r26, r0
    236a:	08 95       	ret

0000236c <__prologue_saves__>:
    236c:	2f 92       	push	r2
    236e:	3f 92       	push	r3
    2370:	4f 92       	push	r4
    2372:	5f 92       	push	r5
    2374:	6f 92       	push	r6
    2376:	7f 92       	push	r7
    2378:	8f 92       	push	r8
    237a:	9f 92       	push	r9
    237c:	af 92       	push	r10
    237e:	bf 92       	push	r11
    2380:	cf 92       	push	r12
    2382:	df 92       	push	r13
    2384:	ef 92       	push	r14
    2386:	ff 92       	push	r15
    2388:	0f 93       	push	r16
    238a:	1f 93       	push	r17
    238c:	cf 93       	push	r28
    238e:	df 93       	push	r29
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	ca 1b       	sub	r28, r26
    2396:	db 0b       	sbc	r29, r27
    2398:	cd bf       	out	0x3d, r28	; 61
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	09 94       	ijmp

0000239e <__epilogue_restores__>:
    239e:	2a 88       	ldd	r2, Y+18	; 0x12
    23a0:	39 88       	ldd	r3, Y+17	; 0x11
    23a2:	48 88       	ldd	r4, Y+16	; 0x10
    23a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    23a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    23a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    23aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    23ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    23ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    23b0:	b9 84       	ldd	r11, Y+9	; 0x09
    23b2:	c8 84       	ldd	r12, Y+8	; 0x08
    23b4:	df 80       	ldd	r13, Y+7	; 0x07
    23b6:	ee 80       	ldd	r14, Y+6	; 0x06
    23b8:	fd 80       	ldd	r15, Y+5	; 0x05
    23ba:	0c 81       	ldd	r16, Y+4	; 0x04
    23bc:	1b 81       	ldd	r17, Y+3	; 0x03
    23be:	aa 81       	ldd	r26, Y+2	; 0x02
    23c0:	b9 81       	ldd	r27, Y+1	; 0x01
    23c2:	ce 0f       	add	r28, r30
    23c4:	d1 1d       	adc	r29, r1
    23c6:	cd bf       	out	0x3d, r28	; 61
    23c8:	de bf       	out	0x3e, r29	; 62
    23ca:	ed 01       	movw	r28, r26
    23cc:	08 95       	ret

000023ce <_exit>:
    23ce:	f8 94       	cli

000023d0 <__stop_program>:
    23d0:	ff cf       	rjmp	.-2      	; 0x23d0 <__stop_program>
